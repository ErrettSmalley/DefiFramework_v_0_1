{
  "address": "0x74D2848c45e9A52B53cDCCD2F66A04866E4CBFd6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "addNonStakingAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "admins",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "id",
      "outputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inPrivateTransferMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isHandler",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonStakingAccounts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonStakingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "recoverClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "removeNonStakingAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_handler",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        }
      ],
      "name": "setHandler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_inPrivateTransferMode",
          "type": "bool"
        }
      ],
      "name": "setInPrivateTransferMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "setInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_yieldTrackers",
          "type": "address[]"
        }
      ],
      "name": "setYieldTrackers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "stakedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "yieldTrackers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x96caf8fdf0f6d4c88849c8642a0d45d75ff3070d46c37b1a550c82f480a5ec5d",
  "receipt": {
    "to": null,
    "from": "0x9B6B26Db5F9149F0e3f4DAF2Eb98307020236dDB",
    "contractAddress": "0x74D2848c45e9A52B53cDCCD2F66A04866E4CBFd6",
    "transactionIndex": 4,
    "gasUsed": "2098682",
    "logsBloom": "0x0000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000800000000000000000000000a000000000000000000000000008000000800000080000000000000100000000000000000000020000000000000000000800000000000000000080400010000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000080000008000000000000000000000000004000000004000000002000000000001000000000100000000000000000000100000000020000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x7809838c8f341dcefac33b0b2098d31ff3b838add4aed772feee453752260c80",
    "transactionHash": "0x96caf8fdf0f6d4c88849c8642a0d45d75ff3070d46c37b1a550c82f480a5ec5d",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 33420467,
        "transactionHash": "0x96caf8fdf0f6d4c88849c8642a0d45d75ff3070d46c37b1a550c82f480a5ec5d",
        "address": "0x74D2848c45e9A52B53cDCCD2F66A04866E4CBFd6",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009b6b26db5f9149f0e3f4daf2eb98307020236ddb"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 12,
        "blockHash": "0x7809838c8f341dcefac33b0b2098d31ff3b838add4aed772feee453752260c80"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 33420467,
        "transactionHash": "0x96caf8fdf0f6d4c88849c8642a0d45d75ff3070d46c37b1a550c82f480a5ec5d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009b6b26db5f9149f0e3f4daf2eb98307020236ddb",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000b2f1c38a8e60000000000000000000000000000000000000000000000000087ec7ef3f3d7c1d800000000000000000000000000000000000000000000045629ef0bdfc194266000000000000000000000000000000000000000000000000087e14fd7bb2edbd800000000000000000000000000000000000000000000045629fa3afbfa3d0c60",
        "logIndex": 13,
        "blockHash": "0x7809838c8f341dcefac33b0b2098d31ff3b838add4aed772feee453752260c80"
      }
    ],
    "blockNumber": 33420467,
    "cumulativeGasUsed": "2409520",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "59bf562207d3b98a68d8cbf2ed09b4a8",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addNonStakingAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inPrivateTransferMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonStakingAccounts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonStakingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"recoverClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeNonStakingAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_inPrivateTransferMode\",\"type\":\"bool\"}],\"name\":\"setInPrivateTransferMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_yieldTrackers\",\"type\":\"address[]\"}],\"name\":\"setYieldTrackers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"stakedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yieldTrackers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/gmx/MLP.sol\":\"MLP\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/gmx/MLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../tokens/MintableBaseToken.sol\\\";\\n\\ncontract MLP is MintableBaseToken {\\n    constructor() public MintableBaseToken(\\\"MOLD LP\\\", \\\"MLP\\\", 0) {\\n    }\\n\\n    function id() external pure returns (string memory _name) {\\n        return \\\"MLP\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x5204288e791a8cf50ddbc88aa09a54cb4a2b63044eef0e39d9d074146833417a\",\"license\":\"MIT\"},\"contracts/libraries/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x41b0da7db3e1f79b338824fed2bc4732430b78002a9d51c2cfa86ad5a12c2763\",\"license\":\"MIT\"},\"contracts/libraries/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa3ce253082421a9e79d2b884ae6f60507b0cc73ea356674072091454c44cc556\",\"license\":\"MIT\"},\"contracts/libraries/token/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../math/SafeMath.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf80766b21ea67a73c81e0dea4543375243938c8b223e29c5d783be61ab3f424c\",\"license\":\"MIT\"},\"contracts/libraries/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1845481964ebacf35afe1a006fa574793b52e698eba0a8db6e3d30202bc45429\",\"license\":\"MIT\"},\"contracts/tokens/BaseToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IYieldTracker.sol\\\";\\nimport \\\"./interfaces/IBaseToken.sol\\\";\\n\\ncontract BaseToken is IERC20, IBaseToken {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    string public name;\\n    string public symbol;\\n    uint8 public constant decimals = 18;\\n\\n    uint256 public override totalSupply;\\n    uint256 public nonStakingSupply;\\n\\n    address public gov;\\n\\n    mapping (address => uint256) public balances;\\n    mapping (address => mapping (address => uint256)) public allowances;\\n\\n    address[] public yieldTrackers;\\n    mapping (address => bool) public nonStakingAccounts;\\n    mapping (address => bool) public admins;\\n\\n    bool public inPrivateTransferMode;\\n    mapping (address => bool) public isHandler;\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"BaseToken: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(admins[msg.sender], \\\"BaseToken: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor(string memory _name, string memory _symbol, uint256 _initialSupply) public {\\n        name = _name;\\n        symbol = _symbol;\\n        gov = msg.sender;\\n        _mint(msg.sender, _initialSupply);\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n\\n    function setInfo(string memory _name, string memory _symbol) external onlyGov {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    function setYieldTrackers(address[] memory _yieldTrackers) external onlyGov {\\n        yieldTrackers = _yieldTrackers;\\n    }\\n\\n    function addAdmin(address _account) external onlyGov {\\n        admins[_account] = true;\\n    }\\n\\n    function removeAdmin(address _account) external override onlyGov {\\n        admins[_account] = false;\\n    }\\n\\n    // to help users who accidentally send their tokens to this contract\\n    function withdrawToken(address _token, address _account, uint256 _amount) external override onlyGov {\\n        IERC20(_token).safeTransfer(_account, _amount);\\n    }\\n\\n    function setInPrivateTransferMode(bool _inPrivateTransferMode) external override onlyGov {\\n        inPrivateTransferMode = _inPrivateTransferMode;\\n    }\\n\\n    function setHandler(address _handler, bool _isActive) external onlyGov {\\n        isHandler[_handler] = _isActive;\\n    }\\n\\n    function addNonStakingAccount(address _account) external onlyAdmin {\\n        require(!nonStakingAccounts[_account], \\\"BaseToken: _account already marked\\\");\\n        _updateRewards(_account);\\n        nonStakingAccounts[_account] = true;\\n        nonStakingSupply = nonStakingSupply.add(balances[_account]);\\n    }\\n\\n    function removeNonStakingAccount(address _account) external onlyAdmin {\\n        require(nonStakingAccounts[_account], \\\"BaseToken: _account not marked\\\");\\n        _updateRewards(_account);\\n        nonStakingAccounts[_account] = false;\\n        nonStakingSupply = nonStakingSupply.sub(balances[_account]);\\n    }\\n\\n    function recoverClaim(address _account, address _receiver) external onlyAdmin {\\n        for (uint256 i = 0; i < yieldTrackers.length; i++) {\\n            address yieldTracker = yieldTrackers[i];\\n            IYieldTracker(yieldTracker).claim(_account, _receiver);\\n        }\\n    }\\n\\n    function claim(address _receiver) external {\\n        for (uint256 i = 0; i < yieldTrackers.length; i++) {\\n            address yieldTracker = yieldTrackers[i];\\n            IYieldTracker(yieldTracker).claim(msg.sender, _receiver);\\n        }\\n    }\\n\\n    function totalStaked() external view override returns (uint256) {\\n        return totalSupply.sub(nonStakingSupply);\\n    }\\n\\n    function balanceOf(address _account) external view override returns (uint256) {\\n        return balances[_account];\\n    }\\n\\n    function stakedBalance(address _account) external view override returns (uint256) {\\n        if (nonStakingAccounts[_account]) {\\n            return 0;\\n        }\\n        return balances[_account];\\n    }\\n\\n    function transfer(address _recipient, uint256 _amount) external override returns (bool) {\\n        _transfer(msg.sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    function allowance(address _owner, address _spender) external view override returns (uint256) {\\n        return allowances[_owner][_spender];\\n    }\\n\\n    function approve(address _spender, uint256 _amount) external override returns (bool) {\\n        _approve(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address _sender, address _recipient, uint256 _amount) external override returns (bool) {\\n        if (isHandler[msg.sender]) {\\n            _transfer(_sender, _recipient, _amount);\\n            return true;\\n        }\\n        uint256 nextAllowance = allowances[_sender][msg.sender].sub(_amount, \\\"BaseToken: transfer amount exceeds allowance\\\");\\n        _approve(_sender, msg.sender, nextAllowance);\\n        _transfer(_sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    function _mint(address _account, uint256 _amount) internal {\\n        require(_account != address(0), \\\"BaseToken: mint to the zero address\\\");\\n\\n        _updateRewards(_account);\\n\\n        totalSupply = totalSupply.add(_amount);\\n        balances[_account] = balances[_account].add(_amount);\\n\\n        if (nonStakingAccounts[_account]) {\\n            nonStakingSupply = nonStakingSupply.add(_amount);\\n        }\\n\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    function _burn(address _account, uint256 _amount) internal {\\n        require(_account != address(0), \\\"BaseToken: burn from the zero address\\\");\\n\\n        _updateRewards(_account);\\n\\n        balances[_account] = balances[_account].sub(_amount, \\\"BaseToken: burn amount exceeds balance\\\");\\n        totalSupply = totalSupply.sub(_amount);\\n\\n        if (nonStakingAccounts[_account]) {\\n            nonStakingSupply = nonStakingSupply.sub(_amount);\\n        }\\n\\n        emit Transfer(_account, address(0), _amount);\\n    }\\n\\n    function _transfer(address _sender, address _recipient, uint256 _amount) private {\\n        require(_sender != address(0), \\\"BaseToken: transfer from the zero address\\\");\\n        require(_recipient != address(0), \\\"BaseToken: transfer to the zero address\\\");\\n\\n        if (inPrivateTransferMode) {\\n            require(isHandler[msg.sender], \\\"BaseToken: msg.sender not whitelisted\\\");\\n        }\\n\\n        _updateRewards(_sender);\\n        _updateRewards(_recipient);\\n\\n        balances[_sender] = balances[_sender].sub(_amount, \\\"BaseToken: transfer amount exceeds balance\\\");\\n        balances[_recipient] = balances[_recipient].add(_amount);\\n\\n        if (nonStakingAccounts[_sender]) {\\n            nonStakingSupply = nonStakingSupply.sub(_amount);\\n        }\\n        if (nonStakingAccounts[_recipient]) {\\n            nonStakingSupply = nonStakingSupply.add(_amount);\\n        }\\n\\n        emit Transfer(_sender, _recipient,_amount);\\n    }\\n\\n    function _approve(address _owner, address _spender, uint256 _amount) private {\\n        require(_owner != address(0), \\\"BaseToken: approve from the zero address\\\");\\n        require(_spender != address(0), \\\"BaseToken: approve to the zero address\\\");\\n\\n        allowances[_owner][_spender] = _amount;\\n\\n        emit Approval(_owner, _spender, _amount);\\n    }\\n\\n    function _updateRewards(address _account) private {\\n        for (uint256 i = 0; i < yieldTrackers.length; i++) {\\n            address yieldTracker = yieldTrackers[i];\\n            IYieldTracker(yieldTracker).updateRewards(_account);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x35c44d33256f49051eaf118a02e6bc77f2429a1ede80bcbcbc08f1b2c2111122\",\"license\":\"MIT\"},\"contracts/tokens/MintableBaseToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./BaseToken.sol\\\";\\nimport \\\"./interfaces/IMintable.sol\\\";\\n\\ncontract MintableBaseToken is BaseToken, IMintable {\\n\\n    mapping (address => bool) public override isMinter;\\n\\n    constructor(string memory _name, string memory _symbol, uint256 _initialSupply) public BaseToken(_name, _symbol, _initialSupply) {\\n    }\\n\\n    modifier onlyMinter() {\\n        require(isMinter[msg.sender], \\\"MintableBaseToken: forbidden\\\");\\n        _;\\n    }\\n\\n    function setMinter(address _minter, bool _isActive) external override onlyGov {\\n        isMinter[_minter] = _isActive;\\n    }\\n\\n    function mint(address _account, uint256 _amount) external override onlyMinter {\\n        _mint(_account, _amount);\\n    }\\n\\n    function burn(address _account, uint256 _amount) external override onlyMinter {\\n        _burn(_account, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xe7c7c41216e7a3b59e34f55c7498ad7aec1c5c639cdf1cb41730690b5af91d9d\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IBaseToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IBaseToken {\\n    function totalStaked() external view returns (uint256);\\n    function stakedBalance(address _account) external view returns (uint256);\\n    function removeAdmin(address _account) external;\\n    function setInPrivateTransferMode(bool _inPrivateTransferMode) external;\\n    function withdrawToken(address _token, address _account, uint256 _amount) external;\\n}\",\"keccak256\":\"0x0d3e508af43f1ecefb9543bfef0e021ba449bcdb955af200ab96ff091668c385\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IMintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IMintable {\\n    function isMinter(address _account) external returns (bool);\\n    function setMinter(address _minter, bool _isActive) external;\\n    function mint(address _account, uint256 _amount) external;\\n    function burn(address _account, uint256 _amount) external;\\n}\",\"keccak256\":\"0x1cb14f340029d7d16406d49987335f073a0c4006cff2c46fd66b3d2c8717e2f8\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IYieldTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IYieldTracker {\\n    function claim(address _account, address _receiver) external returns (uint256);\\n    function updateRewards(address _account) external;\\n    function getTokensPerInterval() external view returns (uint256);\\n    function claimable(address _account) external view returns (uint256);\\n}\",\"keccak256\":\"0xa520f9e2f625c31f475cbc0f5a2498985f993eb4502b1a38e4e1fa9554270877\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040518060400160405280600781526020016604d4f4c44204c560cc1b8152506040518060400160405280600381526020016204d4c560ec1b815250600082828282600090805190602001906200006b929190620002e6565b50815162000081906001906020850190620002e6565b50600480546001600160a01b03191633908117909155620000a39082620000af565b50505050505062000382565b6001600160a01b038216620000f65760405162461bcd60e51b8152600401808060200182810382526023815260200180620026eb6023913960400191505060405180910390fd5b6200010182620001e5565b6200011d816002546200028460201b620015c81790919060201c565b6002556001600160a01b03821660009081526005602090815260409091205462000152918390620015c862000284821b17901c565b6001600160a01b03831660009081526005602090815260408083209390935560089052205460ff1615620001a0576200019c816003546200028460201b620015c81790919060201c565b6003555b6040805182815290516001600160a01b038416916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60005b60075481101562000280576000600782815481106200020357fe5b600091825260208220015460408051635fd6196560e01b81526001600160a01b03878116600483015291519190921693508392635fd61965926024808201939182900301818387803b1580156200025957600080fd5b505af11580156200026e573d6000803e3d6000fd5b505060019093019250620001e8915050565b5050565b600082820183811015620002df576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200032957805160ff191683800117855562000359565b8280016001018555821562000359579182015b82811115620003595782518255916020019190600101906200033c565b50620003679291506200036b565b5090565b5b808211156200036757600081556001016200036c565b61235980620003926000396000f3fe608060405234801561001057600080fd5b50600436106102775760003560e01c80636228907711610160578063a9059cbb116100d8578063cf456ae71161008c578063dd62ed3e11610071578063dd62ed3e14610933578063dfbaefb114610961578063fb30d9161461096957610277565b8063cf456ae7146108df578063cfad57a21461090d57610277565b8063aa271e1a116100bd578063aa271e1a146108a9578063af640d0f146108cf578063c93be636146108d757610277565b8063a9059cbb14610750578063a923fc401461077c57610277565b80639554381a1161012f578063996f11ee11610114578063996f11ee146106c85780639cb7de4b146106f65780639dc29fac1461072457610277565b80639554381a1461069a57806395d89b41146106c057610277565b80636228907714610620578063704802751461064657806370a082311461066c578063817b1cd21461069257610277565b806327e235e3116101f357806346ea87af116101c257806355b6ed5c116101a757806355b6ed5c146105ad5780635a47a1a7146105db57806360217267146105fa57610277565b806346ea87af1461056a57806352cd38d91461059057610277565b806327e235e3146104d4578063313ce567146104fa57806340c10f1914610518578063429b62e51461054457610277565b80631785f53c1161024a5780631e83409a1161022f5780631e83409a146103d557806323b872dd146103fb578063276eab4e1461043157610277565b80631785f53c1461039557806318160ddd146103bb57610277565b806301e336671461027c57806306fdde03146102b4578063095ea7b31461033157806312d43a5114610371575b600080fd5b6102b26004803603606081101561029257600080fd5b506001600160a01b0381358116916020810135909116906040013561098f565b005b6102bc6109fe565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102f65781810151838201526020016102de565b50505050905090810190601f1680156103235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61035d6004803603604081101561034757600080fd5b506001600160a01b038135169060200135610a8c565b604080519115158252519081900360200190f35b610379610aa2565b604080516001600160a01b039092168252519081900360200190f35b6102b2600480360360208110156103ab57600080fd5b50356001600160a01b0316610ab1565b6103c3610b28565b60408051918252519081900360200190f35b6102b2600480360360208110156103eb57600080fd5b50356001600160a01b0316610b2e565b61035d6004803603606081101561041157600080fd5b506001600160a01b03813581169160208101359091169060400135610be5565b6102b26004803603602081101561044757600080fd5b81019060208101813564010000000081111561046257600080fd5b82018360208201111561047457600080fd5b8035906020019184602083028401116401000000008311171561049657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610c7f945050505050565b6103c3600480360360208110156104ea57600080fd5b50356001600160a01b0316610ce8565b610502610cfa565b6040805160ff9092168252519081900360200190f35b6102b26004803603604081101561052e57600080fd5b506001600160a01b038135169060200135610cff565b61035d6004803603602081101561055a57600080fd5b50356001600160a01b0316610d6d565b61035d6004803603602081101561058057600080fd5b50356001600160a01b0316610d82565b610379600480360360208110156105a657600080fd5b5035610d97565b6103c3600480360360408110156105c357600080fd5b506001600160a01b0381358116916020013516610dbe565b6102b2600480360360208110156105f157600080fd5b50351515610ddb565b6103c36004803603602081101561061057600080fd5b50356001600160a01b0316610e44565b6102b26004803603602081101561063657600080fd5b50356001600160a01b0316610e8d565b6102b26004803603602081101561065c57600080fd5b50356001600160a01b0316610f89565b6103c36004803603602081101561068257600080fd5b50356001600160a01b0316611003565b6103c361101e565b61035d600480360360208110156106b057600080fd5b50356001600160a01b031661103c565b6102bc611051565b6102b2600480360360408110156106de57600080fd5b506001600160a01b03813581169160200135166110ab565b6102b26004803603604081101561070c57600080fd5b506001600160a01b03813516906020013515156111bb565b6102b26004803603604081101561073a57600080fd5b506001600160a01b03813516906020013561123c565b61035d6004803603604081101561076657600080fd5b506001600160a01b0381351690602001356112aa565b6102b26004803603604081101561079257600080fd5b8101906020810181356401000000008111156107ad57600080fd5b8201836020820111156107bf57600080fd5b803590602001918460018302840111640100000000831117156107e157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561083457600080fd5b82018360208201111561084657600080fd5b8035906020019184600183028401116401000000008311171561086857600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506112b7945050505050565b61035d600480360360208110156108bf57600080fd5b50356001600160a01b0316611334565b6102bc611349565b6103c3611380565b6102b2600480360360408110156108f557600080fd5b506001600160a01b0381351690602001351515611386565b6102b26004803603602081101561092357600080fd5b50356001600160a01b0316611407565b6103c36004803603604081101561094957600080fd5b506001600160a01b038135811691602001351661148c565b61035d6114b7565b6102b26004803603602081101561097f57600080fd5b50356001600160a01b03166114c0565b6004546001600160a01b031633146109e5576040805162461bcd60e51b81526020600482015260146024820152732130b9b2aa37b5b2b71d103337b93134b23232b760611b604482015290519081900360640190fd5b6109f96001600160a01b0384168383611622565b505050565b6000805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610a845780601f10610a5957610100808354040283529160200191610a84565b820191906000526020600020905b815481529060010190602001808311610a6757829003601f168201915b505050505081565b6000610a993384846116a2565b50600192915050565b6004546001600160a01b031681565b6004546001600160a01b03163314610b07576040805162461bcd60e51b81526020600482015260146024820152732130b9b2aa37b5b2b71d103337b93134b23232b760611b604482015290519081900360640190fd5b6001600160a01b03166000908152600960205260409020805460ff19169055565b60025481565b60005b600754811015610be157600060078281548110610b4a57fe5b6000918252602080832090910154604080516310e059a160e11b81523360048201526001600160a01b038881166024830152915191909216945084936321c0b34293604480850194919392918390030190829087803b158015610bac57600080fd5b505af1158015610bc0573d6000803e3d6000fd5b505050506040513d6020811015610bd657600080fd5b505050600101610b31565b5050565b336000908152600b602052604081205460ff1615610c1057610c0884848461178e565b506001610c78565b6000610c5a836040518060600160405280602c81526020016121c0602c91396001600160a01b038816600090815260066020908152604080832033845290915290205491906119b6565b9050610c678533836116a2565b610c7285858561178e565b60019150505b9392505050565b6004546001600160a01b03163314610cd5576040805162461bcd60e51b81526020600482015260146024820152732130b9b2aa37b5b2b71d103337b93134b23232b760611b604482015290519081900360640190fd5b8051610be1906007906020840190611ffd565b60056020526000908152604090205481565b601281565b336000908152600c602052604090205460ff16610d63576040805162461bcd60e51b815260206004820152601c60248201527f4d696e7461626c6542617365546f6b656e3a20666f7262696464656e00000000604482015290519081900360640190fd5b610be18282611a4d565b60096020526000908152604090205460ff1681565b600b6020526000908152604090205460ff1681565b60078181548110610da457fe5b6000918252602090912001546001600160a01b0316905081565b600660209081526000928352604080842090915290825290205481565b6004546001600160a01b03163314610e31576040805162461bcd60e51b81526020600482015260146024820152732130b9b2aa37b5b2b71d103337b93134b23232b760611b604482015290519081900360640190fd5b600a805460ff1916911515919091179055565b6001600160a01b03811660009081526008602052604081205460ff1615610e6d57506000610e88565b506001600160a01b0381166000908152600560205260409020545b919050565b3360009081526009602052604090205460ff16610ee8576040805162461bcd60e51b81526020600482015260146024820152732130b9b2aa37b5b2b71d103337b93134b23232b760611b604482015290519081900360640190fd5b6001600160a01b03811660009081526008602052604090205460ff1615610f405760405162461bcd60e51b81526004018080602001828103825260228152602001806122646022913960400191505060405180910390fd5b610f4981611b51565b6001600160a01b0381166000908152600860209081526040808320805460ff191660011790556005909152902054600354610f83916115c8565b60035550565b6004546001600160a01b03163314610fdf576040805162461bcd60e51b81526020600482015260146024820152732130b9b2aa37b5b2b71d103337b93134b23232b760611b604482015290519081900360640190fd5b6001600160a01b03166000908152600960205260409020805460ff19166001179055565b6001600160a01b031660009081526005602052604090205490565b6000611037600354600254611c0090919063ffffffff16565b905090565b60086020526000908152604090205460ff1681565b60018054604080516020600284861615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610a845780601f10610a5957610100808354040283529160200191610a84565b3360009081526009602052604090205460ff16611106576040805162461bcd60e51b81526020600482015260146024820152732130b9b2aa37b5b2b71d103337b93134b23232b760611b604482015290519081900360640190fd5b60005b6007548110156109f95760006007828154811061112257fe5b6000918252602080832090910154604080516310e059a160e11b81526001600160a01b0389811660048301528881166024830152915191909216945084936321c0b34293604480850194919392918390030190829087803b15801561118657600080fd5b505af115801561119a573d6000803e3d6000fd5b505050506040513d60208110156111b057600080fd5b505050600101611109565b6004546001600160a01b03163314611211576040805162461bcd60e51b81526020600482015260146024820152732130b9b2aa37b5b2b71d103337b93134b23232b760611b604482015290519081900360640190fd5b6001600160a01b03919091166000908152600b60205260409020805460ff1916911515919091179055565b336000908152600c602052604090205460ff166112a0576040805162461bcd60e51b815260206004820152601c60248201527f4d696e7461626c6542617365546f6b656e3a20666f7262696464656e00000000604482015290519081900360640190fd5b610be18282611c42565b6000610a9933848461178e565b6004546001600160a01b0316331461130d576040805162461bcd60e51b81526020600482015260146024820152732130b9b2aa37b5b2b71d103337b93134b23232b760611b604482015290519081900360640190fd5b815161132090600090602085019061206f565b5080516109f990600190602084019061206f565b600c6020526000908152604090205460ff1681565b60408051808201909152600381527f4d4c500000000000000000000000000000000000000000000000000000000000602082015290565b60035481565b6004546001600160a01b031633146113dc576040805162461bcd60e51b81526020600482015260146024820152732130b9b2aa37b5b2b71d103337b93134b23232b760611b604482015290519081900360640190fd5b6001600160a01b03919091166000908152600c60205260409020805460ff1916911515919091179055565b6004546001600160a01b0316331461145d576040805162461bcd60e51b81526020600482015260146024820152732130b9b2aa37b5b2b71d103337b93134b23232b760611b604482015290519081900360640190fd5b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205490565b600a5460ff1681565b3360009081526009602052604090205460ff1661151b576040805162461bcd60e51b81526020600482015260146024820152732130b9b2aa37b5b2b71d103337b93134b23232b760611b604482015290519081900360640190fd5b6001600160a01b03811660009081526008602052604090205460ff16611588576040805162461bcd60e51b815260206004820152601e60248201527f42617365546f6b656e3a205f6163636f756e74206e6f74206d61726b65640000604482015290519081900360640190fd5b61159181611b51565b6001600160a01b0381166000908152600860209081526040808320805460ff191690556005909152902054600354610f8391611c00565b600082820183811015610c78576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526109f9908490611d6d565b6001600160a01b0383166116e75760405162461bcd60e51b81526004018080602001828103825260288152602001806122126028913960400191505060405180910390fd5b6001600160a01b03821661172c5760405162461bcd60e51b815260040180806020018281038252602681526020018061219a6026913960400191505060405180910390fd5b6001600160a01b03808416600081815260066020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166117d35760405162461bcd60e51b81526004018080602001828103825260298152602001806122fb6029913960400191505060405180910390fd5b6001600160a01b0382166118185760405162461bcd60e51b81526004018080602001828103825260278152602001806121506027913960400191505060405180910390fd5b600a5460ff161561187157336000908152600b602052604090205460ff166118715760405162461bcd60e51b815260040180806020018281038252602581526020018061212b6025913960400191505060405180910390fd5b61187a83611b51565b61188382611b51565b6118c0816040518060600160405280602a815260200161223a602a91396001600160a01b03861660009081526005602052604090205491906119b6565b6001600160a01b0380851660009081526005602052604080822093909355908416815220546118ef90826115c8565b6001600160a01b0380841660009081526005602090815260408083209490945591861681526008909152205460ff1615611934576003546119309082611c00565b6003555b6001600160a01b03821660009081526008602052604090205460ff16156119665760035461196290826115c8565b6003555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b60008184841115611a455760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611a0a5781810151838201526020016119f2565b50505050905090810190601f168015611a375780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b038216611a925760405162461bcd60e51b81526004018080602001828103825260238152602001806121776023913960400191505060405180910390fd5b611a9b82611b51565b600254611aa890826115c8565b6002556001600160a01b038216600090815260056020526040902054611ace90826115c8565b6001600160a01b03831660009081526005602090815260408083209390935560089052205460ff1615611b0c57600354611b0890826115c8565b6003555b6040805182815290516001600160a01b038416916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60005b600754811015610be157600060078281548110611b6d57fe5b6000918252602082200154604080517f5fd619650000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015291519190921693508392635fd61965926024808201939182900301818387803b158015611bdb57600080fd5b505af1158015611bef573d6000803e3d6000fd5b505060019093019250611b54915050565b6000610c7883836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506119b6565b6001600160a01b038216611c875760405162461bcd60e51b81526004018080602001828103825260258152602001806122d66025913960400191505060405180910390fd5b611c9082611b51565b611ccd81604051806060016040528060268152602001612286602691396001600160a01b03851660009081526005602052604090205491906119b6565b6001600160a01b038316600090815260056020526040902055600254611cf39082611c00565b6002556001600160a01b03821660009081526008602052604090205460ff1615611d2857600354611d249082611c00565b6003555b6040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6060611dc2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611e1e9092919063ffffffff16565b8051909150156109f957808060200190516020811015611de157600080fd5b50516109f95760405162461bcd60e51b815260040180806020018281038252602a8152602001806122ac602a913960400191505060405180910390fd5b6060611e2d8484600085611e35565b949350505050565b606082471015611e765760405162461bcd60e51b81526004018080602001828103825260268152602001806121ec6026913960400191505060405180910390fd5b611e7f85611f91565b611ed0576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611f0f5780518252601f199092019160209182019101611ef0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611f71576040519150601f19603f3d011682016040523d82523d6000602084013e611f76565b606091505b5091509150611f86828286611f97565b979650505050505050565b3b151590565b60608315611fa6575081610c78565b825115611fb65782518084602001fd5b60405162461bcd60e51b8152602060048201818152845160248401528451859391928392604401919085019080838360008315611a0a5781810151838201526020016119f2565b82805482825590600052602060002090810192821561205f579160200282015b8281111561205f578251825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390911617825560209092019160019091019061201d565b5061206b9291506120e9565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106120b057805160ff19168380011785556120dd565b828001600101855582156120dd579182015b828111156120dd5782518255916020019190600101906120c2565b5061206b929150612115565b5b8082111561206b57805473ffffffffffffffffffffffffffffffffffffffff191681556001016120ea565b5b8082111561206b576000815560010161211656fe42617365546f6b656e3a206d73672e73656e646572206e6f742077686974656c697374656442617365546f6b656e3a207472616e7366657220746f20746865207a65726f206164647265737342617365546f6b656e3a206d696e7420746f20746865207a65726f206164647265737342617365546f6b656e3a20617070726f766520746f20746865207a65726f206164647265737342617365546f6b656e3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c42617365546f6b656e3a20617070726f76652066726f6d20746865207a65726f206164647265737342617365546f6b656e3a207472616e7366657220616d6f756e7420657863656564732062616c616e636542617365546f6b656e3a205f6163636f756e7420616c7265616479206d61726b656442617365546f6b656e3a206275726e20616d6f756e7420657863656564732062616c616e63655361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656442617365546f6b656e3a206275726e2066726f6d20746865207a65726f206164647265737342617365546f6b656e3a207472616e736665722066726f6d20746865207a65726f2061646472657373a2646970667358221220bd030f4453d412bee4a5c07699d5868c0e5fa9ecd6d28575b6408756838c44f864736f6c634300060c003342617365546f6b656e3a206d696e7420746f20746865207a65726f2061646472657373",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21698,
        "contract": "contracts/gmx/MLP.sol:MLP",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 21700,
        "contract": "contracts/gmx/MLP.sol:MLP",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 21706,
        "contract": "contracts/gmx/MLP.sol:MLP",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 21708,
        "contract": "contracts/gmx/MLP.sol:MLP",
        "label": "nonStakingSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 21710,
        "contract": "contracts/gmx/MLP.sol:MLP",
        "label": "gov",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 21714,
        "contract": "contracts/gmx/MLP.sol:MLP",
        "label": "balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21720,
        "contract": "contracts/gmx/MLP.sol:MLP",
        "label": "allowances",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 21723,
        "contract": "contracts/gmx/MLP.sol:MLP",
        "label": "yieldTrackers",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 21727,
        "contract": "contracts/gmx/MLP.sol:MLP",
        "label": "nonStakingAccounts",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 21731,
        "contract": "contracts/gmx/MLP.sol:MLP",
        "label": "admins",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 21733,
        "contract": "contracts/gmx/MLP.sol:MLP",
        "label": "inPrivateTransferMode",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 21737,
        "contract": "contracts/gmx/MLP.sol:MLP",
        "label": "isHandler",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 22524,
        "contract": "contracts/gmx/MLP.sol:MLP",
        "label": "isMinter",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}