{
  "address": "0x165a116e1da7cf312085505475311d448Cd20890",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_averagePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nextPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nextSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_delta",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_realisedPnl",
          "type": "int256"
        }
      ],
      "name": "_getNextGlobalAveragePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "data",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nextPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isIncrease",
          "type": "bool"
        }
      ],
      "name": "getNextGlobalShortData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isIncrease",
          "type": "bool"
        }
      ],
      "name": "getRealisedPnl",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "globalShortAveragePrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGlobalShortDataReady",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isHandler",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_handler",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        }
      ],
      "name": "setHandler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_averagePrices",
          "type": "uint256[]"
        }
      ],
      "name": "setInitData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setIsGlobalShortDataReady",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_markPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isIncrease",
          "type": "bool"
        }
      ],
      "name": "updateGlobalShortData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd5eae1d5df597c72b8182e0a8a85a94ec9e4fe3968d3ce3582d1009c917ceaf2",
  "receipt": {
    "to": null,
    "from": "0x9B6B26Db5F9149F0e3f4DAF2Eb98307020236dDB",
    "contractAddress": "0x165a116e1da7cf312085505475311d448Cd20890",
    "transactionIndex": 3,
    "gasUsed": "1010783",
    "logsBloom": "0x
    "blockHash": "0x3767ec74bdce53b6707ce9929654cd1f907204164276b3c0ff75fa9593693b58",
    "transactionHash": "0xd5eae1d5df597c72b8182e0a8a85a94ec9e4fe3968d3ce3582d1009c917ceaf2",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 33420422,
        "transactionHash": "0xd5eae1d5df597c72b8182e0a8a85a94ec9e4fe3968d3ce3582d1009c917ceaf2",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009b6b26db5f9149f0e3f4daf2eb98307020236ddb",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000008fa41242667000000000000000000000000000000000000000000000000008b784a4bcba9681d0000000000000000000000000000000000000000000004561fa27b9e28562dc60000000000000000000000000000000000000000000000008b6f500aa783011d0000000000000000000000000000000000000000000004561fab75df4c7c94c6",
        "logIndex": 51,
        "blockHash": "0x3767ec74bdce53b6707ce9929654cd1f907204164276b3c0ff75fa9593693b58"
      }
    ],
    "blockNumber": 33420422,
    "cumulativeGasUsed": "2419197",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc54aa813eF930Aa3F3fc4C646e134a53D2d08277"
  ],
  "numDeployments": 1,
  "solcInputHash": "59bf562207d3b98a68d8cbf2ed09b4a8",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_delta\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_realisedPnl\",\"type\":\"int256\"}],\"name\":\"_getNextGlobalAveragePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"data\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nextPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isIncrease\",\"type\":\"bool\"}],\"name\":\"getNextGlobalShortData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isIncrease\",\"type\":\"bool\"}],\"name\":\"getRealisedPnl\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"globalShortAveragePrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGlobalShortDataReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_averagePrices\",\"type\":\"uint256[]\"}],\"name\":\"setInitData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsGlobalShortDataReady\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_markPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isIncrease\",\"type\":\"bool\"}],\"name\":\"updateGlobalShortData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/ShortsTracker.sol\":\"ShortsTracker\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ncontract Governable {\\n    address public gov;\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"Governable: forbidden\\\");\\n        _;\\n    }\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n}\\n\",\"keccak256\":\"0x369f345bc3ec6caba2e5abb12a3b4255da3c6b96374ffbd0b715e64e6508577f\",\"license\":\"MIT\"},\"contracts/core/ShortsTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"./settings/ShortsTrackerSettings.sol\\\";\\ncontract ShortsTracker is ShortsTrackerSettings {\\n    constructor(address _vault) public {\\n        vault = IVault(_vault);\\n    }\\n    function updateGlobalShortData(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta, uint256 _markPrice, bool _isIncrease) override external onlyHandler {\\n        if (_isLong || _sizeDelta == 0) {\\n            return;\\n        }\\n        if (!isGlobalShortDataReady) {\\n            return;\\n        }\\n        (uint256 globalShortSize, uint256 globalShortAveragePrice) = getNextGlobalShortData(_account, _collateralToken, _indexToken, _markPrice, _sizeDelta, _isIncrease);\\n        _setGlobalShortAveragePrice(_indexToken, globalShortAveragePrice);\\n        emit Events.GlobalShortDataUpdated(_indexToken, globalShortSize, globalShortAveragePrice);\\n    }\\n    function _setGlobalShortAveragePrice(address _token, uint256 _averagePrice) internal {\\n        globalShortAveragePrices[_token] = _averagePrice;\\n    }\\n    /* views */\\n    function getNextGlobalShortData(address _account, address _collateralToken, address _indexToken, uint256 _nextPrice, uint256 _sizeDelta, bool _isIncrease) override public view returns (uint256, uint256) {\\n        int256 realisedPnl = getRealisedPnl(_account,_collateralToken, _indexToken, _sizeDelta, _isIncrease);\\n        uint256 averagePrice = globalShortAveragePrices[_indexToken];\\n        uint256 priceDelta = averagePrice > _nextPrice ? averagePrice.sub(_nextPrice) : _nextPrice.sub(averagePrice);\\n        uint256 nextSize;\\n        uint256 delta;\\n        {\\n            uint256 size = vault.globalShortSizes(_indexToken);\\n            nextSize = _isIncrease ? size.add(_sizeDelta) : size.sub(_sizeDelta);\\n            if (nextSize == 0) {\\n                return (0, 0);\\n            }\\n            if (averagePrice == 0) {\\n                return (nextSize, _nextPrice);\\n            }\\n            delta = size.mul(priceDelta).div(averagePrice);\\n        }\\n        uint256 nextAveragePrice = _getNextGlobalAveragePrice(averagePrice, _nextPrice, nextSize, delta, realisedPnl);\\n        return (nextSize, nextAveragePrice);\\n    }\\n    function getRealisedPnl(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isIncrease) public view returns (int256) {\\n        if (_isIncrease) {\\n            return 0;\\n        }\\n        IVault _vault = vault;\\n        (uint256 size, , uint256 averagePrice, , , , , uint256 lastIncreasedTime) = _vault.getPosition(_account, _collateralToken, _indexToken, false);\\n        (bool hasProfit, uint256 delta) = _vault.getDelta(_indexToken, size, averagePrice, false, lastIncreasedTime);\\n        uint256 adjustedDelta = _sizeDelta.mul(delta).div(size);\\n        require(adjustedDelta < Constants.MAX_INT256, Errors.SHORTSTRACKER_OVERFLOW);\\n        return hasProfit ? int256(adjustedDelta) : -int256(adjustedDelta);\\n    }\\n    function _getNextGlobalAveragePrice(uint256 _averagePrice, uint256 _nextPrice, uint256 _nextSize, uint256 _delta, int256 _realisedPnl) public pure returns (uint256) {\\n        (bool hasProfit, uint256 nextDelta) = _getNextDelta(_delta, _averagePrice, _nextPrice, _realisedPnl);\\n        uint256 nextAveragePrice = _nextPrice\\n            .mul(_nextSize)\\n            .div(hasProfit ? _nextSize.sub(nextDelta) : _nextSize.add(nextDelta));\\n        return nextAveragePrice;\\n    }\\n    function _getNextDelta(uint256 _delta, uint256 _averagePrice, uint256 _nextPrice, int256 _realisedPnl) internal pure returns (bool, uint256) {\\n        bool hasProfit = _averagePrice > _nextPrice;\\n        if (hasProfit) {\\n            if (_realisedPnl > 0) {\\n                if (uint256(_realisedPnl) > _delta) {\\n                    _delta = uint256(_realisedPnl).sub(_delta);\\n                    hasProfit = false;\\n                } else {\\n                    _delta = _delta.sub(uint256(_realisedPnl));\\n                }\\n            } else {\\n                _delta = _delta.add(uint256(-_realisedPnl));\\n            }\\n            return (hasProfit, _delta);\\n        }\\n        if (_realisedPnl > 0) {\\n            _delta = _delta.add(uint256(_realisedPnl));\\n        } else {\\n            if (uint256(-_realisedPnl) > _delta) {\\n                _delta = uint256(-_realisedPnl).sub(_delta);\\n                hasProfit = true;\\n            } else {\\n                _delta = _delta.sub(uint256(-_realisedPnl));\\n            }\\n        }\\n        return (hasProfit, _delta);\\n    }\\n}\\n\",\"keccak256\":\"0x990ff018174a77847d9c6547a0db4df1a916d09acd5082510e313a2e883fd1d4\",\"license\":\"MIT\"},\"contracts/core/interfaces/IShortsTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IShortsTracker {\\n    function isGlobalShortDataReady() external view returns (bool);\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n    function getNextGlobalShortData(address _account, address _collateralToken, address _indexToken, uint256 _nextPrice, uint256 _sizeDelta, bool _isIncrease) external view returns (uint256, uint256);\\n    function updateGlobalShortData(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta, uint256 _markPrice, bool _isIncrease) external;\\n}\\n\",\"keccak256\":\"0x0c487479566bd78b1424f8d627c4815888d84fbc406251daab71b68e0d5ee2f0\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"./IVaultUtils.sol\\\";\\ninterface IVault {\\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\\n    function directPoolDeposit(address _token) external;\\n    function buyUSDM(address _token, address _receiver) external returns (uint256);\\n    function sellUSDM(address _token, address _receiver) external returns (uint256);\\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external returns (uint256);\\n    function increasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function liquidatePosition(address _account, address _collateralToken, address _indexToken, bool _isLong, address _feeReceiver) external;\\n\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\\n    function priceFeed() external view returns (address);\\n    function fundingRateFactor() external view returns (uint256);\\n    function stableFundingRateFactor() external view returns (uint256);\\n    function cumulativeFundingRates(address _token) external view returns (uint256);\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdmDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n    function liquidationFeeUsd() external view returns (uint256);\\n    function taxBasisPoints() external view returns (uint256);\\n    function stableTaxBasisPoints() external view returns (uint256);\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n    function swapFeeBasisPoints() external view returns (uint256);\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n    function marginFeeBasisPoints() external view returns (uint256);\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n    function whitelistedTokens(address _token) external view returns (bool);\\n    function stableTokens(address _token) external view returns (bool);\\n    function shortableTokens(address _token) external view returns (bool);\\n    function feeReserves(address _token) external view returns (uint256);\\n    function globalShortSizes(address _token) external view returns (uint256);\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\\n    function tokenDecimals(address _token) external view returns (uint256);\\n    function tokenWeights(address _token) external view returns (uint256);\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n    function poolAmounts(address _token) external view returns (uint256);\\n    function bufferAmounts(address _token) external view returns (uint256);\\n    function reservedAmounts(address _token) external view returns (uint256);\\n    function usdmAmounts(address _token) external view returns (uint256);\\n    function maxUsdmAmounts(address _token) external view returns (uint256);\\n    function getRedemptionAmount(address _token, uint256 _usdmAmount) external view returns (uint256);\\n    function getMaxPrice(address _token) external view returns (uint256);\\n    function getMinPrice(address _token) external view returns (uint256);\\n    function getDelta(address _indexToken, uint256 _size, uint256 _averagePrice, bool _isLong, uint256 _lastIncreasedTime) external view returns (bool, uint256);\\n    function getPosition(address _account, address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256);\\n    function isInitialized() external view returns (bool);\\n    function isSwapEnabled() external view returns (bool);\\n    function isLeverageEnabled() external view returns (bool);\\n    function router() external view returns (address);\\n    function usdm() external view returns (address);\\n    function gov() external view returns (address);\\n    function whitelistedTokenCount() external view returns (uint256);\\n    function maxLeverage() external view returns (uint256);\\n    function minProfitTime() external view returns (uint256);\\n    function hasDynamicFees() external view returns (bool);\\n    function fundingInterval() external view returns (uint256);\\n    function totalTokenWeights() external view returns (uint256);\\n    function getTargetUsdmAmount(address _token) external view returns (uint256);\\n    function inManagerMode() external view returns (bool);\\n    function inPrivateLiquidationMode() external view returns (bool);\\n    function maxGasPrice() external view returns (uint256);\\n    function approvedRouters(address _account, address _router) external view returns (bool);\\n    function isLiquidator(address _account) external view returns (bool);\\n    function isManager(address _account) external view returns (bool);\\n    function minProfitBasisPoints(address _token) external view returns (uint256);\\n    function tokenBalances(address _token) external view returns (uint256);\\n    function lastFundingTimes(address _token) external view returns (uint256);\\n\\n    function setMaxLeverage(uint256 _maxLeverage) external;\\n    function setInManagerMode(bool _inManagerMode) external;\\n    function setManager(address _manager, bool _isManager) external;\\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\\n    function setUsdmAmount(address _token, uint256 _amount) external;\\n    function setBufferAmount(address _token, uint256 _amount) external;\\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external;\\n    function setLiquidator(address _liquidator, bool _isActive) external;\\n    function setFundingRate(uint256 _fundingInterval, uint256 _fundingRateFactor, uint256 _stableFundingRateFactor) external;\\n    function setFees(uint256 _taxBasisPoints, uint256 _stableTaxBasisPoints, uint256 _mintBurnFeeBasisPoints, uint256 _swapFeeBasisPoints, uint256 _stableSwapFeeBasisPoints, uint256 _marginFeeBasisPoints, uint256 _liquidationFeeUsd, uint256 _minProfitTime, bool _hasDynamicFees) external;\\n    function setTokenConfig(address _token, uint256 _tokenDecimals, uint256 _redemptionBps, uint256 _minProfitBps, uint256 _maxUsdmAmount, bool _isStable, bool _isShortable) external;\\n    function setPriceFeed(address _priceFeed) external;\\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\\n    function setError(uint256 _errorCode, string calldata _error) external;\\n}\\n\",\"keccak256\":\"0x6865fea6348cbcd8eb8c91bbf6fe38d9c7128778ed80b97e6a407f55bf0fbe81\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IVaultUtils {\\n    function updateCumulativeFundingRate(address _collateralToken, address _indexToken) external returns (bool);\\n    function validateIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external view;\\n    function validateDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external view;\\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function getEntryFundingRate(address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256);\\n    function getPositionFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta) external view returns (uint256);\\n    function getFundingFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _size, uint256 _entryFundingRate) external view returns (uint256);\\n    function getBuyUsdmFeeBasisPoints(address _token, uint256 _usdmAmount) external view returns (uint256);\\n    function getSellUsdmFeeBasisPoints(address _token, uint256 _usdmAmount) external view returns (uint256);\\n    function getSwapFeeBasisPoints(address _tokenIn, address _tokenOut, uint256 _usdmAmount) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdmDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x938c049c684992effbeeb9aa3b069331224e0cfdf95e97d4aaf3d8fbd99b51b8\",\"license\":\"MIT\"},\"contracts/core/settings/ShortsTrackerSettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"../storage/ShortsTrackerStorage.sol\\\";\\nabstract contract ShortsTrackerSettings is ShortsTrackerStorage {\\n    /* settings */\\n    function setHandler(address _handler, bool _isActive) external onlyGov {\\n        require(_handler != address(0), Errors.SHORTSTRACKER_INVALID_HANDLER);\\n        isHandler[_handler] = _isActive;\\n    }\\n    function setIsGlobalShortDataReady(bool value) external onlyGov {\\n        isGlobalShortDataReady = value;\\n    }\\n    function setInitData(address[] calldata _tokens, uint256[] calldata _averagePrices) external onlyGov {\\n        require(!isGlobalShortDataReady, Errors.SHORTSTRACKER_ALREADY_MIGRATED);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            globalShortAveragePrices[_tokens[i]] = _averagePrices[i];\\n        }\\n        isGlobalShortDataReady = true;\\n    }\\n    /* comments */\\n    //    function getGlobalShortDelta(address _token) public view returns (bool, uint256) {\\n    //        uint256 size = vault.globalShortSizes(_token);\\n    //        uint256 averagePrice = globalShortAveragePrices[_token];\\n    //        if (size == 0) { return (false, 0); }\\n    //        uint256 nextPrice = IVault(vault).getMaxPrice(_token);\\n    //        uint256 priceDelta = averagePrice > nextPrice ? averagePrice.sub(nextPrice) : nextPrice.sub(averagePrice);\\n    //        uint256 delta = size.mul(priceDelta).div(averagePrice);\\n    //        bool hasProfit = averagePrice > nextPrice;\\n    //        return (hasProfit, delta);\\n    //    }\\n}\\n\",\"keccak256\":\"0x9f8f054e8514de6209e5e425de255e47956d6a42e5cc3c94c3d5b92bbb1b9bd4\",\"license\":\"MIT\"},\"contracts/core/storage/ShortsTrackerAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"../interfaces/IVault.sol\\\";\\nimport \\\"../interfaces/IShortsTracker.sol\\\";\\nimport \\\"../../access/Governable.sol\\\";\\nimport \\\"../../libraries/math/SafeMath.sol\\\";\\nimport \\\"../../libraries/Events.sol\\\";\\nimport \\\"../../libraries/Errors.sol\\\";\\nimport \\\"../../libraries/Constants.sol\\\";\\nabstract contract ShortsTrackerAggregator is IShortsTracker, Governable {\\n}\\n\",\"keccak256\":\"0x678c04afc769cdbd6f5d0ab853d6bddeaadd56a2d2e81e67ed78f4f9e6182cb1\",\"license\":\"MIT\"},\"contracts/core/storage/ShortsTrackerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"./ShortsTrackerAggregator.sol\\\";\\nabstract contract ShortsTrackerStorage is ShortsTrackerAggregator {\\n    /* constructor */\\n    IVault public vault;\\n    /* Settings */\\n    mapping (address => bool) public isHandler; /* handler address => bool */\\n    mapping (address => uint256) public override globalShortAveragePrices; /* tokenAddress => price*/\\n    bool public override isGlobalShortDataReady;\\n    /* misc */\\n    mapping (bytes32 => bytes32) public data;\\n    using SafeMath for uint256;\\n    modifier onlyHandler() {\\n        require(isHandler[msg.sender], Errors.SHORTSTRACKER_FORBIDDEN);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x1499837381b2cc7d40b2185846d06e4e4c2bfd553d6135529da18df5e1d37f03\",\"license\":\"MIT\"},\"contracts/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nlibrary Constants {\\n    string public constant USDM_TOKEN_NAME = \\\"USD Mold\\\";\\n    string public constant USDM_TOKEN_SYMBOL = \\\"USDM\\\";\\n    /* VaultPriceFeed.sol */\\n    uint256 public constant PRICE_PRECISION = 10 ** 30;\\n    uint256 public constant ONE_USD = PRICE_PRECISION;\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n    uint256 public constant MAX_SPREAD_BASIS_POINTS = 50;\\n    uint256 public constant MAX_ADJUSTMENT_INTERVAL = 2 hours;\\n    uint256 public constant MAX_ADJUSTMENT_BASIS_POINTS = 20;\\n    address constant internal FLAG_ARBITRUM_SEQ_OFFLINE = address(bytes20(bytes32(uint256(keccak256(\\\"chainlink.flags.arbitrum-seq-offline\\\")) - 1)));\\n    /* VaultUtils.sol */\\n    uint256 public constant FUNDING_RATE_PRECISION = 1000000;\\n\\n    /* Vault.sol*/\\n    uint256 public constant MIN_LEVERAGE = 10000; // 1x\\n    uint256 public constant USDM_DECIMALS = 18;\\n    uint256 public constant MAX_FEE_BASIS_POINTS = 500; // 5%\\n    uint256 public constant MAX_LIQUIDATION_FEE_USD = 100 * PRICE_PRECISION; // 100 USD\\n    uint256 public constant MIN_FUNDING_RATE_INTERVAL = 1 hours;\\n    uint256 public constant MAX_FUNDING_RATE_FACTOR = 10000; // 1%\\n\\n    /* OrderBook.sol */\\n    uint256 public constant USDM_PRECISION = 1e18;\\n\\n    /* MLP.sol */\\n    uint256 public constant MLP_PRECISION = 10 ** 18;\\n    uint256 public constant MAX_COOLDOWN_DURATION = 48 hours;\\n\\n    /* ShortsTracker */\\n    uint256 public constant MAX_INT256 = uint256(type(int256).max);\\n}\\n\",\"keccak256\":\"0x7b8317c87bc0c15a28f7278ac379ad9f81398acc1a7e22bf33bb9b286ec9c84b\",\"license\":\"MIT\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nlibrary Errors {\\n    /* Timelock Error Message*/\\n    string public constant Timelock_Invalid_Target = \\\"Timelock: invalid _target\\\";\\n    string public constant Timelock_Invalid_Buffer = \\\"Timelock: invalid _buffer\\\";\\n    string public constant Timelock_Buffer_Cannot_Be_Decreased = \\\"Timelock: buffer cannot be decreased\\\";\\n    string public constant Timelock_invalid_maxLeverage = \\\"Timelock: invalid _maxLeverage\\\";\\n    string public constant Timelock_invalid_fundingRateFactor = \\\"Timelock: invalid _fundingRateFactor\\\";\\n    string public constant Timelock_invalid_stableFundingRateFactor = \\\"Timelock: invalid _stableFundingRateFactor\\\";\\n    string public constant Timelock_invalid_minProfitBps = \\\"Timelock: invalid _minProfitBps\\\";\\n    string public constant Timelock_token_not_yet_whitelisted = \\\"Timelock: token not yet whitelisted\\\";\\n    string public constant TIMELOCK_INVALID_MAXGASPRICE = \\\"Invalid _maxGasPrice\\\";\\n    string public constant TIMELOCK_INVALID_LENGTHS = \\\"Timelock: invalid lengths\\\";\\n    string public constant TIMELOCK_MAXTOKENSUPPLY_EXCEEDED = \\\"Timelock: maxTokenSupply exceeded\\\";\\n    string public constant TIMELOCK_ACTION_ALREADY_SIGNALLED = \\\"Timelock: action already signalled\\\";\\n    string public constant TIMELOCK_ACTION_NOT_SIGNALLED = \\\"Timelock: action not signalled\\\";\\n    string public constant TIMELOCK_ACTION_TIME_NOT_YET_PASSED = \\\"Timelock: action time not yet passed\\\";\\n    string public constant TIMELOCK_INVALID_ACTION = \\\"Timelock: invalid _action\\\";\\n    string public constant TIMELOCK_INVALID_BUFFER = \\\"Timelock: invalid _buffer\\\";\\n\\n    /* PriceFeed Error Message*/\\n    string public constant PriceFeed_forbidden = \\\"PriceFeed: forbidden\\\";\\n\\n    /* USDM.sol*/\\n    string public constant USDM_FORBIDDEN = \\\"USDM: forbidden\\\";\\n\\n    /* BasePositionManagers.sol */\\n    string public constant BASEPOSITIONMANAGER_MARK_PRICE_LOWER_THAN_LIMIT      = \\\"BasePositionManager: mark price lower than limit\\\";\\n    string public constant BASEPOSITIONMANAGER_MARK_PRICE_HIGHER_THAN_LIMIT     = \\\"BasePositionManager: mark price higher than limit\\\";\\n    string public constant BASEPOSITIONMANAGER_INVALID_PATH_LENGTH              = \\\"BasePositionManager: invalid _path.length\\\";\\n    string public constant BASEPOSITIONMANAGER_INSUFFICIENT_AMOUNTOUT           = \\\"BasePositionManager: insufficient amountOut\\\";\\n    string public constant BASEPOSITIONMANAGER_MAX_GLOBAL_LONGS_EXCEEDED        = \\\"BasePositionManager: max global longs exceeded\\\";\\n    string public constant BASEPOSITIONMANAGER_MAX_GLOBAL_SHORTS_EXCEEDED       = \\\"BasePositionManager: max global shorts exceeded\\\";\\n    string public constant BASEPOSITIONMANAGER_INVALID_SENDER                   = \\\"BasePositionManager: invalid sender\\\";\\n\\n    /* PositionManager.sol */\\n    string public constant POSITIONMANAGER_INVALID_PATH_LENGTH                  = \\\"PositionManager: invalid _path.length\\\";\\n    string public constant POSITIONMANAGER_INVALID_PATH                         = \\\"PositionManager: invalid _path\\\";\\n    string public constant POSITIONMANAGER_LONG_DEPOSIT                         = \\\"PositionManager: long deposit\\\";\\n    string public constant POSITIONMANAGER_LONG_LEVERAGE_DECREASE               = \\\"PositionManager: long leverage decrease\\\";\\n    string public constant POSITIONMANAGER_FORBIDDEN                            = \\\"PositionManager: forbidden\\\";\\n\\n    /* Router.sol*/\\n    string public constant ROUTER_FORBIDDEN                                     = \\\"Router: forbidden\\\";\\n\\n    /* MlpManager.sol */\\n    string public constant MLPMANAGER_ACTION_NOT_ENABLED                        = \\\"MlpManager: action not enabled\\\";\\n    string public constant MLPMANAGER_INVALID_WEIGHT                            = \\\"MlpManager: invalid weight\\\";\\n    string public constant MLPMANAGER_INVALID_COOLDOWNDURATION                  = \\\"MlpManager: invalid _cooldownDuration\\\";\\n    string public constant MLPMANAGER_INVALID_AMOUNT                            = \\\"MlpManager: invalid _amount\\\";\\n    string public constant MLPMANAGER_INSUFFICIENT_USDM_OUTPUT                  = \\\"MlpManager: insufficient USDM output\\\";\\n    string public constant MLPMANAGER_INSUFFICIENT_MLP_OUTPUT                   = \\\"MlpManager: insufficient MLP output\\\";\\n    string public constant MLPMANAGER_INVALID_MLPAMOUNT                         = \\\"MlpManager: invalid _mlpAmount\\\";\\n    string public constant MLPMANAGER_COOLDOWN_DURATION_NOT_YET_PASSED          = \\\"MlpManager: cooldown duration not yet passed\\\";\\n    string public constant MLPMANAGER_INSUFFICIENT_OUTPUT                       = \\\"MlpManager: insufficient output\\\";\\n    string public constant MLPMANAGER_FORBIDDEN                                 = \\\"MlpManager: forbidden\\\";\\n\\n    /* ShortsTrack.sol*/\\n    string public constant SHORTSTRACKER_FORBIDDEN                              = \\\"ShortsTracker: forbidden\\\";\\n    string public constant SHORTSTRACKER_INVALID_HANDLER                        = \\\"ShortsTracker: invalid _handler\\\";\\n    string public constant SHORTSTRACKER_ALREADY_MIGRATED                       = \\\"ShortsTracker: already migrated\\\";\\n    string public constant SHORTSTRACKER_OVERFLOW                               = \\\"ShortsTracker: overflow\\\";\\n\\n    /* VaultUtils.sol*/\\n    string public constant VAULT_LOSSES_EXCEED_COLLATERAL                       = \\\"Vault: losses exceed collateral\\\";\\n    string public constant VAULT_FEES_EXCEED_COLLATERAL                         = \\\"Vault: fees exceed collateral\\\";\\n    string public constant VAULT_LIQUIDATION_FEES_EXCEED_COLLATERAL             = \\\"Vault: liquidation fees exceed collateral\\\";\\n    string public constant VAULT_MAXLEVERAGE_EXCEEDED                           = \\\"Vault: maxLeverage exceeded\\\";\\n\\n    /* VaultPriceFeed.sol*/\\n    string public constant VAULTPRICEFEED_FORBIDDEN                             = \\\"VaultPriceFeed: forbidden\\\";\\n    string public constant VAULTPRICEFEED_ADJUSTMENT_FREQUENCY_EXCEEDED         = \\\"VaultPriceFeed: adjustment frequency exceeded\\\";\\n    string public constant VAULTPRICEFEED_INVALID_ADJUSTMENTBPS                 = \\\"Vaultpricefeed: invalid _adjustmentBps\\\";\\n    string public constant VAULTPRICEFEED_INVALID_SPREADBASISPOINTS             = \\\"VaultPriceFeed: invalid _spreadBasisPoints\\\";\\n    string public constant VAULTPRICEFEED_INVALID_PRICESAMPLESPACE              = \\\"VaultPriceFeed: invalid _priceSampleSpace\\\";\\n    string internal constant VAULTPRICEFEED_INVALID_PRICE_FEED                  = \\\"VaultPriceFeed: invalid price feed\\\";\\n    string internal constant VAULTPRICEFEED_INVALID_PRICE                       = \\\"VaultPriceFeed: invalid price\\\";\\n    string internal constant CHAINLINK_FEEDS_ARE_NOT_BEING_UPDATED              = \\\"Chainlink feeds are not being updated\\\";\\n    string internal constant VAULTPRICEFEED_COULD_NOT_FETCH_PRICE               = \\\"VaultPriceFeed: could not fetch price\\\";\\n\\n    /* VaultInternal.sol*/\\n    string internal constant VAULT_POOLAMOUNT_EXCEEDED                          = \\\"Vault: poolAmount exceeded\\\";\\n    string internal constant VAULT_INSUFFICIENT_RESERVE                         = \\\"Vault: insufficient reserve\\\";\\n    string internal constant VAULT_MAX_SHORTS_EXCEEDED                          = \\\"Vault: max shorts exceeded\\\";\\n    string internal constant VAULT_POOLAMOUNT_BUFFER                            = \\\"Vault: poolAmount < buffer\\\";\\n    string internal constant VAULT_INVALID_ERRORCONTROLLER                      = \\\"Vault: invalid errorController\\\";\\n\\n    /* Router.sol */\\n    string internal constant ROUTER_INVALID_SENDER                              = \\\"Router: invalid sender\\\";\\n    string internal constant ROUTER_INVALID_PATH                                = \\\"Router: invalid _path\\\";\\n    string internal constant ROUTER_MARK_PRICE_HIGHER_THAN_LIMIT                = \\\"Router: mark price higher than limit\\\";\\n    string internal constant ROUTER_MARK_PRICE_LOWER_THAN_LIMIT                 = \\\"Router: mark price lower than limit\\\";\\n    string internal constant ROUTER_INVALID_PATH_LENGTH                         = \\\"Router: invalid _path.length\\\";\\n    string internal constant ROUTER_INSUFFICIENT_AMOUNTOUT                      = \\\"Router: insufficient amountOut\\\";\\n    string internal constant ROUTER_INVALID_PLUGIN                              = \\\"Router: invalid plugin\\\";\\n    string internal constant ROUTER_PLUGIN_NOT_APPROVED                         = \\\"Router: plugin not approved\\\";\\n\\n    /* OrderBook.sol*/\\n    string internal constant ORDERBOOK_FORBIDDEN                                = \\\"OrderBook: forbidden\\\";\\n    string internal constant ORDERBOOK_ALREADY_INITIALIZED                      = \\\"OrderBook: already initialized\\\";\\n    string internal constant ORDERBOOK_INVALID_SENDER                           = \\\"OrderBook: invalid sender\\\";\\n    string internal constant ORDERBOOK_INVALID_PATH_LENGTH                      = \\\"OrderBook: invalid _path.length\\\";\\n    string internal constant ORDERBOOK_INVALID_PATH                             = \\\"OrderBook: invalid _path\\\";\\n    string internal constant ORDERBOOK_INVALID_AMOUNTIN                         = \\\"OrderBook: invalid _amountIn\\\";\\n    string internal constant ORDERBOOK_INSUFFICIENT_EXECUTION_FEE               = \\\"OrderBook: insufficient execution fee\\\";\\n    string internal constant ORDERBOOK_ONLY_WETH_COULD_BE_WRAPPED               = \\\"OrderBook: only weth could be wrapped\\\";\\n    string internal constant ORDERBOOK_INCORRECT_VALUE_TRANSFERRED              = \\\"OrderBook: incorrect value transferred\\\";\\n    string internal constant ORDERBOOK_INCORRECT_EXECUTION_FEE_TRANSFERRED      = \\\"OrderBook: incorrect execution fee transferred\\\";\\n    string internal constant ORDERBOOK_NON_EXISTENT_ORDER                       = \\\"OrderBook: non-existent order\\\";\\n    string internal constant ORDERBOOK_INVALID_PRICE_FOR_EXECUTION              = \\\"OrderBook: invalid price for execution\\\";\\n    string internal constant ORDERBOOK_INSUFFICIENT_COLLATERAL                  = \\\"OrderBook: insufficient collateral\\\";\\n    string internal constant ORDERBOOK_INSUFFICIENT_AMOUNTOUT                   = \\\"OrderBook: insufficient amountOut\\\";\\n\\n    /* RewardRouterV2.sol */\\n    string internal constant REWARDROUTER_INVALID_AMOUNT                        = \\\"RewardRouter: invalid _amount\\\";\\n    string internal constant REWARDROUTER_INVALID_MSG_VALUE                     = \\\"RewardRouter: invalid msg.value\\\";\\n    string internal constant REWARDROUTER_ALREADY_INITIALIZED                   = \\\"RewardRouter: already initialized\\\";\\n    string internal constant REWARDROUTER_INVALID_MLPAMOUNT                     = \\\"RewardRouter: invalid _mlpAmount\\\";\\n    string internal constant REWARDROUTER_SENDER_HAS_VESTED_TOKENS              = \\\"RewardRouter: sender has vested tokens\\\";\\n    string internal constant REWARDROUTER_TRANSFER_NOT_SIGNALLED                = \\\"RewardRouter: transfer not signalled\\\";\\n    string internal constant REWARDROUTER_STAKEDMOLDTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0                      = \\\"RewardRouter: stakedMoldTracker.averageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_STAKEDMOLDTRACKER_CUMULATIVEREWARDS_GREATER_0                         = \\\"RewardRouter: stakedMoldTracker.cumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_BONUSMOLDTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0                       = \\\"RewardRouter: bonusMoldTracker.averageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_BONUSMOLDTRACKER_CUMULATIVEREWARDS_GREATER_0                          = \\\"RewardRouter: bonusMoldTracker.cumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_FEEMOLDTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0                         = \\\"RewardRouter: feeMoldTracker.averageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_FEEMOLDTRACKER_CUMULATIVEREWARDS_GREATER_0                            = \\\"RewardRouter: feeMoldTracker.cumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_MOLDVESTER_TRANSFERREDAVERAGESTAKEDAMOUNTS_GREATER_0                  = \\\"RewardRouter: MoldVester.transferredAverageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_MOLDVESTER_TRANSFERREDCUMULATIVEREWARDS_GREATER_0                     = \\\"RewardRouter: MoldVester.transferredCumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_STAKEDMLPTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0                       = \\\"RewardRouter: stakedMlpTracker.averageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_STAKEDMLPTRACKER_CUMULATIVEREWARDS_GREATER_0                          = \\\"RewardRouter: stakedMlpTracker.cumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_FEEMLPTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0                          = \\\"RewardRouter: feeMlpTracker.averageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_FEEMLPTRACKER_CUMULATIVEREWARDS_GREATER_0                             = \\\"RewardRouter: feeMlpTracker.cumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_MOLDVESTER_BALANCE_GREATER_0          = \\\"RewardRouter: MoldVester.balance > 0\\\";\\n    string internal constant REWARDROUTER_MLPVESTER_BALANCE_GREATER_0           = \\\"RewardRouter: MlpVester.balance > 0\\\";\\n\\n}\\n\",\"keccak256\":\"0x2d6c5a1032ea8a6b12bcb7fde4f03a3519d67086d21a2a9bf4ea541db73bdbc5\",\"license\":\"MIT\"},\"contracts/libraries/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nlibrary Events {\\n    /* BasePositionManager Events */\\n    event SetDepositFee(uint256 depositFee);\\n    event SetIncreasePositionBufferBps(uint256 increasePositionBufferBps);\\n    event SetReferralStorage(address referralStorage);\\n    event SetAdmin(address admin);\\n    event WithdrawFees(address token, address receiver, uint256 amount);\\n    event SetMaxGlobalSizes(address[] tokens, uint256[] longSizes, uint256[] shortSizes);\\n    event IncreasePositionReferral(address account, uint256 sizeDelta, uint256 marginFeeBasisPoints, bytes32 referralCode, address referrer);\\n    event DecreasePositionReferral(address account, uint256 sizeDelta, uint256 marginFeeBasisPoints, bytes32 referralCode, address referrer);\\n\\n    /*Position Manager Events*/\\n    event SetOrderKeeper(address indexed account, bool isActive);\\n    event SetLiquidator(address indexed account, bool isActive);\\n    event SetPartner(address account, bool isActive);\\n    event SetOpened(bool opened);\\n    event SetShouldValidateIncreaseOrder(bool shouldValidateIncreaseOrder);\\n\\n\\n    /* Orderbook.sol events */\\n    event CreateIncreaseOrder(address indexed account, uint256 orderIndex, address purchaseToken, uint256 purchaseTokenAmount, address collateralToken, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee);\\n    event CancelIncreaseOrder(address indexed account, uint256 orderIndex, address purchaseToken, uint256 purchaseTokenAmount, address collateralToken, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee);\\n    event ExecuteIncreaseOrder(address indexed account, uint256 orderIndex, address purchaseToken, uint256 purchaseTokenAmount, address collateralToken, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee, uint256 executionPrice);\\n    event UpdateIncreaseOrder(address indexed account, uint256 orderIndex, address collateralToken, address indexToken, bool isLong, uint256 sizeDelta, uint256 triggerPrice, bool triggerAboveThreshold);\\n    event CreateDecreaseOrder(address indexed account, uint256 orderIndex, address collateralToken, uint256 collateralDelta, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee);\\n    event CancelDecreaseOrder(address indexed account, uint256 orderIndex, address collateralToken, uint256 collateralDelta, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee);\\n    event ExecuteDecreaseOrder(address indexed account, uint256 orderIndex, address collateralToken, uint256 collateralDelta, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee, uint256 executionPrice);\\n    event UpdateDecreaseOrder(address indexed account, uint256 orderIndex, address collateralToken, uint256 collateralDelta, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold);\\n    event CreateSwapOrder(address indexed account, uint256 orderIndex, address[] path, uint256 amountIn, uint256 minOut, uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event CancelSwapOrder(address indexed account, uint256 orderIndex, address[] path, uint256 amountIn, uint256 minOut, uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event UpdateSwapOrder(address indexed account, uint256 ordexIndex, address[] path, uint256 amountIn, uint256 minOut, uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event ExecuteSwapOrder(address indexed account, uint256 orderIndex, address[] path, uint256 amountIn, uint256 minOut, uint256 amountOut, uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event Initialize(address router, address vault, address weth, address usdm, uint256 minExecutionFee, uint256 minPurchaseTokenAmountUsd);\\n    event UpdateMinExecutionFee(uint256 minExecutionFee);\\n    event UpdateMinPurchaseTokenAmountUsd(uint256 minPurchaseTokenAmountUsd);\\n    event UpdateGov(address gov);\\n\\n    /* Router.sol events*/\\n    event Swap(address account, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);\\n\\n    /* ShortsTracker.sol events*/\\n    event GlobalShortDataUpdated(address indexed token, uint256 globalShortSize, uint256 globalShortAveragePrice);\\n\\n    /* Vault.sol events */\\n    event BuyUSDM(address account, address token, uint256 tokenAmount, uint256 usdmAmount, uint256 feeBasisPoints);\\n    event SellUSDM(address account, address token, uint256 usdmAmount, uint256 tokenAmount, uint256 feeBasisPoints);\\n    event Swap(address account, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut, uint256 amountOutAfterFees, uint256 feeBasisPoints);\\n    event IncreasePosition(bytes32 key, address account, address collateralToken, address indexToken, uint256 collateralDelta, uint256 sizeDelta, bool isLong, uint256 price, uint256 fee);\\n    event DecreasePosition(bytes32 key, address account, address collateralToken, address indexToken, uint256 collateralDelta, uint256 sizeDelta, bool isLong, uint256 price, uint256 fee);\\n    event LiquidatePosition(bytes32 key, address account, address collateralToken, address indexToken, bool isLong, uint256 size, uint256 collateral, uint256 reserveAmount, int256 realisedPnl, uint256 markPrice);\\n    event UpdatePosition(bytes32 key, uint256 size, uint256 collateral, uint256 averagePrice, uint256 entryFundingRate, uint256 reserveAmount, int256 realisedPnl, uint256 markPrice);\\n    event ClosePosition(bytes32 key, uint256 size, uint256 collateral, uint256 averagePrice, uint256 entryFundingRate, uint256 reserveAmount, int256 realisedPnl);\\n    event UpdateFundingRate(address token, uint256 fundingRate);\\n    event UpdatePnl(bytes32 key, bool hasProfit, uint256 delta);\\n    event CollectSwapFees(address token, uint256 feeUsd, uint256 feeTokens);\\n    event CollectMarginFees(address token, uint256 feeUsd, uint256 feeTokens);\\n    event DirectPoolDeposit(address token, uint256 amount);\\n    event IncreasePoolAmount(address token, uint256 amount);\\n    event DecreasePoolAmount(address token, uint256 amount);\\n    event IncreaseUsdmAmount(address token, uint256 amount);\\n    event DecreaseUsdmAmount(address token, uint256 amount);\\n    event IncreaseReservedAmount(address token, uint256 amount);\\n    event DecreaseReservedAmount(address token, uint256 amount);\\n    event IncreaseGuaranteedUsd(address token, uint256 amount);\\n    event DecreaseGuaranteedUsd(address token, uint256 amount);\\n\\n    /* Timelock.sol events */\\n    event SignalPendingAction(bytes32 action);\\n    event SignalApprove(address token, address spender, uint256 amount, bytes32 action);\\n    event SignalWithdrawToken(address target, address token, address receiver, uint256 amount, bytes32 action);\\n    event SignalMint(address token, address receiver, uint256 amount, bytes32 action);\\n    event SignalSetGov(address target, address gov, bytes32 action);\\n    event SignalSetHandler(address target, address handler, bool isActive, bytes32 action);\\n    event SignalSetPriceFeed(address vault, address priceFeed, bytes32 action);\\n    event SignalRedeemUsdm(address vault, address token, uint256 amount);\\n    event SignalVaultSetTokenConfig(address vault, address token, uint256 tokenDecimals, uint256 tokenWeight, uint256 minProfitBps, uint256 maxUsdmAmount, bool isStable, bool isShortable);\\n    event ClearAction(bytes32 action);\\n\\n    /* MlpManager.sol */\\n    event AddLiquidity(address account, address token, uint256 amount, uint256 aumInUsdm, uint256 mlpSupply, uint256 usdmAmount, uint256 mintAmount);\\n    event RemoveLiquidity(address account, address token, uint256 mlpAmount, uint256 aumInUsdm, uint256 mlpSupply, uint256 usdmAmount, uint256 amountOut);\\n\\n    /* RewardRouterV2 */\\n    event StakeMold(address account, address token, uint256 amount);\\n    event UnstakeMold(address account, address token, uint256 amount);\\n    event StakeMlp(address account, uint256 amount);\\n    event UnstakeMlp(address account, uint256 amount);\\n}\\n\",\"keccak256\":\"0x555bd8706eac18f05cbc296299b1379465408d2040130886612e55bbddbb7179\",\"license\":\"MIT\"},\"contracts/libraries/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x41b0da7db3e1f79b338824fed2bc4732430b78002a9d51c2cfa86ad5a12c2763\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516110f73803806110f78339818101604052602081101561003357600080fd5b5051600080546001600160a01b03199081163317909155600180546001600160a01b0390931692909116919091179055611085806100726000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80639cb7de4b1161008c578063bbd9718711610066578063bbd97187146102d5578063cfad57a214610397578063f3238cec146103bd578063fbfa77cf1461040f576100ea565b80639cb7de4b146102005780639cdeb5931461022e578063a83b75fd14610291576100ea565b806346ea87af116100c857806346ea87af146101635780635886b7111461019d57806362749803146101d25780639a11178f146101f8576100ea565b80630147fb0c146100ef57806312d43a511461011e5780633d30cabf14610142575b600080fd5b61010c6004803603602081101561010557600080fd5b5035610417565b60408051918252519081900360200190f35b610126610429565b604080516001600160a01b039092168252519081900360200190f35b6101616004803603602081101561015857600080fd5b50351515610438565b005b6101896004803603602081101561017957600080fd5b50356001600160a01b03166104a2565b604080519115158252519081900360200190f35b61010c600480360360a08110156101b357600080fd5b50803590602081013590604081013590606081013590608001356104b7565b61010c600480360360208110156101e857600080fd5b50356001600160a01b031661050e565b610189610520565b6101616004803603604081101561021657600080fd5b506001600160a01b0381351690602001351515610529565b610278600480360360c081101561024457600080fd5b506001600160a01b03813581169160208101358216916040820135169060608101359060808101359060a001351515610672565b6040805192835260208301919091528051918290030190f35b61010c600480360360a08110156102a757600080fd5b506001600160a01b0381358116916020810135821691604082013516906060810135906080013515156107df565b610161600480360360408110156102eb57600080fd5b81019060208101813564010000000081111561030657600080fd5b82018360208201111561031857600080fd5b8035906020019184602083028401116401000000008311171561033a57600080fd5b91939092909160208101903564010000000081111561035857600080fd5b82018360208201111561036a57600080fd5b8035906020019184602083028401116401000000008311171561038c57600080fd5b509092509050610a42565b610161600480360360208110156103ad57600080fd5b50356001600160a01b0316610b8e565b610161600480360360e08110156103d357600080fd5b506001600160a01b038135811691602081013582169160408201351690606081013515159060808101359060a08101359060c001351515610c1f565b610126610d47565b60056020526000908152604090205481565b6000546001600160a01b031681565b6000546001600160a01b0316331461048f576040805162461bcd60e51b815260206004820152601560248201527423b7bb32b93730b136329d103337b93134b23232b760591b604482015290519081900360640190fd5b6004805460ff1916911515919091179055565b60026020526000908152604090205460ff1681565b60008060006104c885898987610d56565b9150915060006104ff836104e5576104e08884610e13565b6104ef565b6104ef8884610e76565b6104f98a8a610eb8565b90610f11565b93505050505b95945050505050565b60036020526000908152604090205481565b60045460ff1681565b6000546001600160a01b03163314610580576040805162461bcd60e51b815260206004820152601560248201527423b7bb32b93730b136329d103337b93134b23232b760591b604482015290519081900360640190fd5b60408051808201909152601f81527f53686f727473547261636b65723a20696e76616c6964205f68616e646c65720060208201526001600160a01b0383166106465760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561060b5781810151838201526020016105f3565b50505050905090810190601f1680156106385780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506001600160a01b03919091166000908152600260205260409020805460ff1916911515919091179055565b600080600061068489898988886107df565b6001600160a01b0388166000908152600360205260408120549192508782116106b6576106b18883610e76565b6106c0565b6106c08289610e76565b600154604080517f8a78daa80000000000000000000000000000000000000000000000000000000081526001600160a01b038d811660048301529151939450600093849384931691638a78daa8916024808301926020929190829003018186803b15801561072d57600080fd5b505afa158015610741573d6000803e3d6000fd5b505050506040513d602081101561075757600080fd5b505190508861076f5761076a818b610e76565b610779565b610779818b610e13565b92508261079257600080975097505050505050506107d4565b846107a857828b975097505050505050506107d4565b6107b6856104f98387610eb8565b91505060006107c8858c85858a6104b7565b92975091955050505050505b965096945050505050565b600081156107ef57506000610505565b600154604080517f4a3f088d0000000000000000000000000000000000000000000000000000000081526001600160a01b038981166004830152888116602483015287811660448301526000606483018190529251931692829182918591634a3f088d91608480830192610100929190829003018186803b15801561087357600080fd5b505afa158015610887573d6000803e3d6000fd5b505050506040513d61010081101561089e57600080fd5b50805160408083015160e09093015181517f5c07eaab0000000000000000000000000000000000000000000000000000000081526001600160a01b038d811660048301526024820185905260448201869052600060648301819052608483018490528451959950959750919550849391891692635c07eaab9260a480840193829003018186803b15801561093157600080fd5b505afa158015610945573d6000803e3d6000fd5b505050506040513d604081101561095b57600080fd5b50805160209091015190925090506000610979866104f98c85610eb8565b90507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81106040518060400160405280601781526020017f53686f727473547261636b65723a206f766572666c6f7700000000000000000081525090610a205760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561060b5781810151838201526020016105f3565b5082610a2f5780600003610a31565b805b9d9c50505050505050505050505050565b6000546001600160a01b03163314610a99576040805162461bcd60e51b815260206004820152601560248201527423b7bb32b93730b136329d103337b93134b23232b760591b604482015290519081900360640190fd5b60045460408051808201909152601f81527f53686f727473547261636b65723a20616c7265616479206d696772617465640060208201529060ff1615610b205760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561060b5781810151838201526020016105f3565b5060005b83811015610b7a57828282818110610b3857fe5b9050602002013560036000878785818110610b4f57fe5b602090810292909201356001600160a01b031683525081019190915260400160002055600101610b24565b50506004805460ff19166001179055505050565b6000546001600160a01b03163314610be5576040805162461bcd60e51b815260206004820152601560248201527423b7bb32b93730b136329d103337b93134b23232b760591b604482015290519081900360640190fd5b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b33600090815260026020908152604091829020548251808401909352601883527f53686f727473547261636b65723a20666f7262696464656e00000000000000009183019190915260ff16610cb55760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561060b5781810151838201526020016105f3565b508380610cc0575082155b15610cca57610d3e565b60045460ff16610cd957610d3e565b600080610cea898989878988610672565b91509150610cf88782610f53565b604080518381526020810183905281516001600160a01b038a16927fd6137be44db128ffcf1ea1821dbe8f889f67f949be7656c2d8acba2a4a891a02928290030190a250505b50505050505050565b6001546001600160a01b031681565b6000808385118015610db5576000841315610d9a5786841115610d8857610d7d8488610e76565b965060009050610d95565b610d928785610e76565b96505b610dab565b610da8876000869003610e13565b96505b9150859050610e0a565b6000841315610dcf57610dc88785610e13565b9650610e04565b86846000031115610df357610de8600085900388610e76565b965060019050610e04565b610e01876000869003610e76565b96505b91508590505b94509492505050565b600082820183811015610e6d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6000610e6d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610f6f565b600082610ec757506000610e70565b82820282848281610ed457fe5b0414610e6d5760405162461bcd60e51b815260040180806020018281038252602181526020018061102f6021913960400191505060405180910390fd5b6000610e6d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610fc9565b6001600160a01b03909116600090815260036020526040902055565b60008184841115610fc15760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561060b5781810151838201526020016105f3565b505050900390565b600081836110185760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561060b5781810151838201526020016105f3565b50600083858161102457fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212208537927d23928e6bddcc3fc806435f14d9b4be0fcdc6d39686243d781562a5a064736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80639cb7de4b1161008c578063bbd9718711610066578063bbd97187146102d5578063cfad57a214610397578063f3238cec146103bd578063fbfa77cf1461040f576100ea565b80639cb7de4b146102005780639cdeb5931461022e578063a83b75fd14610291576100ea565b806346ea87af116100c857806346ea87af146101635780635886b7111461019d57806362749803146101d25780639a11178f146101f8576100ea565b80630147fb0c146100ef57806312d43a511461011e5780633d30cabf14610142575b600080fd5b61010c6004803603602081101561010557600080fd5b5035610417565b60408051918252519081900360200190f35b610126610429565b604080516001600160a01b039092168252519081900360200190f35b6101616004803603602081101561015857600080fd5b50351515610438565b005b6101896004803603602081101561017957600080fd5b50356001600160a01b03166104a2565b604080519115158252519081900360200190f35b61010c600480360360a08110156101b357600080fd5b50803590602081013590604081013590606081013590608001356104b7565b61010c600480360360208110156101e857600080fd5b50356001600160a01b031661050e565b610189610520565b6101616004803603604081101561021657600080fd5b506001600160a01b0381351690602001351515610529565b610278600480360360c081101561024457600080fd5b506001600160a01b03813581169160208101358216916040820135169060608101359060808101359060a001351515610672565b6040805192835260208301919091528051918290030190f35b61010c600480360360a08110156102a757600080fd5b506001600160a01b0381358116916020810135821691604082013516906060810135906080013515156107df565b610161600480360360408110156102eb57600080fd5b81019060208101813564010000000081111561030657600080fd5b82018360208201111561031857600080fd5b8035906020019184602083028401116401000000008311171561033a57600080fd5b91939092909160208101903564010000000081111561035857600080fd5b82018360208201111561036a57600080fd5b8035906020019184602083028401116401000000008311171561038c57600080fd5b509092509050610a42565b610161600480360360208110156103ad57600080fd5b50356001600160a01b0316610b8e565b610161600480360360e08110156103d357600080fd5b506001600160a01b038135811691602081013582169160408201351690606081013515159060808101359060a08101359060c001351515610c1f565b610126610d47565b60056020526000908152604090205481565b6000546001600160a01b031681565b6000546001600160a01b0316331461048f576040805162461bcd60e51b815260206004820152601560248201527423b7bb32b93730b136329d103337b93134b23232b760591b604482015290519081900360640190fd5b6004805460ff1916911515919091179055565b60026020526000908152604090205460ff1681565b60008060006104c885898987610d56565b9150915060006104ff836104e5576104e08884610e13565b6104ef565b6104ef8884610e76565b6104f98a8a610eb8565b90610f11565b93505050505b95945050505050565b60036020526000908152604090205481565b60045460ff1681565b6000546001600160a01b03163314610580576040805162461bcd60e51b815260206004820152601560248201527423b7bb32b93730b136329d103337b93134b23232b760591b604482015290519081900360640190fd5b60408051808201909152601f81527f53686f727473547261636b65723a20696e76616c6964205f68616e646c65720060208201526001600160a01b0383166106465760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561060b5781810151838201526020016105f3565b50505050905090810190601f1680156106385780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506001600160a01b03919091166000908152600260205260409020805460ff1916911515919091179055565b600080600061068489898988886107df565b6001600160a01b0388166000908152600360205260408120549192508782116106b6576106b18883610e76565b6106c0565b6106c08289610e76565b600154604080517f8a78daa80000000000000000000000000000000000000000000000000000000081526001600160a01b038d811660048301529151939450600093849384931691638a78daa8916024808301926020929190829003018186803b15801561072d57600080fd5b505afa158015610741573d6000803e3d6000fd5b505050506040513d602081101561075757600080fd5b505190508861076f5761076a818b610e76565b610779565b610779818b610e13565b92508261079257600080975097505050505050506107d4565b846107a857828b975097505050505050506107d4565b6107b6856104f98387610eb8565b91505060006107c8858c85858a6104b7565b92975091955050505050505b965096945050505050565b600081156107ef57506000610505565b600154604080517f4a3f088d0000000000000000000000000000000000000000000000000000000081526001600160a01b038981166004830152888116602483015287811660448301526000606483018190529251931692829182918591634a3f088d91608480830192610100929190829003018186803b15801561087357600080fd5b505afa158015610887573d6000803e3d6000fd5b505050506040513d61010081101561089e57600080fd5b50805160408083015160e09093015181517f5c07eaab0000000000000000000000000000000000000000000000000000000081526001600160a01b038d811660048301526024820185905260448201869052600060648301819052608483018490528451959950959750919550849391891692635c07eaab9260a480840193829003018186803b15801561093157600080fd5b505afa158015610945573d6000803e3d6000fd5b505050506040513d604081101561095b57600080fd5b50805160209091015190925090506000610979866104f98c85610eb8565b90507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81106040518060400160405280601781526020017f53686f727473547261636b65723a206f766572666c6f7700000000000000000081525090610a205760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561060b5781810151838201526020016105f3565b5082610a2f5780600003610a31565b805b9d9c50505050505050505050505050565b6000546001600160a01b03163314610a99576040805162461bcd60e51b815260206004820152601560248201527423b7bb32b93730b136329d103337b93134b23232b760591b604482015290519081900360640190fd5b60045460408051808201909152601f81527f53686f727473547261636b65723a20616c7265616479206d696772617465640060208201529060ff1615610b205760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561060b5781810151838201526020016105f3565b5060005b83811015610b7a57828282818110610b3857fe5b9050602002013560036000878785818110610b4f57fe5b602090810292909201356001600160a01b031683525081019190915260400160002055600101610b24565b50506004805460ff19166001179055505050565b6000546001600160a01b03163314610be5576040805162461bcd60e51b815260206004820152601560248201527423b7bb32b93730b136329d103337b93134b23232b760591b604482015290519081900360640190fd5b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b33600090815260026020908152604091829020548251808401909352601883527f53686f727473547261636b65723a20666f7262696464656e00000000000000009183019190915260ff16610cb55760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561060b5781810151838201526020016105f3565b508380610cc0575082155b15610cca57610d3e565b60045460ff16610cd957610d3e565b600080610cea898989878988610672565b91509150610cf88782610f53565b604080518381526020810183905281516001600160a01b038a16927fd6137be44db128ffcf1ea1821dbe8f889f67f949be7656c2d8acba2a4a891a02928290030190a250505b50505050505050565b6001546001600160a01b031681565b6000808385118015610db5576000841315610d9a5786841115610d8857610d7d8488610e76565b965060009050610d95565b610d928785610e76565b96505b610dab565b610da8876000869003610e13565b96505b9150859050610e0a565b6000841315610dcf57610dc88785610e13565b9650610e04565b86846000031115610df357610de8600085900388610e76565b965060019050610e04565b610e01876000869003610e76565b96505b91508590505b94509492505050565b600082820183811015610e6d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6000610e6d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610f6f565b600082610ec757506000610e70565b82820282848281610ed457fe5b0414610e6d5760405162461bcd60e51b815260040180806020018281038252602181526020018061102f6021913960400191505060405180910390fd5b6000610e6d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610fc9565b6001600160a01b03909116600090815260036020526040902055565b60008184841115610fc15760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561060b5781810151838201526020016105f3565b505050900390565b600081836110185760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561060b5781810151838201526020016105f3565b50600083858161102457fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212208537927d23928e6bddcc3fc806435f14d9b4be0fcdc6d39686243d781562a5a064736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3,
        "contract": "contracts/core/ShortsTracker.sol:ShortsTracker",
        "label": "gov",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12435,
        "contract": "contracts/core/ShortsTracker.sol:ShortsTracker",
        "label": "vault",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IVault)7173"
      },
      {
        "astId": 12439,
        "contract": "contracts/core/ShortsTracker.sol:ShortsTracker",
        "label": "isHandler",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12444,
        "contract": "contracts/core/ShortsTracker.sol:ShortsTracker",
        "label": "globalShortAveragePrices",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12447,
        "contract": "contracts/core/ShortsTracker.sol:ShortsTracker",
        "label": "isGlobalShortDataReady",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 12451,
        "contract": "contracts/core/ShortsTracker.sol:ShortsTracker",
        "label": "data",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IVault)7173": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}