{
  "address": "0xc54aa813eF930Aa3F3fc4C646e134a53D2d08277",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "addRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenDiv",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenMul",
          "type": "address"
        }
      ],
      "name": "adjustForDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allWhitelistedTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allWhitelistedTokensLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedRouters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bufferAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "buyUSDM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "clearTokenConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cumulativeFundingRates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "decreasePosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "directPoolDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "errorController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "errors",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "feeReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingRateFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_averagePrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_lastIncreasedTime",
          "type": "uint256"
        }
      ],
      "name": "getDelta",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        }
      ],
      "name": "getEntryFundingRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_usdmDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feeBasisPoints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_taxBasisPoints",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_increment",
          "type": "bool"
        }
      ],
      "name": "getFeeBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_entryFundingRate",
          "type": "uint256"
        }
      ],
      "name": "getFundingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getMaxPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getMinPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_averagePrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_nextPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastIncreasedTime",
          "type": "uint256"
        }
      ],
      "name": "getNextAveragePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getNextFundingRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nextPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        }
      ],
      "name": "getNextGlobalShortAveragePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        }
      ],
      "name": "getPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        }
      ],
      "name": "getPositionFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        }
      ],
      "name": "getPositionKey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_usdmAmount",
          "type": "uint256"
        }
      ],
      "name": "getRedemptionAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getTargetUsdmAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "globalShortAveragePrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "globalShortSizes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "guaranteedUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasDynamicFees",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inManagerMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inPrivateLiquidationMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "includeAmmPrice",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        }
      ],
      "name": "increasePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdm",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationFeeUsd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fundingRateFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stableFundingRateFactor",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLeverageEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isLiquidator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSwapEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastFundingTimes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_feeReceiver",
          "type": "address"
        }
      ],
      "name": "liquidatePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationFeeUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marginFeeBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxGasPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxGlobalShortSizes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLeverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxUsdmAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minProfitBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minProfitTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintBurnFeeBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "positions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "averagePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entryFundingRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveAmount",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "realisedPnl",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "lastIncreasedTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "removeRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "reservedAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "sellUSDM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setBufferAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_errorCode",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_error",
          "type": "string"
        }
      ],
      "name": "setError",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_errorController",
          "type": "address"
        }
      ],
      "name": "setErrorController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taxBasisPoints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stableTaxBasisPoints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mintBurnFeeBasisPoints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_swapFeeBasisPoints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stableSwapFeeBasisPoints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_marginFeeBasisPoints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationFeeUsd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minProfitTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_hasDynamicFees",
          "type": "bool"
        }
      ],
      "name": "setFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fundingInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fundingRateFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stableFundingRateFactor",
          "type": "uint256"
        }
      ],
      "name": "setFundingRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_inManagerMode",
          "type": "bool"
        }
      ],
      "name": "setInManagerMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_inPrivateLiquidationMode",
          "type": "bool"
        }
      ],
      "name": "setInPrivateLiquidationMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isLeverageEnabled",
          "type": "bool"
        }
      ],
      "name": "setIsLeverageEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isSwapEnabled",
          "type": "bool"
        }
      ],
      "name": "setIsSwapEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        }
      ],
      "name": "setLiquidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isManager",
          "type": "bool"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxGasPrice",
          "type": "uint256"
        }
      ],
      "name": "setMaxGasPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setMaxGlobalShortSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxLeverage",
          "type": "uint256"
        }
      ],
      "name": "setMaxLeverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "name": "setPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenDecimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minProfitBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxUsdmAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isStable",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_isShortable",
          "type": "bool"
        }
      ],
      "name": "setTokenConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setUsdmAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVaultUtils",
          "name": "_vaultUtils",
          "type": "address"
        }
      ],
      "name": "setVaultUtils",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "shortableTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableFundingRateFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableSwapFeeBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableTaxBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stableTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapFeeBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taxBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "tokenToUsdMin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenWeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTokenWeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        }
      ],
      "name": "updateCumulativeFundingRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "upgradeVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_usdAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "usdToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_usdAmount",
          "type": "uint256"
        }
      ],
      "name": "usdToTokenMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_usdAmount",
          "type": "uint256"
        }
      ],
      "name": "usdToTokenMin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdm",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "usdmAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useSwapPricing",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_raise",
          "type": "bool"
        }
      ],
      "name": "validateLiquidation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultUtils",
      "outputs": [
        {
          "internalType": "contract IVaultUtils",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistedTokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "withdrawFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1e1d11044c1b5517be552b943ada0aec4f28855260e7ae92b54bdb27f54e1f63",
  "receipt": {
    "to": null,
    "from": "0x9B6B26Db5F9149F0e3f4DAF2Eb98307020236dDB",
    "contractAddress": "0xc54aa813eF930Aa3F3fc4C646e134a53D2d08277",
    "transactionIndex": 7,
    "gasUsed": "5554641",
    "logsBloom": "0x
    "blockHash": "0xf2842bf69d8518dd5c695c12e55eb07887f60158de2f5d6cabed89bbe2f105d1",
    "transactionHash": "0x1e1d11044c1b5517be552b943ada0aec4f28855260e7ae92b54bdb27f54e1f63",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 33420366,
        "transactionHash": "0x1e1d11044c1b5517be552b943ada0aec4f28855260e7ae92b54bdb27f54e1f63",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009b6b26db5f9149f0e3f4daf2eb98307020236ddb",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001d99dff57d5f000000000000000000000000000000000000000000000000008c231cc8d3a10da50000000000000000000000000000000000000000000004561a3d476305d346ce0000000000000000000000000000000000000000000000008c0582e8de23aea50000000000000000000000000000000000000000000004561a5ae142fb50a5ce",
        "logIndex": 33,
        "blockHash": "0xf2842bf69d8518dd5c695c12e55eb07887f60158de2f5d6cabed89bbe2f105d1"
      }
    ],
    "blockNumber": 33420366,
    "cumulativeGasUsed": "6495340",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "59bf562207d3b98a68d8cbf2ed09b4a8",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"addRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenDiv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenMul\",\"type\":\"address\"}],\"name\":\"adjustForDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allWhitelistedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allWhitelistedTokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedRouters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bufferAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"buyUSDM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"clearTokenConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cumulativeFundingRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"decreasePosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"directPoolDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"errorController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"errors\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingRateFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_lastIncreasedTime\",\"type\":\"uint256\"}],\"name\":\"getDelta\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"getEntryFundingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdmDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_taxBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_increment\",\"type\":\"bool\"}],\"name\":\"getFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_entryFundingRate\",\"type\":\"uint256\"}],\"name\":\"getFundingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getMaxPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getMinPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_nextPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastIncreasedTime\",\"type\":\"uint256\"}],\"name\":\"getNextAveragePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getNextFundingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nextPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"}],\"name\":\"getNextGlobalShortAveragePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"}],\"name\":\"getPositionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"getPositionKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdmAmount\",\"type\":\"uint256\"}],\"name\":\"getRedemptionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTargetUsdmAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"globalShortAveragePrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"globalShortSizes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"guaranteedUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasDynamicFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inManagerMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inPrivateLiquidationMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"includeAmmPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"increasePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationFeeUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingRateFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableFundingRateFactor\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLeverageEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastFundingTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"liquidatePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationFeeUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marginFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxGlobalShortSizes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLeverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxUsdmAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minProfitBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minProfitTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintBurnFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryFundingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveAmount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lastIncreasedTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"removeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reservedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"sellUSDM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setBufferAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_errorCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_error\",\"type\":\"string\"}],\"name\":\"setError\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_errorController\",\"type\":\"address\"}],\"name\":\"setErrorController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableTaxBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintBurnFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableSwapFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marginFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationFeeUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minProfitTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_hasDynamicFees\",\"type\":\"bool\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundingInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingRateFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableFundingRateFactor\",\"type\":\"uint256\"}],\"name\":\"setFundingRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_inManagerMode\",\"type\":\"bool\"}],\"name\":\"setInManagerMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_inPrivateLiquidationMode\",\"type\":\"bool\"}],\"name\":\"setInPrivateLiquidationMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isLeverageEnabled\",\"type\":\"bool\"}],\"name\":\"setIsLeverageEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isSwapEnabled\",\"type\":\"bool\"}],\"name\":\"setIsSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setLiquidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isManager\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxGasPrice\",\"type\":\"uint256\"}],\"name\":\"setMaxGasPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxGlobalShortSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxLeverage\",\"type\":\"uint256\"}],\"name\":\"setMaxLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minProfitBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxUsdmAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isStable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isShortable\",\"type\":\"bool\"}],\"name\":\"setTokenConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setUsdmAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVaultUtils\",\"name\":\"_vaultUtils\",\"type\":\"address\"}],\"name\":\"setVaultUtils\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shortableTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableFundingRateFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableSwapFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableTaxBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stableTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"tokenToUsdMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"}],\"name\":\"updateCumulativeFundingRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"upgradeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"usdToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdAmount\",\"type\":\"uint256\"}],\"name\":\"usdToTokenMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdAmount\",\"type\":\"uint256\"}],\"name\":\"usdToTokenMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usdmAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useSwapPricing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_raise\",\"type\":\"bool\"}],\"name\":\"validateLiquidation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultUtils\",\"outputs\":[{\"internalType\":\"contract IVaultUtils\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistedTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/Vault.sol\":\"Vault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/core/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\nimport \\\"./settings/VaultInternal.sol\\\";\\ncontract Vault is VaultInternal {\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n    function initialize(address _router, address _usdm, address _priceFeed, uint256 _liquidationFeeUsd, uint256 _fundingRateFactor, uint256 _stableFundingRateFactor) external {\\n        _onlyGov();\\n        _validate(!isInitialized, 1);\\n        isInitialized = true;\\n        router = _router;\\n        usdm = _usdm;\\n        priceFeed = _priceFeed;\\n        liquidationFeeUsd = _liquidationFeeUsd;\\n        fundingRateFactor = _fundingRateFactor;\\n        stableFundingRateFactor = _stableFundingRateFactor;\\n    }\\n    function clearTokenConfig(address _token) external {\\n        _onlyGov();\\n        _validate(whitelistedTokens[_token], 13);\\n        totalTokenWeights = totalTokenWeights.sub(tokenWeights[_token]);\\n        delete whitelistedTokens[_token];\\n        delete tokenDecimals[_token];\\n        delete tokenWeights[_token];\\n        delete minProfitBasisPoints[_token];\\n        delete maxUsdmAmounts[_token];\\n        delete stableTokens[_token];\\n        delete shortableTokens[_token];\\n        whitelistedTokenCount = whitelistedTokenCount.sub(1);\\n    }\\n    function withdrawFees(address _token, address _receiver) external override returns (uint256) {\\n        _onlyGov();\\n        uint256 amount = feeReserves[_token];\\n        if (amount == 0) {return 0;}\\n        feeReserves[_token] = 0;\\n        _transferOut(_token, amount, _receiver);\\n        return amount;\\n    }\\n\\n    function directPoolDeposit(address _token) external override nonReentrant {\\n        _validate(whitelistedTokens[_token], 14);\\n        uint256 tokenAmount = _transferIn(_token);\\n        _validate(tokenAmount > 0, 15);\\n        _increasePoolAmount(_token, tokenAmount);\\n        emit Events.DirectPoolDeposit(_token, tokenAmount);\\n    }\\n    function buyUSDM(address _token, address _receiver) external override nonReentrant returns (uint256) {\\n        _validateManager();\\n        _validate(whitelistedTokens[_token], 16);\\n        useSwapPricing = true;\\n        uint256 tokenAmount = _transferIn(_token);\\n        _validate(tokenAmount > 0, 17);\\n        updateCumulativeFundingRate(_token, _token);\\n        uint256 price = getMinPrice(_token);\\n        uint256 usdmAmount = tokenAmount.mul(price).div(Constants.PRICE_PRECISION);\\n        usdmAmount = adjustForDecimals(usdmAmount, _token, usdm);\\n        _validate(usdmAmount > 0, 18);\\n        uint256 feeBasisPoints = vaultUtils.getBuyUsdmFeeBasisPoints(_token, usdmAmount);\\n        uint256 amountAfterFees = _collectSwapFees(_token, tokenAmount, feeBasisPoints);\\n        uint256 mintAmount = amountAfterFees.mul(price).div(Constants.PRICE_PRECISION);\\n        mintAmount = adjustForDecimals(mintAmount, _token, usdm);\\n        _increaseUsdmAmount(_token, mintAmount);\\n        _increasePoolAmount(_token, amountAfterFees);\\n        IUSDM(usdm).mint(_receiver, mintAmount);\\n        emit Events.BuyUSDM(_receiver, _token, tokenAmount, mintAmount, feeBasisPoints);\\n        useSwapPricing = false;\\n        return mintAmount;\\n    }\\n    function sellUSDM(address _token, address _receiver) external override nonReentrant returns (uint256) {\\n        _validateManager();\\n        _validate(whitelistedTokens[_token], 19);\\n        useSwapPricing = true;\\n        uint256 usdmAmount = _transferIn(usdm);\\n        _validate(usdmAmount > 0, 20);\\n        updateCumulativeFundingRate(_token, _token);\\n        uint256 redemptionAmount = getRedemptionAmount(_token, usdmAmount);\\n        _validate(redemptionAmount > 0, 21);\\n        _decreaseUsdmAmount(_token, usdmAmount);\\n        _decreasePoolAmount(_token, redemptionAmount);\\n        IUSDM(usdm).burn(address(this), usdmAmount);\\n        _updateTokenBalance(usdm);\\n\\n        uint256 feeBasisPoints = vaultUtils.getSellUsdmFeeBasisPoints(_token, usdmAmount);\\n        uint256 amountOut = _collectSwapFees(_token, redemptionAmount, feeBasisPoints);\\n        _validate(amountOut > 0, 22);\\n        _transferOut(_token, amountOut, _receiver);\\n        emit Events.SellUSDM(_receiver, _token, usdmAmount, amountOut, feeBasisPoints);\\n        useSwapPricing = false;\\n        return amountOut;\\n    }\\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external override nonReentrant returns (uint256) {\\n        _validate(isSwapEnabled, 23);\\n        _validate(whitelistedTokens[_tokenIn], 24);\\n        _validate(whitelistedTokens[_tokenOut], 25);\\n        _validate(_tokenIn != _tokenOut, 26);\\n        useSwapPricing = true;\\n        updateCumulativeFundingRate(_tokenIn, _tokenIn);\\n        updateCumulativeFundingRate(_tokenOut, _tokenOut);\\n        uint256 amountIn = _transferIn(_tokenIn);\\n        _validate(amountIn > 0, 27);\\n        uint256 priceIn = getMinPrice(_tokenIn);\\n        uint256 priceOut = getMaxPrice(_tokenOut);\\n        uint256 amountOut = amountIn.mul(priceIn).div(priceOut);\\n        amountOut = adjustForDecimals(amountOut, _tokenIn, _tokenOut);\\n        uint256 usdmAmount = amountIn.mul(priceIn).div(Constants.PRICE_PRECISION);\\n        usdmAmount = adjustForDecimals(usdmAmount, _tokenIn, usdm);\\n        uint256 feeBasisPoints = vaultUtils.getSwapFeeBasisPoints(_tokenIn, _tokenOut, usdmAmount);\\n        uint256 amountOutAfterFees = _collectSwapFees(_tokenOut, amountOut, feeBasisPoints);\\n\\n        _increaseUsdmAmount(_tokenIn, usdmAmount);\\n        _decreaseUsdmAmount(_tokenOut, usdmAmount);\\n        _increasePoolAmount(_tokenIn, amountIn);\\n        _decreasePoolAmount(_tokenOut, amountOut);\\n        _validateBufferAmount(_tokenOut);\\n        _transferOut(_tokenOut, amountOutAfterFees, _receiver);\\n        emit Events.Swap(_receiver, _tokenIn, _tokenOut, amountIn, amountOut, amountOutAfterFees, feeBasisPoints);\\n        useSwapPricing = false;\\n        return amountOutAfterFees;\\n    }\\n    function increasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external override nonReentrant {\\n        _validate(isLeverageEnabled, 28);\\n        _validateGasPrice();\\n        _validateRouter(_account);\\n        _validateTokens(_collateralToken, _indexToken, _isLong);\\n        vaultUtils.validateIncreasePosition(_account, _collateralToken, _indexToken, _sizeDelta, _isLong);\\n        updateCumulativeFundingRate(_collateralToken, _indexToken);\\n        bytes32 key = getPositionKey(_account, _collateralToken, _indexToken, _isLong);\\n        DataTypes.Position storage position = positions[key];\\n        uint256 price = _isLong ? getMaxPrice(_indexToken) : getMinPrice(_indexToken);\\n        if (position.size == 0) {\\n            position.averagePrice = price;\\n        }\\n        if (position.size > 0 && _sizeDelta > 0) {\\n            position.averagePrice = getNextAveragePrice(_indexToken, position.size, position.averagePrice, _isLong, price, _sizeDelta, position.lastIncreasedTime);\\n        }\\n\\n        uint256 fee = _collectMarginFees(_account, _collateralToken, _indexToken, _isLong, _sizeDelta, position.size, position.entryFundingRate);\\n        uint256 collateralDelta = _transferIn(_collateralToken);\\n        uint256 collateralDeltaUsd = tokenToUsdMin(_collateralToken, collateralDelta);\\n        \\n        position.collateral = position.collateral.add(collateralDeltaUsd);\\n        _validate(position.collateral >= fee, 29);\\n        position.collateral = position.collateral.sub(fee);\\n        position.entryFundingRate = getEntryFundingRate(_collateralToken, _indexToken, _isLong);\\n        position.size = position.size.add(_sizeDelta);\\n        position.lastIncreasedTime = block.timestamp;\\n        \\n        _validate(position.size > 0, 30);\\n        _validatePosition(position.size, position.collateral);\\n        validateLiquidation(_account, _collateralToken, _indexToken, _isLong, true);\\n        \\n        uint256 reserveDelta = usdToTokenMax(_collateralToken, _sizeDelta);\\n        position.reserveAmount = position.reserveAmount.add(reserveDelta);\\n        _increaseReservedAmount(_collateralToken, reserveDelta);\\n        if (_isLong) {\\n            _increaseGuaranteedUsd(_collateralToken, _sizeDelta.add(fee));\\n            _decreaseGuaranteedUsd(_collateralToken, collateralDeltaUsd);\\n            _increasePoolAmount(_collateralToken, collateralDelta);\\n            _decreasePoolAmount(_collateralToken, usdToTokenMin(_collateralToken, fee));\\n        } else {\\n            if (globalShortSizes[_indexToken] == 0) {\\n                globalShortAveragePrices[_indexToken] = price;\\n            } else {\\n                globalShortAveragePrices[_indexToken] = getNextGlobalShortAveragePrice(_indexToken, price, _sizeDelta);\\n            }\\n\\n            _increaseGlobalShortSize(_indexToken, _sizeDelta);\\n        }\\n        emit Events.IncreasePosition(key, _account, _collateralToken, _indexToken, collateralDeltaUsd, _sizeDelta, _isLong, price, fee);\\n        emit Events.UpdatePosition(key, position.size, position.collateral, position.averagePrice, position.entryFundingRate, position.reserveAmount, position.realisedPnl, price);\\n    }\\n    function decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external override nonReentrant returns (uint256) {\\n        _validateGasPrice();\\n        _validateRouter(_account);\\n        return _decreasePosition(_account, _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong, _receiver);\\n    }\\n    function liquidatePosition(address _account, address _collateralToken, address _indexToken, bool _isLong, address _feeReceiver) external override nonReentrant {\\n        if (inPrivateLiquidationMode) {\\n            _validate(isLiquidator[msg.sender], 34);\\n        }\\n        includeAmmPrice = false;\\n        updateCumulativeFundingRate(_collateralToken, _indexToken);\\n        bytes32 key = getPositionKey(_account, _collateralToken, _indexToken, _isLong);\\n        DataTypes.Position memory position = positions[key];\\n        _validate(position.size > 0, 35);\\n        (uint256 liquidationState, uint256 marginFees) = validateLiquidation(_account, _collateralToken, _indexToken, _isLong, false);\\n        _validate(liquidationState != 0, 36);\\n        if (liquidationState == 2) {\\n            _decreasePosition(_account, _collateralToken, _indexToken, 0, position.size, _isLong, _account);\\n            includeAmmPrice = true;\\n            return;\\n        }\\n        uint256 feeTokens = usdToTokenMin(_collateralToken, marginFees);\\n        feeReserves[_collateralToken] = feeReserves[_collateralToken].add(feeTokens);\\n        emit Events.CollectMarginFees(_collateralToken, marginFees, feeTokens);\\n        _decreaseReservedAmount(_collateralToken, position.reserveAmount);\\n\\n        if (_isLong) {\\n            _decreaseGuaranteedUsd(_collateralToken, position.size.sub(position.collateral));\\n            _decreasePoolAmount(_collateralToken, usdToTokenMin(_collateralToken, marginFees));\\n        }\\n        uint256 markPrice = _isLong ? getMinPrice(_indexToken) : getMaxPrice(_indexToken);\\n        emit Events.LiquidatePosition(key, _account, _collateralToken, _indexToken, _isLong, position.size, position.collateral, position.reserveAmount, position.realisedPnl, markPrice);\\n        if (!_isLong && marginFees < position.collateral) {\\n            uint256 remainingCollateral = position.collateral.sub(marginFees);\\n            _increasePoolAmount(_collateralToken, usdToTokenMin(_collateralToken, remainingCollateral));\\n        }\\n        if (!_isLong) {\\n            _decreaseGlobalShortSize(_indexToken, position.size);\\n        }\\n        delete positions[key];\\n        _decreasePoolAmount(_collateralToken, usdToTokenMin(_collateralToken, liquidationFeeUsd));\\n        _transferOut(_collateralToken, usdToTokenMin(_collateralToken, liquidationFeeUsd), _feeReceiver);\\n        includeAmmPrice = true;\\n    }\\n    function updateCumulativeFundingRate(address _collateralToken, address _indexToken) public {\\n        bool shouldUpdate = vaultUtils.updateCumulativeFundingRate(_collateralToken, _indexToken);\\n        if (!shouldUpdate) {\\n            return;\\n        }\\n        if (lastFundingTimes[_collateralToken] == 0) {\\n            lastFundingTimes[_collateralToken] = block.timestamp.div(fundingInterval).mul(fundingInterval);\\n            return;\\n        }\\n        if (lastFundingTimes[_collateralToken].add(fundingInterval) > block.timestamp) {\\n            return;\\n        }\\n        uint256 fundingRate = getNextFundingRate(_collateralToken);\\n        cumulativeFundingRates[_collateralToken] = cumulativeFundingRates[_collateralToken].add(fundingRate);\\n        lastFundingTimes[_collateralToken] = block.timestamp.div(fundingInterval).mul(fundingInterval);\\n        emit Events.UpdateFundingRate(_collateralToken, cumulativeFundingRates[_collateralToken]);\\n    }\\n    function _decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) internal returns (uint256) {\\n        vaultUtils.validateDecreasePosition(_account, _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong, _receiver);\\n        updateCumulativeFundingRate(_collateralToken, _indexToken);\\n        bytes32 key = getPositionKey(_account, _collateralToken, _indexToken, _isLong);\\n        DataTypes.Position storage position = positions[key];\\n        _validate(position.size > 0, 31);\\n        _validate(position.size >= _sizeDelta, 32);\\n        _validate(position.collateral >= _collateralDelta, 33);\\n\\n        uint256 collateral = position.collateral;\\n        {\\n            uint256 reserveDelta = position.reserveAmount.mul(_sizeDelta).div(position.size);\\n            position.reserveAmount = position.reserveAmount.sub(reserveDelta);\\n            _decreaseReservedAmount(_collateralToken, reserveDelta);\\n        }\\n        (uint256 usdOut, uint256 usdOutAfterFee) = _reduceCollateral(_account, _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong);\\n        if (position.size != _sizeDelta) {\\n            position.entryFundingRate = getEntryFundingRate(_collateralToken, _indexToken, _isLong);\\n            position.size = position.size.sub(_sizeDelta);\\n            _validatePosition(position.size, position.collateral);\\n            validateLiquidation(_account, _collateralToken, _indexToken, _isLong, true);\\n            if (_isLong) {\\n                _increaseGuaranteedUsd(_collateralToken, collateral.sub(position.collateral));\\n                _decreaseGuaranteedUsd(_collateralToken, _sizeDelta);\\n            }\\n            uint256 price = _isLong ? getMinPrice(_indexToken) : getMaxPrice(_indexToken);\\n            emit Events.DecreasePosition(key, _account, _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong, price, usdOut.sub(usdOutAfterFee));\\n            emit Events.UpdatePosition(key, position.size, position.collateral, position.averagePrice, position.entryFundingRate, position.reserveAmount, position.realisedPnl, price);\\n        } else {\\n            if (_isLong) {\\n                _increaseGuaranteedUsd(_collateralToken, collateral);\\n                _decreaseGuaranteedUsd(_collateralToken, _sizeDelta);\\n            }\\n            uint256 price = _isLong ? getMinPrice(_indexToken) : getMaxPrice(_indexToken);\\n            emit Events.DecreasePosition(key, _account, _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong, price, usdOut.sub(usdOutAfterFee));\\n            emit Events.ClosePosition(key, position.size, position.collateral, position.averagePrice, position.entryFundingRate, position.reserveAmount, position.realisedPnl);\\n            delete positions[key];\\n        }\\n        if (!_isLong) {\\n            _decreaseGlobalShortSize(_indexToken, _sizeDelta);\\n        }\\n        if (usdOut > 0) {\\n            if (_isLong) {\\n                _decreasePoolAmount(_collateralToken, usdToTokenMin(_collateralToken, usdOut));\\n            }\\n            uint256 amountOutAfterFees = usdToTokenMin(_collateralToken, usdOutAfterFee);\\n            _transferOut(_collateralToken, amountOutAfterFees, _receiver);\\n            return amountOutAfterFees;\\n        }\\n        return 0;\\n    }\\n\\n\\n\\n}\\n\",\"keccak256\":\"0x1c43ac5dfa9c53d5186e51a3d8455941229dc984132a355a265dd62d1208f06c\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"./IVaultUtils.sol\\\";\\ninterface IVault {\\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\\n    function directPoolDeposit(address _token) external;\\n    function buyUSDM(address _token, address _receiver) external returns (uint256);\\n    function sellUSDM(address _token, address _receiver) external returns (uint256);\\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external returns (uint256);\\n    function increasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function liquidatePosition(address _account, address _collateralToken, address _indexToken, bool _isLong, address _feeReceiver) external;\\n\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\\n    function priceFeed() external view returns (address);\\n    function fundingRateFactor() external view returns (uint256);\\n    function stableFundingRateFactor() external view returns (uint256);\\n    function cumulativeFundingRates(address _token) external view returns (uint256);\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdmDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n    function liquidationFeeUsd() external view returns (uint256);\\n    function taxBasisPoints() external view returns (uint256);\\n    function stableTaxBasisPoints() external view returns (uint256);\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n    function swapFeeBasisPoints() external view returns (uint256);\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n    function marginFeeBasisPoints() external view returns (uint256);\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n    function whitelistedTokens(address _token) external view returns (bool);\\n    function stableTokens(address _token) external view returns (bool);\\n    function shortableTokens(address _token) external view returns (bool);\\n    function feeReserves(address _token) external view returns (uint256);\\n    function globalShortSizes(address _token) external view returns (uint256);\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\\n    function tokenDecimals(address _token) external view returns (uint256);\\n    function tokenWeights(address _token) external view returns (uint256);\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n    function poolAmounts(address _token) external view returns (uint256);\\n    function bufferAmounts(address _token) external view returns (uint256);\\n    function reservedAmounts(address _token) external view returns (uint256);\\n    function usdmAmounts(address _token) external view returns (uint256);\\n    function maxUsdmAmounts(address _token) external view returns (uint256);\\n    function getRedemptionAmount(address _token, uint256 _usdmAmount) external view returns (uint256);\\n    function getMaxPrice(address _token) external view returns (uint256);\\n    function getMinPrice(address _token) external view returns (uint256);\\n    function getDelta(address _indexToken, uint256 _size, uint256 _averagePrice, bool _isLong, uint256 _lastIncreasedTime) external view returns (bool, uint256);\\n    function getPosition(address _account, address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256);\\n    function isInitialized() external view returns (bool);\\n    function isSwapEnabled() external view returns (bool);\\n    function isLeverageEnabled() external view returns (bool);\\n    function router() external view returns (address);\\n    function usdm() external view returns (address);\\n    function gov() external view returns (address);\\n    function whitelistedTokenCount() external view returns (uint256);\\n    function maxLeverage() external view returns (uint256);\\n    function minProfitTime() external view returns (uint256);\\n    function hasDynamicFees() external view returns (bool);\\n    function fundingInterval() external view returns (uint256);\\n    function totalTokenWeights() external view returns (uint256);\\n    function getTargetUsdmAmount(address _token) external view returns (uint256);\\n    function inManagerMode() external view returns (bool);\\n    function inPrivateLiquidationMode() external view returns (bool);\\n    function maxGasPrice() external view returns (uint256);\\n    function approvedRouters(address _account, address _router) external view returns (bool);\\n    function isLiquidator(address _account) external view returns (bool);\\n    function isManager(address _account) external view returns (bool);\\n    function minProfitBasisPoints(address _token) external view returns (uint256);\\n    function tokenBalances(address _token) external view returns (uint256);\\n    function lastFundingTimes(address _token) external view returns (uint256);\\n\\n    function setMaxLeverage(uint256 _maxLeverage) external;\\n    function setInManagerMode(bool _inManagerMode) external;\\n    function setManager(address _manager, bool _isManager) external;\\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\\n    function setUsdmAmount(address _token, uint256 _amount) external;\\n    function setBufferAmount(address _token, uint256 _amount) external;\\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external;\\n    function setLiquidator(address _liquidator, bool _isActive) external;\\n    function setFundingRate(uint256 _fundingInterval, uint256 _fundingRateFactor, uint256 _stableFundingRateFactor) external;\\n    function setFees(uint256 _taxBasisPoints, uint256 _stableTaxBasisPoints, uint256 _mintBurnFeeBasisPoints, uint256 _swapFeeBasisPoints, uint256 _stableSwapFeeBasisPoints, uint256 _marginFeeBasisPoints, uint256 _liquidationFeeUsd, uint256 _minProfitTime, bool _hasDynamicFees) external;\\n    function setTokenConfig(address _token, uint256 _tokenDecimals, uint256 _redemptionBps, uint256 _minProfitBps, uint256 _maxUsdmAmount, bool _isStable, bool _isShortable) external;\\n    function setPriceFeed(address _priceFeed) external;\\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\\n    function setError(uint256 _errorCode, string calldata _error) external;\\n}\\n\",\"keccak256\":\"0x6865fea6348cbcd8eb8c91bbf6fe38d9c7128778ed80b97e6a407f55bf0fbe81\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IVaultPriceFeed {\\n    function adjustmentBasisPoints(address _token) external view returns (uint256);\\n    function isAdjustmentAdditive(address _token) external view returns (bool);\\n    function setAdjustment(address _token, bool _isAdditive, uint256 _adjustmentBps) external;\\n    function setUseV2Pricing(bool _useV2Pricing) external;\\n    function setIsAmmEnabled(bool _isEnabled) external;\\n    function setIsSecondaryPriceEnabled(bool _isEnabled) external;\\n    function setSpreadBasisPoints(address _token, uint256 _spreadBasisPoints) external;\\n    function setSpreadThresholdBasisPoints(uint256 _spreadThresholdBasisPoints) external;\\n    function setFavorPrimaryPrice(bool _favorPrimaryPrice) external;\\n    function setPriceSampleSpace(uint256 _priceSampleSpace) external;\\n    function setMaxStrictPriceDeviation(uint256 _maxStrictPriceDeviation) external;\\n    function getPrice(address _token, bool _maximise, bool _includeAmmPrice, bool _useSwapPricing) external view returns (uint256);\\n    function getAmmPrice(address _token) external view returns (uint256);\\n    function getLatestPrimaryPrice(address _token) external view returns (uint256);\\n    function getPrimaryPrice(address _token, bool _maximise) external view returns (uint256);\\n    function setTokenConfig(address _token, address _priceFeed, uint256 _priceDecimals, bool _isStrictStable) external;\\n}\\n\",\"keccak256\":\"0xa2ed7073305dff5e748522f8279f0690fd51bfeaa3e432b3e1e10de175e4be69\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IVaultUtils {\\n    function updateCumulativeFundingRate(address _collateralToken, address _indexToken) external returns (bool);\\n    function validateIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external view;\\n    function validateDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external view;\\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function getEntryFundingRate(address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256);\\n    function getPositionFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta) external view returns (uint256);\\n    function getFundingFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _size, uint256 _entryFundingRate) external view returns (uint256);\\n    function getBuyUsdmFeeBasisPoints(address _token, uint256 _usdmAmount) external view returns (uint256);\\n    function getSellUsdmFeeBasisPoints(address _token, uint256 _usdmAmount) external view returns (uint256);\\n    function getSwapFeeBasisPoints(address _tokenIn, address _tokenOut, uint256 _usdmAmount) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdmDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x938c049c684992effbeeb9aa3b069331224e0cfdf95e97d4aaf3d8fbd99b51b8\",\"license\":\"MIT\"},\"contracts/core/settings/VaultInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\nimport \\\"./VaultSettings.sol\\\";\\nabstract contract VaultInternal is VaultSettings {\\n    function _reduceCollateral(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong) internal returns (uint256, uint256) {\\n        bytes32 key = getPositionKey(_account, _collateralToken, _indexToken, _isLong);\\n        DataTypes.Position storage position = positions[key];\\n        uint256 fee = _collectMarginFees(_account, _collateralToken, _indexToken, _isLong, _sizeDelta, position.size, position.entryFundingRate);\\n        bool hasProfit;\\n        uint256 adjustedDelta;\\n        {\\n            (bool _hasProfit, uint256 delta) = getDelta(_indexToken, position.size, position.averagePrice, _isLong, position.lastIncreasedTime);\\n            hasProfit = _hasProfit;\\n            adjustedDelta = _sizeDelta.mul(delta).div(position.size);\\n        }\\n        uint256 usdOut;\\n        if (hasProfit && adjustedDelta > 0) {\\n            usdOut = adjustedDelta;\\n            position.realisedPnl = position.realisedPnl + int256(adjustedDelta);\\n            if (!_isLong) {\\n                uint256 tokenAmount = usdToTokenMin(_collateralToken, adjustedDelta);\\n                _decreasePoolAmount(_collateralToken, tokenAmount);\\n            }\\n        }\\n        if (!hasProfit && adjustedDelta > 0) {\\n            position.collateral = position.collateral.sub(adjustedDelta);\\n            if (!_isLong) {\\n                uint256 tokenAmount = usdToTokenMin(_collateralToken, adjustedDelta);\\n                _increasePoolAmount(_collateralToken, tokenAmount);\\n            }\\n            position.realisedPnl = position.realisedPnl - int256(adjustedDelta);\\n        }\\n        if (_collateralDelta > 0) {\\n            usdOut = usdOut.add(_collateralDelta);\\n            position.collateral = position.collateral.sub(_collateralDelta);\\n        }\\n        if (position.size == _sizeDelta) {\\n            usdOut = usdOut.add(position.collateral);\\n            position.collateral = 0;\\n        }\\n        uint256 usdOutAfterFee = usdOut;\\n        if (usdOut > fee) {\\n            usdOutAfterFee = usdOut.sub(fee);\\n        } else {\\n            position.collateral = position.collateral.sub(fee);\\n            if (_isLong) {\\n                uint256 feeTokens = usdToTokenMin(_collateralToken, fee);\\n                _decreasePoolAmount(_collateralToken, feeTokens);\\n            }\\n        }\\n        emit Events.UpdatePnl(key, hasProfit, adjustedDelta);\\n        return (usdOut, usdOutAfterFee);\\n    }\\n    function _collectSwapFees(address _token, uint256 _amount, uint256 _feeBasisPoints) internal returns (uint256) {\\n        uint256 afterFeeAmount = _amount.mul(Constants.BASIS_POINTS_DIVISOR.sub(_feeBasisPoints)).div(Constants.BASIS_POINTS_DIVISOR);\\n        uint256 feeAmount = _amount.sub(afterFeeAmount);\\n        feeReserves[_token] = feeReserves[_token].add(feeAmount);\\n        emit Events.CollectSwapFees(_token, tokenToUsdMin(_token, feeAmount), feeAmount);\\n        return afterFeeAmount;\\n    }\\n    function _collectMarginFees(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta, uint256 _size, uint256 _entryFundingRate) internal returns (uint256) {\\n        uint256 feeUsd = getPositionFee(_account, _collateralToken, _indexToken, _isLong, _sizeDelta);\\n        uint256 fundingFee = getFundingFee(_account, _collateralToken, _indexToken, _isLong, _size, _entryFundingRate);\\n        feeUsd = feeUsd.add(fundingFee);\\n        uint256 feeTokens = usdToTokenMin(_collateralToken, feeUsd);\\n        feeReserves[_collateralToken] = feeReserves[_collateralToken].add(feeTokens);\\n        emit Events.CollectMarginFees(_collateralToken, feeUsd, feeTokens);\\n        return feeUsd;\\n    }\\n    function _transferIn(address _token) internal returns (uint256) {\\n        uint256 prevBalance = tokenBalances[_token];\\n        uint256 nextBalance = IERC20(_token).balanceOf(address(this));\\n        tokenBalances[_token] = nextBalance;\\n        return nextBalance.sub(prevBalance);\\n    }\\n    function _transferOut(address _token, uint256 _amount, address _receiver) internal {\\n        IERC20(_token).safeTransfer(_receiver, _amount);\\n        tokenBalances[_token] = IERC20(_token).balanceOf(address(this));\\n    }\\n    function _updateTokenBalance(address _token) internal {\\n        uint256 nextBalance = IERC20(_token).balanceOf(address(this));\\n        tokenBalances[_token] = nextBalance;\\n    }\\n    function _increasePoolAmount(address _token, uint256 _amount) internal {\\n        poolAmounts[_token] = poolAmounts[_token].add(_amount);\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n        _validate(poolAmounts[_token] <= balance, 49);\\n        emit Events.IncreasePoolAmount(_token, _amount);\\n    }\\n    function _decreasePoolAmount(address _token, uint256 _amount) internal {\\n        poolAmounts[_token] = poolAmounts[_token].sub(_amount, Errors.VAULT_POOLAMOUNT_EXCEEDED);\\n        _validate(reservedAmounts[_token] <= poolAmounts[_token], 50);\\n        emit Events.DecreasePoolAmount(_token, _amount);\\n    }\\n    function _increaseReservedAmount(address _token, uint256 _amount) internal {\\n        reservedAmounts[_token] = reservedAmounts[_token].add(_amount);\\n        _validate(reservedAmounts[_token] <= poolAmounts[_token], 52);\\n        emit Events.IncreaseReservedAmount(_token, _amount);\\n    }\\n    function _decreaseReservedAmount(address _token, uint256 _amount) internal {\\n        reservedAmounts[_token] = reservedAmounts[_token].sub(_amount, Errors.VAULT_INSUFFICIENT_RESERVE);\\n        emit Events.DecreaseReservedAmount(_token, _amount);\\n    }\\n    function _increaseGuaranteedUsd(address _token, uint256 _usdAmount) internal {\\n        guaranteedUsd[_token] = guaranteedUsd[_token].add(_usdAmount);\\n        emit Events.IncreaseGuaranteedUsd(_token, _usdAmount);\\n    }\\n    function _decreaseGuaranteedUsd(address _token, uint256 _usdAmount) internal {\\n        guaranteedUsd[_token] = guaranteedUsd[_token].sub(_usdAmount);\\n        emit Events.DecreaseGuaranteedUsd(_token, _usdAmount);\\n    }\\n    function _increaseGlobalShortSize(address _token, uint256 _amount) internal {\\n        globalShortSizes[_token] = globalShortSizes[_token].add(_amount);\\n        uint256 maxSize = maxGlobalShortSizes[_token];\\n        if (maxSize != 0) {\\n            require(globalShortSizes[_token] <= maxSize, Errors.VAULT_MAX_SHORTS_EXCEEDED);\\n        }\\n    }\\n    function _decreaseGlobalShortSize(address _token, uint256 _amount) internal {\\n        uint256 size = globalShortSizes[_token];\\n        if (_amount > size) {\\n            globalShortSizes[_token] = 0;\\n            return;\\n        }\\n        globalShortSizes[_token] = size.sub(_amount);\\n    }\\n    function _validateManager() internal view {\\n        if (inManagerMode) {\\n            _validate(isManager[msg.sender], 54);\\n        }\\n    }\\n    function _validateGasPrice() internal view {\\n        if (maxGasPrice == 0) {return;}\\n        _validate(tx.gasprice <= maxGasPrice, 55);\\n    }\\n    function _validatePosition(uint256 _size, uint256 _collateral) internal view {\\n        if (_size == 0) {\\n            _validate(_collateral == 0, 39);\\n            return;\\n        }\\n        _validate(_size >= _collateral, 40);\\n    }\\n    function _validateRouter(address _account) internal view {\\n        if (msg.sender == _account) {return;}\\n        if (msg.sender == router) {return;}\\n        _validate(approvedRouters[_account][msg.sender], 41);\\n    }\\n    function _validateTokens(address _collateralToken, address _indexToken, bool _isLong) internal view {\\n        if (_isLong) {\\n            _validate(_collateralToken == _indexToken, 42);\\n            _validate(whitelistedTokens[_collateralToken], 43);\\n            _validate(!stableTokens[_collateralToken], 44);\\n            return;\\n        }\\n        _validate(whitelistedTokens[_collateralToken], 45);\\n        _validate(stableTokens[_collateralToken], 46);\\n        _validate(!stableTokens[_indexToken], 47);\\n        _validate(shortableTokens[_indexToken], 48);\\n    }\\n    function _validateBufferAmount(address _token) internal view {\\n        if (poolAmounts[_token] < bufferAmounts[_token]) {\\n            revert(Errors.VAULT_POOLAMOUNT_BUFFER);\\n        }\\n    }\\n\\n    /* views */\\n    function getNextGlobalShortAveragePrice(address _indexToken, uint256 _nextPrice, uint256 _sizeDelta) public view returns (uint256) {\\n        uint256 size = globalShortSizes[_indexToken];\\n        uint256 averagePrice = globalShortAveragePrices[_indexToken];\\n        uint256 priceDelta = averagePrice > _nextPrice ? averagePrice.sub(_nextPrice) : _nextPrice.sub(averagePrice);\\n        uint256 delta = size.mul(priceDelta).div(averagePrice);\\n        bool hasProfit = averagePrice > _nextPrice;\\n        uint256 nextSize = size.add(_sizeDelta);\\n        uint256 divisor = hasProfit ? nextSize.sub(delta) : nextSize.add(delta);\\n        return _nextPrice.mul(nextSize).div(divisor);\\n    }\\n    function getNextAveragePrice(address _indexToken, uint256 _size, uint256 _averagePrice, bool _isLong, uint256 _nextPrice, uint256 _sizeDelta, uint256 _lastIncreasedTime) public view returns (uint256) {\\n        (bool hasProfit, uint256 delta) = getDelta(_indexToken, _size, _averagePrice, _isLong, _lastIncreasedTime);\\n        uint256 nextSize = _size.add(_sizeDelta);\\n        uint256 divisor;\\n        if (_isLong) {\\n            divisor = hasProfit ? nextSize.add(delta) : nextSize.sub(delta);\\n        } else {\\n            divisor = hasProfit ? nextSize.sub(delta) : nextSize.add(delta);\\n        }\\n        return _nextPrice.mul(nextSize).div(divisor);\\n    }\\n    function getNextFundingRate(address _token) public override view returns (uint256) {\\n        if (lastFundingTimes[_token].add(fundingInterval) > block.timestamp) {return 0;}\\n        uint256 intervals = block.timestamp.sub(lastFundingTimes[_token]).div(fundingInterval);\\n        uint256 poolAmount = poolAmounts[_token];\\n        if (poolAmount == 0) {return 0;}\\n        uint256 _fundingRateFactor = stableTokens[_token] ? stableFundingRateFactor : fundingRateFactor;\\n        return _fundingRateFactor.mul(reservedAmounts[_token]).mul(intervals).div(poolAmount);\\n    }\\n    function getEntryFundingRate(address _collateralToken, address _indexToken, bool _isLong) public view returns (uint256) {\\n        return vaultUtils.getEntryFundingRate(_collateralToken, _indexToken, _isLong);\\n    }\\n    function getTargetUsdmAmount(address _token) public override view returns (uint256) {\\n        uint256 supply = IERC20(usdm).totalSupply();\\n        if (supply == 0) {return 0;}\\n        uint256 weight = tokenWeights[_token];\\n        return weight.mul(supply).div(totalTokenWeights);\\n    }\\n    function getRedemptionAmount(address _token, uint256 _usdmAmount) public override view returns (uint256) {\\n        uint256 price = getMaxPrice(_token);\\n        uint256 redemptionAmount = _usdmAmount.mul(Constants.PRICE_PRECISION).div(price);\\n        return adjustForDecimals(redemptionAmount, usdm, _token);\\n    }\\n    function getFeeBasisPoints(address _token, uint256 _usdmDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) public override view returns (uint256) {\\n        return vaultUtils.getFeeBasisPoints(_token, _usdmDelta, _feeBasisPoints, _taxBasisPoints, _increment);\\n    }\\n    function getPositionKey(address _account, address _collateralToken, address _indexToken, bool _isLong) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_account, _collateralToken, _indexToken, _isLong));\\n    }\\n    function getPosition(address _account, address _collateralToken, address _indexToken, bool _isLong) public override view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256) {\\n        bytes32 key = getPositionKey(_account, _collateralToken, _indexToken, _isLong);\\n        DataTypes.Position memory position = positions[key];\\n        uint256 realisedPnl = position.realisedPnl > 0 ? uint256(position.realisedPnl) : uint256(- position.realisedPnl);\\n        return (position.size, position.collateral, position.averagePrice, position.entryFundingRate, position.reserveAmount, realisedPnl, position.realisedPnl >= 0, position.lastIncreasedTime);\\n    }\\n    function getFundingFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _size, uint256 _entryFundingRate) public view returns (uint256) {\\n        return vaultUtils.getFundingFee(_account, _collateralToken, _indexToken, _isLong, _size, _entryFundingRate);\\n    }\\n    function getMinPrice(address _token) public override view returns (uint256) {\\n        return IVaultPriceFeed(priceFeed).getPrice(_token, false, includeAmmPrice, useSwapPricing);\\n    }\\n    function getDelta(address _indexToken, uint256 _size, uint256 _averagePrice, bool _isLong, uint256 _lastIncreasedTime) public override view returns (bool, uint256) {\\n        _validate(_averagePrice > 0, 38);\\n        uint256 price = _isLong ? getMinPrice(_indexToken) : getMaxPrice(_indexToken);\\n        uint256 priceDelta = _averagePrice > price ? _averagePrice.sub(price) : price.sub(_averagePrice);\\n        uint256 delta = _size.mul(priceDelta).div(_averagePrice);\\n        bool hasProfit;\\n        if (_isLong) {\\n            hasProfit = price > _averagePrice;\\n        } else {\\n            hasProfit = _averagePrice > price;\\n        }\\n        uint256 minBps = block.timestamp > _lastIncreasedTime.add(minProfitTime) ? 0 : minProfitBasisPoints[_indexToken];\\n        if (hasProfit && delta.mul(Constants.BASIS_POINTS_DIVISOR) <= _size.mul(minBps)) {\\n            delta = 0;\\n        }\\n        return (hasProfit, delta);\\n    }\\n    function usdToTokenMax(address _token, uint256 _usdAmount) public view returns (uint256) {\\n        if (_usdAmount == 0) {return 0;}\\n        return usdToToken(_token, _usdAmount, getMinPrice(_token));\\n    }\\n    function usdToTokenMin(address _token, uint256 _usdAmount) public view returns (uint256) {\\n        if (_usdAmount == 0) {return 0;}\\n        return usdToToken(_token, _usdAmount, getMaxPrice(_token));\\n    }\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) public override view returns (uint256) {\\n        if (_tokenAmount == 0) {return 0;}\\n        uint256 price = getMinPrice(_token);\\n        uint256 decimals = tokenDecimals[_token];\\n        return _tokenAmount.mul(price).div(10 ** decimals);\\n    }\\n    function usdToToken(address _token, uint256 _usdAmount, uint256 _price) public view returns (uint256) {\\n        if (_usdAmount == 0) {return 0;}\\n        uint256 decimals = tokenDecimals[_token];\\n        return _usdAmount.mul(10 ** decimals).div(_price);\\n    }\\n    function adjustForDecimals(uint256 _amount, address _tokenDiv, address _tokenMul) public view returns (uint256) {\\n        uint256 decimalsDiv = _tokenDiv == usdm ? Constants.USDM_DECIMALS : tokenDecimals[_tokenDiv];\\n        uint256 decimalsMul = _tokenMul == usdm ? Constants.USDM_DECIMALS : tokenDecimals[_tokenMul];\\n        return _amount.mul(10 ** decimalsMul).div(10 ** decimalsDiv);\\n    }\\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) override public view returns (uint256, uint256) {\\n        return vaultUtils.validateLiquidation(_account, _collateralToken, _indexToken, _isLong, _raise);\\n    }\\n    function getPositionFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta) public view returns (uint256) {\\n        return vaultUtils.getPositionFee(_account, _collateralToken, _indexToken, _isLong, _sizeDelta);\\n    }\\n    function allWhitelistedTokensLength() external override view returns (uint256) {\\n        return allWhitelistedTokens.length;\\n    }\\n\\n    /* funcs */\\n    function addRouter(address _router) external {\\n        approvedRouters[msg.sender][_router] = true;\\n    }\\n    function removeRouter(address _router) external {\\n        approvedRouters[msg.sender][_router] = false;\\n    }\\n    function upgradeVault(address _newVault, address _token, uint256 _amount) external {\\n        _onlyGov();\\n        IERC20(_token).safeTransfer(_newVault, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x8653affee5baece1d028e2244543157f33050bd5aab13ea31671819ed94a3503\",\"license\":\"MIT\"},\"contracts/core/settings/VaultSettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\nimport \\\"../storage/VaultStorage.sol\\\";\\nabstract contract VaultSettings is VaultStorage {\\n    function _onlyGov() internal view {\\n        _validate(msg.sender == gov, 53);\\n    }\\n    function setVaultUtils(IVaultUtils _vaultUtils) external override {\\n        _onlyGov();\\n        vaultUtils = _vaultUtils;\\n    }\\n    function setErrorController(address _errorController) external {\\n        _onlyGov();\\n        errorController = _errorController;\\n    }\\n    function setError(uint256 _errorCode, string calldata _error) external override {\\n        require(msg.sender == errorController, Errors.VAULT_INVALID_ERRORCONTROLLER);\\n        errors[_errorCode] = _error;\\n    }\\n    function setInManagerMode(bool _inManagerMode) external override {\\n        _onlyGov();\\n        inManagerMode = _inManagerMode;\\n    }\\n    function setManager(address _manager, bool _isManager) external override {\\n        _onlyGov();\\n        isManager[_manager] = _isManager;\\n    }\\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external override {\\n        _onlyGov();\\n        inPrivateLiquidationMode = _inPrivateLiquidationMode;\\n    }\\n    function setLiquidator(address _liquidator, bool _isActive) external override {\\n        _onlyGov();\\n        isLiquidator[_liquidator] = _isActive;\\n    }\\n    function setIsSwapEnabled(bool _isSwapEnabled) external override {\\n        _onlyGov();\\n        isSwapEnabled = _isSwapEnabled;\\n    }\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external override {\\n        _onlyGov();\\n        isLeverageEnabled = _isLeverageEnabled;\\n    }\\n    function setMaxGasPrice(uint256 _maxGasPrice) external override {\\n        _onlyGov();\\n        maxGasPrice = _maxGasPrice;\\n    }\\n    function setGov(address _gov) external {\\n        _onlyGov();\\n        gov = _gov;\\n    }\\n    function setPriceFeed(address _priceFeed) external override {\\n        _onlyGov();\\n        priceFeed = _priceFeed;\\n    }\\n    function setMaxLeverage(uint256 _maxLeverage) external override {\\n        _onlyGov();\\n        _validate(_maxLeverage > Constants.MIN_LEVERAGE, 2);\\n        maxLeverage = _maxLeverage;\\n    }\\n    function setBufferAmount(address _token, uint256 _amount) external override {\\n        _onlyGov();\\n        bufferAmounts[_token] = _amount;\\n    }\\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external override {\\n        _onlyGov();\\n        maxGlobalShortSizes[_token] = _amount;\\n    }\\n    function setFees(uint256 _taxBasisPoints, uint256 _stableTaxBasisPoints, uint256 _mintBurnFeeBasisPoints, uint256 _swapFeeBasisPoints, uint256 _stableSwapFeeBasisPoints, uint256 _marginFeeBasisPoints, uint256 _liquidationFeeUsd, uint256 _minProfitTime, bool _hasDynamicFees) external override {\\n        _onlyGov();\\n        _validate(_taxBasisPoints <= Constants.MAX_FEE_BASIS_POINTS, 3);\\n        _validate(_stableTaxBasisPoints <= Constants.MAX_FEE_BASIS_POINTS, 4);\\n        _validate(_mintBurnFeeBasisPoints <= Constants.MAX_FEE_BASIS_POINTS, 5);\\n        _validate(_swapFeeBasisPoints <= Constants.MAX_FEE_BASIS_POINTS, 6);\\n        _validate(_stableSwapFeeBasisPoints <= Constants.MAX_FEE_BASIS_POINTS, 7);\\n        _validate(_marginFeeBasisPoints <= Constants.MAX_FEE_BASIS_POINTS, 8);\\n        _validate(_liquidationFeeUsd <= Constants.MAX_LIQUIDATION_FEE_USD, 9);\\n        taxBasisPoints = _taxBasisPoints;\\n        stableTaxBasisPoints = _stableTaxBasisPoints;\\n        mintBurnFeeBasisPoints = _mintBurnFeeBasisPoints;\\n        swapFeeBasisPoints = _swapFeeBasisPoints;\\n        stableSwapFeeBasisPoints = _stableSwapFeeBasisPoints;\\n        marginFeeBasisPoints = _marginFeeBasisPoints;\\n        liquidationFeeUsd = _liquidationFeeUsd;\\n        minProfitTime = _minProfitTime;\\n        hasDynamicFees = _hasDynamicFees;\\n    }\\n    function setFundingRate(uint256 _fundingInterval, uint256 _fundingRateFactor, uint256 _stableFundingRateFactor) external override {\\n        _onlyGov();\\n        // TODO K\\n//        _validate(_fundingInterval >= Constants.MIN_FUNDING_RATE_INTERVAL, 10);\\n//        _validate(_fundingRateFactor <= Constants.MAX_FUNDING_RATE_FACTOR, 11);\\n//        _validate(_stableFundingRateFactor <= Constants.MAX_FUNDING_RATE_FACTOR, 12);\\n        fundingInterval = _fundingInterval;\\n        fundingRateFactor = _fundingRateFactor;\\n        stableFundingRateFactor = _stableFundingRateFactor;\\n    }\\n    function setTokenConfig(address _token, uint256 _tokenDecimals, uint256 _tokenWeight, uint256 _minProfitBps, uint256 _maxUsdmAmount, bool _isStable, bool _isShortable) external override {\\n        _onlyGov();\\n        if (!whitelistedTokens[_token]) {\\n            whitelistedTokenCount = whitelistedTokenCount.add(1);\\n            allWhitelistedTokens.push(_token);\\n        }\\n        uint256 _totalTokenWeights = totalTokenWeights;\\n        _totalTokenWeights = _totalTokenWeights.sub(tokenWeights[_token]);\\n\\n        whitelistedTokens[_token] = true;\\n        tokenDecimals[_token] = _tokenDecimals;\\n        tokenWeights[_token] = _tokenWeight;\\n        minProfitBasisPoints[_token] = _minProfitBps;\\n        maxUsdmAmounts[_token] = _maxUsdmAmount;\\n        stableTokens[_token] = _isStable;\\n        shortableTokens[_token] = _isShortable;\\n        totalTokenWeights = _totalTokenWeights.add(_tokenWeight);\\n        getMaxPrice(_token);\\n    }\\n    function setUsdmAmount(address _token, uint256 _amount) external override {\\n        _onlyGov();\\n        uint256 usdmAmount = usdmAmounts[_token];\\n        if (_amount > usdmAmount) {\\n            _increaseUsdmAmount(_token, _amount.sub(usdmAmount));\\n            return;\\n        }\\n        _decreaseUsdmAmount(_token, usdmAmount.sub(_amount));\\n    }\\n    function _validate(bool _condition, uint256 _errorCode) internal view {\\n        require(_condition, errors[_errorCode]);\\n    }\\n    function _increaseUsdmAmount(address _token, uint256 _amount) internal {\\n        usdmAmounts[_token] = usdmAmounts[_token].add(_amount);\\n        uint256 maxUsdmAmount = maxUsdmAmounts[_token];\\n        if (maxUsdmAmount != 0) {\\n            _validate(usdmAmounts[_token] <= maxUsdmAmount, 51);\\n        }\\n        emit Events.IncreaseUsdmAmount(_token, _amount);\\n    }\\n    function _decreaseUsdmAmount(address _token, uint256 _amount) internal {\\n        uint256 value = usdmAmounts[_token];\\n        if (value <= _amount) {\\n            usdmAmounts[_token] = 0;\\n            emit Events.DecreaseUsdmAmount(_token, value);\\n            return;\\n        }\\n        usdmAmounts[_token] = value.sub(_amount);\\n        emit Events.DecreaseUsdmAmount(_token, _amount);\\n    }\\n    function getMaxPrice(address _token) public override view returns (uint256) {\\n        return IVaultPriceFeed(priceFeed).getPrice(_token, true, includeAmmPrice, useSwapPricing);\\n    }\\n\\n\\n\\n\\n\\n\\n//    function getRedemptionCollateral(address _token) public view returns (uint256) {\\n//        if (stableTokens[_token]) {\\n//            return poolAmounts[_token];\\n//        }\\n//        uint256 collateral = usdToTokenMin(_token, guaranteedUsd[_token]);\\n//        return collateral.add(poolAmounts[_token]).sub(reservedAmounts[_token]);\\n//    }\\n//    function getRedemptionCollateralUsd(address _token) public view returns (uint256) {\\n//        return tokenToUsdMin(_token, getRedemptionCollateral(_token));\\n//    }\\n//    function getPositionDelta(address _account, address _collateralToken, address _indexToken, bool _isLong) public view returns (bool, uint256) {\\n//        bytes32 key = getPositionKey(_account, _collateralToken, _indexToken, _isLong);\\n//        DataTypes.Position memory position = positions[key];\\n//        return getDelta(_indexToken, position.size, position.averagePrice, _isLong, position.lastIncreasedTime);\\n//    }\\n//    function getUtilisation(address _token) public view returns (uint256) {\\n//        uint256 poolAmount = poolAmounts[_token];\\n//        if (poolAmount == 0) {return 0;}\\n//        return reservedAmounts[_token].mul(Constants.FUNDING_RATE_PRECISION).div(poolAmount);\\n//    }\\n//    function getPositionLeverage(address _account, address _collateralToken, address _indexToken, bool _isLong) public view returns (uint256) {\\n//        bytes32 key = getPositionKey(_account, _collateralToken, _indexToken, _isLong);\\n//        DataTypes.Position memory position = positions[key];\\n//        _validate(position.collateral > 0, 37);\\n//        return position.size.mul(Constants.BASIS_POINTS_DIVISOR).div(position.collateral);\\n//    }\\n//    function getGlobalShortDelta(address _token) public view returns (bool, uint256) {\\n//            uint256 size = globalShortSizes[_token];\\n//            if (size == 0) {return (false, 0);}\\n//            uint256 nextPrice = getMaxPrice(_token);\\n//            uint256 averagePrice = globalShortAveragePrices[_token];\\n//            uint256 priceDelta = averagePrice > nextPrice ? averagePrice.sub(nextPrice) : nextPrice.sub(averagePrice);\\n//            uint256 delta = size.mul(priceDelta).div(averagePrice);\\n//            bool hasProfit = averagePrice > nextPrice;\\n//            return (hasProfit, delta);\\n//        }\\n}\\n\",\"keccak256\":\"0xd1017478804cb9cc435c17efd3755ba8d21c1dc8f98d0e8d6ed20e2043b1ff3a\",\"license\":\"MIT\"},\"contracts/core/storage/VaultAggregators.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../libraries/math/SafeMath.sol\\\";\\nimport \\\"../../libraries/token/IERC20.sol\\\";\\nimport \\\"../../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../../libraries/DataTypes.sol\\\";\\nimport \\\"../../libraries/Constants.sol\\\";\\nimport \\\"../../libraries/Events.sol\\\";\\nimport \\\"../../libraries/Errors.sol\\\";\\nimport \\\"../../libraries/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/IVaultUtils.sol\\\";\\nimport \\\"../interfaces/IVault.sol\\\";\\nimport \\\"../interfaces/IVaultPriceFeed.sol\\\";\\nimport \\\"../../tokens/interfaces/IUSDM.sol\\\";\\n\\nabstract contract VaultAggregators is IVault, ReentrancyGuard {\\n}\\n\",\"keccak256\":\"0x30ba7c663c329a89ff7ea1d4b6545ae6e158f49d53696a48b5d4acca05165499\",\"license\":\"MIT\"},\"contracts/core/storage/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"./VaultAggregators.sol\\\";\\n\\nabstract contract VaultStorage is VaultAggregators {\\n    /* constructor */\\n    address public override gov;\\n    bool public override isInitialized;\\n    address public override router;\\n    address public override usdm;\\n    address public override priceFeed;\\n    uint256 public override liquidationFeeUsd;\\n    uint256 public override fundingRateFactor;\\n    uint256 public override stableFundingRateFactor;\\n\\n    /* Logic */\\n    mapping(bytes32 => DataTypes.Position) public positions; //done\\n    mapping(address => uint256) public override poolAmounts; //Token => Pool Amount\\n    mapping(address => uint256) public override reservedAmounts; // Token=> Debt Amount\\n\\n\\n    \\n    uint256 public override maxLeverage = 50 * 10000; // 50x\\n    uint256 public override taxBasisPoints = 50; // 0.5%\\n    uint256 public override stableTaxBasisPoints = 20; // 0.2%\\n    uint256 public override mintBurnFeeBasisPoints = 30; // 0.3%\\n    uint256 public override swapFeeBasisPoints = 30; // 0.3%\\n    uint256 public override stableSwapFeeBasisPoints = 4; // 0.04%\\n    uint256 public override marginFeeBasisPoints = 10; // 0.1%\\n    uint256 public override fundingInterval = 1 hours;\\n    uint256 public override whitelistedTokenCount;\\n\\n    uint256 public override maxGasPrice;\\n    uint256 public override minProfitTime;\\n    bool public override isSwapEnabled = true;\\n    bool public override isLeverageEnabled = true;\\n    bool public override hasDynamicFees = false;\\n    bool public includeAmmPrice = true;\\n    bool public useSwapPricing = false;\\n    bool public override inManagerMode = false;\\n    bool public override inPrivateLiquidationMode = false;\\n    IVaultUtils public vaultUtils;\\n    address public errorController;\\n\\n\\n\\n\\n    mapping(address => mapping(address => bool)) public override approvedRouters;\\n    mapping(address => bool) public override isLiquidator;\\n    mapping(address => bool) public override isManager;\\n\\n    mapping(address => uint256) public override minProfitBasisPoints;\\n    mapping(address => bool) public override stableTokens;\\n    mapping(address => bool) public override shortableTokens;\\n\\n\\n\\n\\n    mapping(address => uint256) public override bufferAmounts;\\n    mapping(address => uint256) public override guaranteedUsd; // long debt - usd\\n    mapping(address => uint256) public override cumulativeFundingRates;  // borrow fee\\n    mapping(address => uint256) public override lastFundingTimes;\\n\\n    mapping(address => uint256) public override feeReserves; // fee token=>balance\\n    mapping(address => uint256) public override globalShortSizes; // short debt = usd\\n    mapping(address => uint256) public override globalShortAveragePrices;\\n    mapping(address => uint256) public override maxGlobalShortSizes;\\n    mapping(uint256 => string) public errors;\\n\\n    /* Token Settings*/\\n    mapping(address => uint256) public override tokenDecimals;\\n    mapping(address => uint256) public override tokenBalances;\\n    mapping(address => uint256) public override tokenWeights;\\n    uint256 public override totalTokenWeights;\\n\\n    /* others */\\n    address[] public override allWhitelistedTokens;\\n    mapping(address => bool) public override whitelistedTokens;\\n    mapping(address => uint256) public override usdmAmounts; //token=>usdmAmounts, buyUSDM will increase usdmAmounts\\n    mapping(address => uint256) public override maxUsdmAmounts; //token=>maxUSDMAmounts\\n\\n    /* misc */\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n}\\n\",\"keccak256\":\"0xaf2c633d48124efcf439c073b403919f4186af73b246cee0c61de42f9d52ecaf\",\"license\":\"MIT\"},\"contracts/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nlibrary Constants {\\n    string public constant USDM_TOKEN_NAME = \\\"USD Mold\\\";\\n    string public constant USDM_TOKEN_SYMBOL = \\\"USDM\\\";\\n    /* VaultPriceFeed.sol */\\n    uint256 public constant PRICE_PRECISION = 10 ** 30;\\n    uint256 public constant ONE_USD = PRICE_PRECISION;\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n    uint256 public constant MAX_SPREAD_BASIS_POINTS = 50;\\n    uint256 public constant MAX_ADJUSTMENT_INTERVAL = 2 hours;\\n    uint256 public constant MAX_ADJUSTMENT_BASIS_POINTS = 20;\\n    address constant internal FLAG_ARBITRUM_SEQ_OFFLINE = address(bytes20(bytes32(uint256(keccak256(\\\"chainlink.flags.arbitrum-seq-offline\\\")) - 1)));\\n    /* VaultUtils.sol */\\n    uint256 public constant FUNDING_RATE_PRECISION = 1000000;\\n\\n    /* Vault.sol*/\\n    uint256 public constant MIN_LEVERAGE = 10000; // 1x\\n    uint256 public constant USDM_DECIMALS = 18;\\n    uint256 public constant MAX_FEE_BASIS_POINTS = 500; // 5%\\n    uint256 public constant MAX_LIQUIDATION_FEE_USD = 100 * PRICE_PRECISION; // 100 USD\\n    uint256 public constant MIN_FUNDING_RATE_INTERVAL = 1 hours;\\n    uint256 public constant MAX_FUNDING_RATE_FACTOR = 10000; // 1%\\n\\n    /* OrderBook.sol */\\n    uint256 public constant USDM_PRECISION = 1e18;\\n\\n    /* MLP.sol */\\n    uint256 public constant MLP_PRECISION = 10 ** 18;\\n    uint256 public constant MAX_COOLDOWN_DURATION = 48 hours;\\n\\n    /* ShortsTracker */\\n    uint256 public constant MAX_INT256 = uint256(type(int256).max);\\n}\\n\",\"keccak256\":\"0x7b8317c87bc0c15a28f7278ac379ad9f81398acc1a7e22bf33bb9b286ec9c84b\",\"license\":\"MIT\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nlibrary DataTypes {\\n    struct IncreaseOrder {\\n        address account;\\n        address purchaseToken;\\n        uint256 purchaseTokenAmount;\\n        address collateralToken;\\n        address indexToken;\\n        uint256 sizeDelta;\\n        bool isLong;\\n        uint256 triggerPrice;\\n        bool triggerAboveThreshold;\\n        uint256 executionFee;\\n    }\\n    struct DecreaseOrder {\\n        address account;\\n        address collateralToken;\\n        uint256 collateralDelta;\\n        address indexToken;\\n        uint256 sizeDelta;\\n        bool isLong;\\n        uint256 triggerPrice;\\n        bool triggerAboveThreshold;\\n        uint256 executionFee;\\n    }\\n    struct SwapOrder {\\n        address account;\\n        address[] path;\\n        uint256 amountIn;\\n        uint256 minOut;\\n        uint256 triggerRatio;\\n        bool triggerAboveThreshold;\\n        bool shouldUnwrap;\\n        uint256 executionFee;\\n    }\\n\\n    /* Vault.sol */\\n    struct Position {\\n        uint256 size;\\n        uint256 collateral;\\n        uint256 averagePrice; // col average price\\n        uint256 entryFundingRate;\\n        uint256 reserveAmount;\\n        int256 realisedPnl;\\n        uint256 lastIncreasedTime;\\n    }\\n}\\n\",\"keccak256\":\"0xe59ad3dec8eb41f70e00ef98efdeef5015f17a7575a00670baeb93f6c98e5fe3\",\"license\":\"MIT\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nlibrary Errors {\\n    /* Timelock Error Message*/\\n    string public constant Timelock_Invalid_Target = \\\"Timelock: invalid _target\\\";\\n    string public constant Timelock_Invalid_Buffer = \\\"Timelock: invalid _buffer\\\";\\n    string public constant Timelock_Buffer_Cannot_Be_Decreased = \\\"Timelock: buffer cannot be decreased\\\";\\n    string public constant Timelock_invalid_maxLeverage = \\\"Timelock: invalid _maxLeverage\\\";\\n    string public constant Timelock_invalid_fundingRateFactor = \\\"Timelock: invalid _fundingRateFactor\\\";\\n    string public constant Timelock_invalid_stableFundingRateFactor = \\\"Timelock: invalid _stableFundingRateFactor\\\";\\n    string public constant Timelock_invalid_minProfitBps = \\\"Timelock: invalid _minProfitBps\\\";\\n    string public constant Timelock_token_not_yet_whitelisted = \\\"Timelock: token not yet whitelisted\\\";\\n    string public constant TIMELOCK_INVALID_MAXGASPRICE = \\\"Invalid _maxGasPrice\\\";\\n    string public constant TIMELOCK_INVALID_LENGTHS = \\\"Timelock: invalid lengths\\\";\\n    string public constant TIMELOCK_MAXTOKENSUPPLY_EXCEEDED = \\\"Timelock: maxTokenSupply exceeded\\\";\\n    string public constant TIMELOCK_ACTION_ALREADY_SIGNALLED = \\\"Timelock: action already signalled\\\";\\n    string public constant TIMELOCK_ACTION_NOT_SIGNALLED = \\\"Timelock: action not signalled\\\";\\n    string public constant TIMELOCK_ACTION_TIME_NOT_YET_PASSED = \\\"Timelock: action time not yet passed\\\";\\n    string public constant TIMELOCK_INVALID_ACTION = \\\"Timelock: invalid _action\\\";\\n    string public constant TIMELOCK_INVALID_BUFFER = \\\"Timelock: invalid _buffer\\\";\\n\\n    /* PriceFeed Error Message*/\\n    string public constant PriceFeed_forbidden = \\\"PriceFeed: forbidden\\\";\\n\\n    /* USDM.sol*/\\n    string public constant USDM_FORBIDDEN = \\\"USDM: forbidden\\\";\\n\\n    /* BasePositionManagers.sol */\\n    string public constant BASEPOSITIONMANAGER_MARK_PRICE_LOWER_THAN_LIMIT      = \\\"BasePositionManager: mark price lower than limit\\\";\\n    string public constant BASEPOSITIONMANAGER_MARK_PRICE_HIGHER_THAN_LIMIT     = \\\"BasePositionManager: mark price higher than limit\\\";\\n    string public constant BASEPOSITIONMANAGER_INVALID_PATH_LENGTH              = \\\"BasePositionManager: invalid _path.length\\\";\\n    string public constant BASEPOSITIONMANAGER_INSUFFICIENT_AMOUNTOUT           = \\\"BasePositionManager: insufficient amountOut\\\";\\n    string public constant BASEPOSITIONMANAGER_MAX_GLOBAL_LONGS_EXCEEDED        = \\\"BasePositionManager: max global longs exceeded\\\";\\n    string public constant BASEPOSITIONMANAGER_MAX_GLOBAL_SHORTS_EXCEEDED       = \\\"BasePositionManager: max global shorts exceeded\\\";\\n    string public constant BASEPOSITIONMANAGER_INVALID_SENDER                   = \\\"BasePositionManager: invalid sender\\\";\\n\\n    /* PositionManager.sol */\\n    string public constant POSITIONMANAGER_INVALID_PATH_LENGTH                  = \\\"PositionManager: invalid _path.length\\\";\\n    string public constant POSITIONMANAGER_INVALID_PATH                         = \\\"PositionManager: invalid _path\\\";\\n    string public constant POSITIONMANAGER_LONG_DEPOSIT                         = \\\"PositionManager: long deposit\\\";\\n    string public constant POSITIONMANAGER_LONG_LEVERAGE_DECREASE               = \\\"PositionManager: long leverage decrease\\\";\\n    string public constant POSITIONMANAGER_FORBIDDEN                            = \\\"PositionManager: forbidden\\\";\\n\\n    /* Router.sol*/\\n    string public constant ROUTER_FORBIDDEN                                     = \\\"Router: forbidden\\\";\\n\\n    /* MlpManager.sol */\\n    string public constant MLPMANAGER_ACTION_NOT_ENABLED                        = \\\"MlpManager: action not enabled\\\";\\n    string public constant MLPMANAGER_INVALID_WEIGHT                            = \\\"MlpManager: invalid weight\\\";\\n    string public constant MLPMANAGER_INVALID_COOLDOWNDURATION                  = \\\"MlpManager: invalid _cooldownDuration\\\";\\n    string public constant MLPMANAGER_INVALID_AMOUNT                            = \\\"MlpManager: invalid _amount\\\";\\n    string public constant MLPMANAGER_INSUFFICIENT_USDM_OUTPUT                  = \\\"MlpManager: insufficient USDM output\\\";\\n    string public constant MLPMANAGER_INSUFFICIENT_MLP_OUTPUT                   = \\\"MlpManager: insufficient MLP output\\\";\\n    string public constant MLPMANAGER_INVALID_MLPAMOUNT                         = \\\"MlpManager: invalid _mlpAmount\\\";\\n    string public constant MLPMANAGER_COOLDOWN_DURATION_NOT_YET_PASSED          = \\\"MlpManager: cooldown duration not yet passed\\\";\\n    string public constant MLPMANAGER_INSUFFICIENT_OUTPUT                       = \\\"MlpManager: insufficient output\\\";\\n    string public constant MLPMANAGER_FORBIDDEN                                 = \\\"MlpManager: forbidden\\\";\\n\\n    /* ShortsTrack.sol*/\\n    string public constant SHORTSTRACKER_FORBIDDEN                              = \\\"ShortsTracker: forbidden\\\";\\n    string public constant SHORTSTRACKER_INVALID_HANDLER                        = \\\"ShortsTracker: invalid _handler\\\";\\n    string public constant SHORTSTRACKER_ALREADY_MIGRATED                       = \\\"ShortsTracker: already migrated\\\";\\n    string public constant SHORTSTRACKER_OVERFLOW                               = \\\"ShortsTracker: overflow\\\";\\n\\n    /* VaultUtils.sol*/\\n    string public constant VAULT_LOSSES_EXCEED_COLLATERAL                       = \\\"Vault: losses exceed collateral\\\";\\n    string public constant VAULT_FEES_EXCEED_COLLATERAL                         = \\\"Vault: fees exceed collateral\\\";\\n    string public constant VAULT_LIQUIDATION_FEES_EXCEED_COLLATERAL             = \\\"Vault: liquidation fees exceed collateral\\\";\\n    string public constant VAULT_MAXLEVERAGE_EXCEEDED                           = \\\"Vault: maxLeverage exceeded\\\";\\n\\n    /* VaultPriceFeed.sol*/\\n    string public constant VAULTPRICEFEED_FORBIDDEN                             = \\\"VaultPriceFeed: forbidden\\\";\\n    string public constant VAULTPRICEFEED_ADJUSTMENT_FREQUENCY_EXCEEDED         = \\\"VaultPriceFeed: adjustment frequency exceeded\\\";\\n    string public constant VAULTPRICEFEED_INVALID_ADJUSTMENTBPS                 = \\\"Vaultpricefeed: invalid _adjustmentBps\\\";\\n    string public constant VAULTPRICEFEED_INVALID_SPREADBASISPOINTS             = \\\"VaultPriceFeed: invalid _spreadBasisPoints\\\";\\n    string public constant VAULTPRICEFEED_INVALID_PRICESAMPLESPACE              = \\\"VaultPriceFeed: invalid _priceSampleSpace\\\";\\n    string internal constant VAULTPRICEFEED_INVALID_PRICE_FEED                  = \\\"VaultPriceFeed: invalid price feed\\\";\\n    string internal constant VAULTPRICEFEED_INVALID_PRICE                       = \\\"VaultPriceFeed: invalid price\\\";\\n    string internal constant CHAINLINK_FEEDS_ARE_NOT_BEING_UPDATED              = \\\"Chainlink feeds are not being updated\\\";\\n    string internal constant VAULTPRICEFEED_COULD_NOT_FETCH_PRICE               = \\\"VaultPriceFeed: could not fetch price\\\";\\n\\n    /* VaultInternal.sol*/\\n    string internal constant VAULT_POOLAMOUNT_EXCEEDED                          = \\\"Vault: poolAmount exceeded\\\";\\n    string internal constant VAULT_INSUFFICIENT_RESERVE                         = \\\"Vault: insufficient reserve\\\";\\n    string internal constant VAULT_MAX_SHORTS_EXCEEDED                          = \\\"Vault: max shorts exceeded\\\";\\n    string internal constant VAULT_POOLAMOUNT_BUFFER                            = \\\"Vault: poolAmount < buffer\\\";\\n    string internal constant VAULT_INVALID_ERRORCONTROLLER                      = \\\"Vault: invalid errorController\\\";\\n\\n    /* Router.sol */\\n    string internal constant ROUTER_INVALID_SENDER                              = \\\"Router: invalid sender\\\";\\n    string internal constant ROUTER_INVALID_PATH                                = \\\"Router: invalid _path\\\";\\n    string internal constant ROUTER_MARK_PRICE_HIGHER_THAN_LIMIT                = \\\"Router: mark price higher than limit\\\";\\n    string internal constant ROUTER_MARK_PRICE_LOWER_THAN_LIMIT                 = \\\"Router: mark price lower than limit\\\";\\n    string internal constant ROUTER_INVALID_PATH_LENGTH                         = \\\"Router: invalid _path.length\\\";\\n    string internal constant ROUTER_INSUFFICIENT_AMOUNTOUT                      = \\\"Router: insufficient amountOut\\\";\\n    string internal constant ROUTER_INVALID_PLUGIN                              = \\\"Router: invalid plugin\\\";\\n    string internal constant ROUTER_PLUGIN_NOT_APPROVED                         = \\\"Router: plugin not approved\\\";\\n\\n    /* OrderBook.sol*/\\n    string internal constant ORDERBOOK_FORBIDDEN                                = \\\"OrderBook: forbidden\\\";\\n    string internal constant ORDERBOOK_ALREADY_INITIALIZED                      = \\\"OrderBook: already initialized\\\";\\n    string internal constant ORDERBOOK_INVALID_SENDER                           = \\\"OrderBook: invalid sender\\\";\\n    string internal constant ORDERBOOK_INVALID_PATH_LENGTH                      = \\\"OrderBook: invalid _path.length\\\";\\n    string internal constant ORDERBOOK_INVALID_PATH                             = \\\"OrderBook: invalid _path\\\";\\n    string internal constant ORDERBOOK_INVALID_AMOUNTIN                         = \\\"OrderBook: invalid _amountIn\\\";\\n    string internal constant ORDERBOOK_INSUFFICIENT_EXECUTION_FEE               = \\\"OrderBook: insufficient execution fee\\\";\\n    string internal constant ORDERBOOK_ONLY_WETH_COULD_BE_WRAPPED               = \\\"OrderBook: only weth could be wrapped\\\";\\n    string internal constant ORDERBOOK_INCORRECT_VALUE_TRANSFERRED              = \\\"OrderBook: incorrect value transferred\\\";\\n    string internal constant ORDERBOOK_INCORRECT_EXECUTION_FEE_TRANSFERRED      = \\\"OrderBook: incorrect execution fee transferred\\\";\\n    string internal constant ORDERBOOK_NON_EXISTENT_ORDER                       = \\\"OrderBook: non-existent order\\\";\\n    string internal constant ORDERBOOK_INVALID_PRICE_FOR_EXECUTION              = \\\"OrderBook: invalid price for execution\\\";\\n    string internal constant ORDERBOOK_INSUFFICIENT_COLLATERAL                  = \\\"OrderBook: insufficient collateral\\\";\\n    string internal constant ORDERBOOK_INSUFFICIENT_AMOUNTOUT                   = \\\"OrderBook: insufficient amountOut\\\";\\n\\n    /* RewardRouterV2.sol */\\n    string internal constant REWARDROUTER_INVALID_AMOUNT                        = \\\"RewardRouter: invalid _amount\\\";\\n    string internal constant REWARDROUTER_INVALID_MSG_VALUE                     = \\\"RewardRouter: invalid msg.value\\\";\\n    string internal constant REWARDROUTER_ALREADY_INITIALIZED                   = \\\"RewardRouter: already initialized\\\";\\n    string internal constant REWARDROUTER_INVALID_MLPAMOUNT                     = \\\"RewardRouter: invalid _mlpAmount\\\";\\n    string internal constant REWARDROUTER_SENDER_HAS_VESTED_TOKENS              = \\\"RewardRouter: sender has vested tokens\\\";\\n    string internal constant REWARDROUTER_TRANSFER_NOT_SIGNALLED                = \\\"RewardRouter: transfer not signalled\\\";\\n    string internal constant REWARDROUTER_STAKEDMOLDTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0                      = \\\"RewardRouter: stakedMoldTracker.averageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_STAKEDMOLDTRACKER_CUMULATIVEREWARDS_GREATER_0                         = \\\"RewardRouter: stakedMoldTracker.cumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_BONUSMOLDTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0                       = \\\"RewardRouter: bonusMoldTracker.averageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_BONUSMOLDTRACKER_CUMULATIVEREWARDS_GREATER_0                          = \\\"RewardRouter: bonusMoldTracker.cumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_FEEMOLDTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0                         = \\\"RewardRouter: feeMoldTracker.averageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_FEEMOLDTRACKER_CUMULATIVEREWARDS_GREATER_0                            = \\\"RewardRouter: feeMoldTracker.cumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_MOLDVESTER_TRANSFERREDAVERAGESTAKEDAMOUNTS_GREATER_0                  = \\\"RewardRouter: MoldVester.transferredAverageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_MOLDVESTER_TRANSFERREDCUMULATIVEREWARDS_GREATER_0                     = \\\"RewardRouter: MoldVester.transferredCumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_STAKEDMLPTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0                       = \\\"RewardRouter: stakedMlpTracker.averageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_STAKEDMLPTRACKER_CUMULATIVEREWARDS_GREATER_0                          = \\\"RewardRouter: stakedMlpTracker.cumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_FEEMLPTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0                          = \\\"RewardRouter: feeMlpTracker.averageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_FEEMLPTRACKER_CUMULATIVEREWARDS_GREATER_0                             = \\\"RewardRouter: feeMlpTracker.cumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_MOLDVESTER_BALANCE_GREATER_0          = \\\"RewardRouter: MoldVester.balance > 0\\\";\\n    string internal constant REWARDROUTER_MLPVESTER_BALANCE_GREATER_0           = \\\"RewardRouter: MlpVester.balance > 0\\\";\\n\\n}\\n\",\"keccak256\":\"0x2d6c5a1032ea8a6b12bcb7fde4f03a3519d67086d21a2a9bf4ea541db73bdbc5\",\"license\":\"MIT\"},\"contracts/libraries/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nlibrary Events {\\n    /* BasePositionManager Events */\\n    event SetDepositFee(uint256 depositFee);\\n    event SetIncreasePositionBufferBps(uint256 increasePositionBufferBps);\\n    event SetReferralStorage(address referralStorage);\\n    event SetAdmin(address admin);\\n    event WithdrawFees(address token, address receiver, uint256 amount);\\n    event SetMaxGlobalSizes(address[] tokens, uint256[] longSizes, uint256[] shortSizes);\\n    event IncreasePositionReferral(address account, uint256 sizeDelta, uint256 marginFeeBasisPoints, bytes32 referralCode, address referrer);\\n    event DecreasePositionReferral(address account, uint256 sizeDelta, uint256 marginFeeBasisPoints, bytes32 referralCode, address referrer);\\n\\n    /*Position Manager Events*/\\n    event SetOrderKeeper(address indexed account, bool isActive);\\n    event SetLiquidator(address indexed account, bool isActive);\\n    event SetPartner(address account, bool isActive);\\n    event SetOpened(bool opened);\\n    event SetShouldValidateIncreaseOrder(bool shouldValidateIncreaseOrder);\\n\\n\\n    /* Orderbook.sol events */\\n    event CreateIncreaseOrder(address indexed account, uint256 orderIndex, address purchaseToken, uint256 purchaseTokenAmount, address collateralToken, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee);\\n    event CancelIncreaseOrder(address indexed account, uint256 orderIndex, address purchaseToken, uint256 purchaseTokenAmount, address collateralToken, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee);\\n    event ExecuteIncreaseOrder(address indexed account, uint256 orderIndex, address purchaseToken, uint256 purchaseTokenAmount, address collateralToken, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee, uint256 executionPrice);\\n    event UpdateIncreaseOrder(address indexed account, uint256 orderIndex, address collateralToken, address indexToken, bool isLong, uint256 sizeDelta, uint256 triggerPrice, bool triggerAboveThreshold);\\n    event CreateDecreaseOrder(address indexed account, uint256 orderIndex, address collateralToken, uint256 collateralDelta, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee);\\n    event CancelDecreaseOrder(address indexed account, uint256 orderIndex, address collateralToken, uint256 collateralDelta, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee);\\n    event ExecuteDecreaseOrder(address indexed account, uint256 orderIndex, address collateralToken, uint256 collateralDelta, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee, uint256 executionPrice);\\n    event UpdateDecreaseOrder(address indexed account, uint256 orderIndex, address collateralToken, uint256 collateralDelta, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold);\\n    event CreateSwapOrder(address indexed account, uint256 orderIndex, address[] path, uint256 amountIn, uint256 minOut, uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event CancelSwapOrder(address indexed account, uint256 orderIndex, address[] path, uint256 amountIn, uint256 minOut, uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event UpdateSwapOrder(address indexed account, uint256 ordexIndex, address[] path, uint256 amountIn, uint256 minOut, uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event ExecuteSwapOrder(address indexed account, uint256 orderIndex, address[] path, uint256 amountIn, uint256 minOut, uint256 amountOut, uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event Initialize(address router, address vault, address weth, address usdm, uint256 minExecutionFee, uint256 minPurchaseTokenAmountUsd);\\n    event UpdateMinExecutionFee(uint256 minExecutionFee);\\n    event UpdateMinPurchaseTokenAmountUsd(uint256 minPurchaseTokenAmountUsd);\\n    event UpdateGov(address gov);\\n\\n    /* Router.sol events*/\\n    event Swap(address account, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);\\n\\n    /* ShortsTracker.sol events*/\\n    event GlobalShortDataUpdated(address indexed token, uint256 globalShortSize, uint256 globalShortAveragePrice);\\n\\n    /* Vault.sol events */\\n    event BuyUSDM(address account, address token, uint256 tokenAmount, uint256 usdmAmount, uint256 feeBasisPoints);\\n    event SellUSDM(address account, address token, uint256 usdmAmount, uint256 tokenAmount, uint256 feeBasisPoints);\\n    event Swap(address account, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut, uint256 amountOutAfterFees, uint256 feeBasisPoints);\\n    event IncreasePosition(bytes32 key, address account, address collateralToken, address indexToken, uint256 collateralDelta, uint256 sizeDelta, bool isLong, uint256 price, uint256 fee);\\n    event DecreasePosition(bytes32 key, address account, address collateralToken, address indexToken, uint256 collateralDelta, uint256 sizeDelta, bool isLong, uint256 price, uint256 fee);\\n    event LiquidatePosition(bytes32 key, address account, address collateralToken, address indexToken, bool isLong, uint256 size, uint256 collateral, uint256 reserveAmount, int256 realisedPnl, uint256 markPrice);\\n    event UpdatePosition(bytes32 key, uint256 size, uint256 collateral, uint256 averagePrice, uint256 entryFundingRate, uint256 reserveAmount, int256 realisedPnl, uint256 markPrice);\\n    event ClosePosition(bytes32 key, uint256 size, uint256 collateral, uint256 averagePrice, uint256 entryFundingRate, uint256 reserveAmount, int256 realisedPnl);\\n    event UpdateFundingRate(address token, uint256 fundingRate);\\n    event UpdatePnl(bytes32 key, bool hasProfit, uint256 delta);\\n    event CollectSwapFees(address token, uint256 feeUsd, uint256 feeTokens);\\n    event CollectMarginFees(address token, uint256 feeUsd, uint256 feeTokens);\\n    event DirectPoolDeposit(address token, uint256 amount);\\n    event IncreasePoolAmount(address token, uint256 amount);\\n    event DecreasePoolAmount(address token, uint256 amount);\\n    event IncreaseUsdmAmount(address token, uint256 amount);\\n    event DecreaseUsdmAmount(address token, uint256 amount);\\n    event IncreaseReservedAmount(address token, uint256 amount);\\n    event DecreaseReservedAmount(address token, uint256 amount);\\n    event IncreaseGuaranteedUsd(address token, uint256 amount);\\n    event DecreaseGuaranteedUsd(address token, uint256 amount);\\n\\n    /* Timelock.sol events */\\n    event SignalPendingAction(bytes32 action);\\n    event SignalApprove(address token, address spender, uint256 amount, bytes32 action);\\n    event SignalWithdrawToken(address target, address token, address receiver, uint256 amount, bytes32 action);\\n    event SignalMint(address token, address receiver, uint256 amount, bytes32 action);\\n    event SignalSetGov(address target, address gov, bytes32 action);\\n    event SignalSetHandler(address target, address handler, bool isActive, bytes32 action);\\n    event SignalSetPriceFeed(address vault, address priceFeed, bytes32 action);\\n    event SignalRedeemUsdm(address vault, address token, uint256 amount);\\n    event SignalVaultSetTokenConfig(address vault, address token, uint256 tokenDecimals, uint256 tokenWeight, uint256 minProfitBps, uint256 maxUsdmAmount, bool isStable, bool isShortable);\\n    event ClearAction(bytes32 action);\\n\\n    /* MlpManager.sol */\\n    event AddLiquidity(address account, address token, uint256 amount, uint256 aumInUsdm, uint256 mlpSupply, uint256 usdmAmount, uint256 mintAmount);\\n    event RemoveLiquidity(address account, address token, uint256 mlpAmount, uint256 aumInUsdm, uint256 mlpSupply, uint256 usdmAmount, uint256 amountOut);\\n\\n    /* RewardRouterV2 */\\n    event StakeMold(address account, address token, uint256 amount);\\n    event UnstakeMold(address account, address token, uint256 amount);\\n    event StakeMlp(address account, uint256 amount);\\n    event UnstakeMlp(address account, uint256 amount);\\n}\\n\",\"keccak256\":\"0x555bd8706eac18f05cbc296299b1379465408d2040130886612e55bbddbb7179\",\"license\":\"MIT\"},\"contracts/libraries/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x41b0da7db3e1f79b338824fed2bc4732430b78002a9d51c2cfa86ad5a12c2763\",\"license\":\"MIT\"},\"contracts/libraries/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa3ce253082421a9e79d2b884ae6f60507b0cc73ea356674072091454c44cc556\",\"license\":\"MIT\"},\"contracts/libraries/token/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../math/SafeMath.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf80766b21ea67a73c81e0dea4543375243938c8b223e29c5d783be61ab3f424c\",\"license\":\"MIT\"},\"contracts/libraries/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1845481964ebacf35afe1a006fa574793b52e698eba0a8db6e3d30202bc45429\",\"license\":\"MIT\"},\"contracts/libraries/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xae7a1e407ed171ecd3a0d3976875d6c58eefdccf831ebce6314ec94892dffc03\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IUSDM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IUSDM {\\n    function addVault(address _vault) external;\\n    function removeVault(address _vault) external;\\n    function mint(address _account, uint256 _amount) external;\\n    function burn(address _account, uint256 _amount) external;\\n}\",\"keccak256\":\"0xcb6b3709bf056f0f19c58784d749f623be30eac4add2c3866918763803d164ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526207a120600b556032600c556014600d55601e600e819055600f556004601055600a601155610e106012556016805462ffffff60201b1963ffff00001961ff001960ff1990931660011792909216610100179190911663010000001716905534801561006f57600080fd5b506001600081905580546001600160a01b03191633179055615f3180620000976000396000f3fe608060405234801561001057600080fd5b50600436106106b45760003560e01c80638a27d46811610371578063d2fa635e116101d3578063e124e6d21161010f578063f2555278116100ad578063fa12dbc011610087578063fa12dbc014611605578063fbfded6d14611637578063fdaf6ac314611665578063fed1a606146116a9576106b4565b8063f2555278146115a9578063f3ae2415146115d7578063f887ea40146115fd576106b4565b8063ee138d0f116100e9578063ee138d0f14611530578063efa10a6e14611538578063f07456ce14611564578063f07bbf771461158a576106b4565b8063e124e6d2146114c7578063e468baf0146114ed578063e67f59a71461150a576106b4565b8063da76524c1161017c578063db97495f11610156578063db97495f14611423578063dc8f5fac1461146f578063de2ea94814611477578063df73a267146114bf576106b4565b8063da76524c1461138d578063daf9c210146113d7578063db3555fb146113fd576106b4565b8063d54d5a9f116101ad578063d54d5a9f14611300578063d8f897c31461135f578063d9ac422514611385576106b4565b8063d2fa635e1461129a578063d3127e63146112b7578063d45200d1146112d4576106b4565b8063a42ab3d2116102ad578063b1cc53ab1161024b578063c65bc7b111610225578063c65bc7b1146111d8578063c7e074c3146111fe578063cea0c3281461123e578063cfad57a214611274576106b4565b8063b1cc53ab14611172578063c3c7b9e9146111aa578063c4f718bf146111d0576106b4565b8063ab08c1c611610287578063ab08c1c614611134578063ab2f3ad41461113c578063ae3302c214611162578063b06423f31461116a576106b4565b8063a42ab3d2146110b4578063a5e90eee146110e0578063a93acac21461110e576106b4565b80639698d25a1161031a5780639acc6b33116102f45780639acc6b331461104c5780639d7432ca146110725780639f392eb3146110a4578063a22f2392146110ac576106b4565b80639698d25a14610ff25780639849e412146110185780639899cd0214611020576106b4565b80638f7b84041161034b5780638f7b840414610f8c5780639060b1ca14610fb25780639331621214610fba576106b4565b80638a27d46814610f175780638a78daa814610f405780638ee573ac14610f66576106b4565b806348f35cbb1161051a5780636abbe0c8116104565780637c2eb9f7116103f457806383867b2d116103ce57806383867b2d14610e715780638585f4d214610e9757806386284f5f14610ec357806388b1fbdf14610ef1576106b4565b80637c2eb9f714610dd857806381a612d614610df757806382a0849014610e1d576106b4565b8063724e78da11610430578063724e78da14610d5a578063728cdbca14610d80578063741bef1a14610dc85780637a210a2b14610dd0576106b4565b80636abbe0c814610d065780636ae0b15414610d0e57806371089f4d14610d34576106b4565b8063529a356f116104c35780635f7bc1191161049d5780635f7bc11914610c845780636092219914610caa57806362287a3214610cd85780636274980314610ce0576106b4565b8063529a356f14610bdd57806352f55eed14610c035780635c07eaab14610c29576106b4565b80634d47b304116104f45780634d47b30414610b5a578063514ea4bf14610b62578063523fba7f14610bb7576106b4565b806348f35cbb14610aab5780634a3f088d14610ab35780634a993ee914610b34576106b4565b80632d4b0576116105f45780633de39c1111610592578063421528731161056c57806342152873146109df57806342b60b0314610a135780634453a37414610a3957806348d91abf14610a67576106b4565b80633de39c111461097e5780633e72a2621461098657806340eb38021461098e576106b4565b8063351a964d116105ce578063351a964d146108fa57806337af6e7e14610902578063392e53cd146109285780633c5a6e3514610930576106b4565b80632d4b05761461089557806330455ede146108d3578063318bc689146108f2576106b4565b8063174d26941161066157806324b0c04d1161063b57806324b0c04d146107ab57806324ca984e146107cc57806328e67be5146107f25780632c668ec114610869576106b4565b8063174d269414610761578063181e210e146107695780631ce9cb8f14610785576106b4565b806310eb56c21161069257806310eb56c21461072d57806312d43a5114610735578063134ca63b14610759576106b4565b80630842b076146106b95780630928a4f8146106d35780630a48d5a914610701575b600080fd5b6106c161173b565b60408051918252519081900360200190f35b6106c1600480360360408110156106e957600080fd5b506001600160a01b0381358116916020013516611741565b6106c16004803603604081101561071757600080fd5b506001600160a01b038135169060200135611a22565b6106c1611a7b565b61073d611a81565b604080516001600160a01b039092168252519081900360200190f35b6106c1611a90565b6106c1611a96565b610771611a9c565b604080519115158252519081900360200190f35b6106c16004803603602081101561079b57600080fd5b50356001600160a01b0316611aaf565b6107ca600480360360208110156107c157600080fd5b50351515611ac1565b005b6107ca600480360360208110156107e257600080fd5b50356001600160a01b0316611aeb565b6107ca6004803603604081101561080857600080fd5b8135919081019060408101602082013564010000000081111561082a57600080fd5b82018360208201111561083c57600080fd5b8035906020019184600183028401116401000000008311171561085e57600080fd5b509092509050611b1c565b6106c16004803603604081101561087f57600080fd5b506001600160a01b038135169060200135611c07565b6106c1600480360360808110156108ab57600080fd5b506001600160a01b038135811691602081013582169160408201351690606001351515611c4d565b6107ca600480360360208110156108e957600080fd5b50351515611ca8565b6106c1611cc3565b610771611cc9565b6106c16004803603602081101561091857600080fd5b50356001600160a01b0316611cd2565b610771611d94565b6107ca600480360360e081101561094657600080fd5b506001600160a01b038135169060208101359060408101359060608101359060808101359060a081013515159060c001351515611da4565b6106c1611ee8565b610771611eee565b6107ca60048036036101208110156109a557600080fd5b5080359060208101359060408101359060608101359060808101359060a08101359060c08101359060e08101359061010001351515611efc565b6106c1600480360360608110156109f557600080fd5b508035906001600160a01b0360208201358116916040013516611fc0565b61077160048036036020811015610a2957600080fd5b50356001600160a01b0316612062565b6107ca60048036036040811015610a4f57600080fd5b506001600160a01b0381351690602001351515612077565b6107ca600480360360a0811015610a7d57600080fd5b506001600160a01b0381358116916020810135821691604082013516906060810135906080013515156120aa565b61073d612513565b610af160048036036080811015610ac957600080fd5b506001600160a01b038135811691602081013582169160408201351690606001351515612522565b604080519889526020890197909752878701959095526060870193909352608086019190915260a0850152151560c084015260e083015251908190036101000190f35b6106c160048036036020811015610b4a57600080fd5b50356001600160a01b0316612618565b6106c161262a565b610b7f60048036036020811015610b7857600080fd5b5035612630565b604080519788526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b6106c160048036036020811015610bcd57600080fd5b50356001600160a01b031661266d565b61077160048036036020811015610bf357600080fd5b50356001600160a01b031661267f565b6106c160048036036020811015610c1957600080fd5b50356001600160a01b0316612694565b610c69600480360360a0811015610c3f57600080fd5b506001600160a01b03813516906020810135906040810135906060810135151590608001356126a6565b60408051921515835260208301919091528051918290030190f35b6107ca60048036036020811015610c9a57600080fd5b50356001600160a01b031661279e565b61077160048036036040811015610cc057600080fd5b506001600160a01b0381358116916020013516612893565b6106c16128b3565b6106c160048036036020811015610cf657600080fd5b50356001600160a01b03166128b9565b61073d6128cb565b6107ca60048036036020811015610d2457600080fd5b50356001600160a01b03166128e1565b6107ca60048036036020811015610d4a57600080fd5b50356001600160a01b031661290f565b6107ca60048036036020811015610d7057600080fd5b50356001600160a01b0316612958565b6107ca600480360360c0811015610d9657600080fd5b506001600160a01b03813581169160208101358216916040820135169060608101359060808101359060a00135612982565b61073d612a24565b6106c1612a33565b6107ca60048036036020811015610dee57600080fd5b50351515612a39565b6106c160048036036020811015610e0d57600080fd5b50356001600160a01b0316612a5b565b6106c1600480360360e0811015610e3357600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359160808201359160a081013515159160c09091013516612b0f565b6106c160048036036020811015610e8757600080fd5b50356001600160a01b0316612b9f565b6107ca60048036036040811015610ead57600080fd5b506001600160a01b038135169060200135612bb1565b6106c160048036036040811015610ed957600080fd5b506001600160a01b0381358116916020013516612bd5565b6106c160048036036020811015610f0757600080fd5b50356001600160a01b0316612ef4565b6107ca60048036036060811015610f2d57600080fd5b5080359060208101359060400135612f06565b6106c160048036036020811015610f5657600080fd5b50356001600160a01b0316612f1c565b6106c160048036036020811015610f7c57600080fd5b50356001600160a01b0316612f2e565b6107ca60048036036020811015610fa257600080fd5b50356001600160a01b0316612f40565b610771612f6a565b6106c160048036036060811015610fd057600080fd5b506001600160a01b038135811691602081013582169160409091013516612f7c565b6106c16004803603602081101561100857600080fd5b50356001600160a01b0316613294565b6106c16132a6565b6106c16004803603604081101561103657600080fd5b506001600160a01b0381351690602001356132ac565b6106c16004803603602081101561106257600080fd5b50356001600160a01b03166132ce565b6106c16004803603606081101561108857600080fd5b506001600160a01b0381351690602081013590604001356132e0565b610771613389565b6106c1613398565b6106c1600480360360408110156110ca57600080fd5b506001600160a01b03813516906020013561339e565b6107ca600480360360408110156110f657600080fd5b506001600160a01b03813516906020013515156133bb565b6106c16004803603602081101561112457600080fd5b50356001600160a01b03166133ee565b6107716134ec565b6106c16004803603602081101561115257600080fd5b50356001600160a01b03166134fc565b6106c161350e565b610771613514565b6106c16004803603606081101561118857600080fd5b506001600160a01b038135811691602081013590911690604001351515613525565b6106c1600480360360208110156111c057600080fd5b50356001600160a01b03166135d9565b6106c16135eb565b6106c1600480360360208110156111ee57600080fd5b50356001600160a01b03166135f1565b6106c1600480360360a081101561121457600080fd5b506001600160a01b0381351690602081013590604081013590606081013590608001351515613602565b6107ca6004803603606081101561125457600080fd5b506001600160a01b038135811691602081013590911690604001356136c5565b6107ca6004803603602081101561128a57600080fd5b50356001600160a01b03166136e6565b6107ca600480360360208110156112b057600080fd5b5035613710565b6107ca600480360360208110156112cd57600080fd5b503561371d565b6107ca600480360360408110156112ea57600080fd5b506001600160a01b038135169060200135613739565b611346600480360360a081101561131657600080fd5b506001600160a01b0381358116916020810135821691604082013516906060810135151590608001351515613792565b6040805192835260208301919091528051918290030190f35b6106c16004803603602081101561137557600080fd5b50356001600160a01b0316613862565b6106c1613874565b6106c1600480360360c08110156113a357600080fd5b506001600160a01b038135811691602081013582169160408201351690606081013515159060808101359060a0013561387a565b610771600480360360208110156113ed57600080fd5b50356001600160a01b0316613947565b6107716004803603602081101561141357600080fd5b50356001600160a01b031661395c565b6106c1600480360360e081101561143957600080fd5b506001600160a01b0381351690602081013590604081013590606081013515159060808101359060a08101359060c00135613971565b6106c1613a04565b6107ca600480360360a081101561148d57600080fd5b506001600160a01b03813581169160208101358216916040820135811691606081013515159160809091013516613a0a565b6106c1613e0a565b6106c1600480360360208110156114dd57600080fd5b50356001600160a01b0316613e10565b61073d6004803603602081101561150357600080fd5b5035613e91565b6107ca6004803603602081101561152057600080fd5b50356001600160a01b0316613eb8565b61073d613f8d565b6107ca6004803603604081101561154e57600080fd5b506001600160a01b038135169060200135613f9c565b6106c16004803603602081101561157a57600080fd5b50356001600160a01b0316613fc0565b6107ca600480360360208110156115a057600080fd5b50351515613fd2565b6106c1600480360360408110156115bf57600080fd5b506001600160a01b0381358116916020013516613ffe565b610771600480360360208110156115ed57600080fd5b50356001600160a01b0316614054565b61073d614069565b6106c16004803603606081101561161b57600080fd5b506001600160a01b038135169060208101359060400135614078565b6107ca6004803603604081101561164d57600080fd5b506001600160a01b03813581169160200135166140b2565b6106c1600480360360a081101561167b57600080fd5b506001600160a01b0381358116916020810135821691604082013516906060810135151590608001356142a1565b6116c6600480360360208110156116bf57600080fd5b5035614330565b6040805160208082528351818301528351919283929083019185019080838360005b838110156117005781810151838201526020016116e8565b50505050905090810190601f16801561172d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b602b5490565b60006002600054141561179b576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000556117a86143cb565b6001600160a01b0383166000908152602c60205260409020546117cf9060ff1660136143ff565b6016805464ff0000000019166401000000001790556003546000906117fc906001600160a01b03166144ab565b905061180c6000821160146143ff565b61181684856140b2565b60006118228583611c07565b90506118326000821160156143ff565b61183c8583614558565b611846858261463a565b600354604080517f9dc29fac0000000000000000000000000000000000000000000000000000000081523060048201526024810185905290516001600160a01b0390921691639dc29fac9160448082019260009290919082900301818387803b1580156118b257600080fd5b505af11580156118c6573d6000803e3d6000fd5b50506003546118e092506001600160a01b03169050614710565b601654604080517f4355218c0000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152602482018690529151600093600160381b900490921691634355218c91604480820192602092909190829003018186803b15801561195757600080fd5b505afa15801561196b573d6000803e3d6000fd5b505050506040513d602081101561198157600080fd5b5051905060006119928784846147ab565b90506119a26000821160166143ff565b6119ad878288614873565b604080516001600160a01b03808916825289166020820152808201869052606081018390526080810184905290517f52eb5f5cb9a498f7cf35a2e264fbe42a9401185a0fd345d5d2c8932a2a45b1ae9181900360a00190a16016805464ff000000001916905560016000559695505050505050565b600081611a3157506000611a75565b6000611a3c84612a5b565b6001600160a01b038516600090815260276020526040902054909150611a70600a82900a611a6a868561491a565b90614973565b925050505b92915050565b600d5481565b6001546001600160a01b031681565b60075481565b60055481565b6016546601000000000000900460ff1681565b60226020526000908152604090205481565b611ac96149b5565b60168054911515650100000000000265ff000000000019909216919091179055565b3360009081526018602090815260408083206001600160a01b0394909416835292905220805460ff19166001179055565b60175460408051808201909152601e81527f5661756c743a20696e76616c6964206572726f72436f6e74726f6c6c657200006020820152906001600160a01b03163314611be75760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611bac578181015183820152602001611b94565b50505050905090810190601f168015611bd95780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838152602660205260409020611c01908383615dba565b50505050565b600080611c1384613e10565b90506000611c3282611a6a866c0c9f2c9cd04674edea4000000061491a565b600354909150611a709082906001600160a01b031687611fc0565b604080516bffffffffffffffffffffffff19606096871b811660208084019190915295871b811660348301529390951b9092166048850152151560f81b605c8401528051603d818503018152605d9093019052815191012090565b611cb06149b5565b6016805460ff1916911515919091179055565b60115481565b60165460ff1681565b600080600360009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d2357600080fd5b505afa158015611d37573d6000803e3d6000fd5b505050506040513d6020811015611d4d57600080fd5b5051905080611d60576000915050611d8f565b6001600160a01b038316600090815260296020526040902054602a54611d8a90611a6a838561491a565b925050505b919050565b600154600160a01b900460ff1681565b611dac6149b5565b6001600160a01b0387166000908152602c602052604090205460ff16611e2957601354611dda9060016149ce565b601355602b80546001810182556000919091527f11c44e4875b74d31ff9fd779bf2566af7bd15b87fc985d01f5094b89e3669e4f0180546001600160a01b0319166001600160a01b0389161790555b602a546001600160a01b038816600090815260296020526040902054611e50908290614a28565b6001600160a01b0389166000908152602c602090815260408083208054600160ff1991821617909155602783528184208c9055602983528184208b9055601b83528184208a9055602e8352818420899055601c835281842080548216891515179055601d90925290912080549091168415151790559050611ed181876149ce565b602a55611edd88613e10565b505050505050505050565b60145481565b601654610100900460ff1681565b611f046149b5565b611f146101f48a111560036143ff565b611f246101f489111560046143ff565b611f346101f488111560056143ff565b611f446101f487111560066143ff565b611f546101f486111560076143ff565b611f646101f485111560086143ff565b611f806d04ee2d6d415b85acef810000000084111560096143ff565b600c98909855600d96909655600e94909455600f9290925560105560115560055560155560168054911515620100000262ff000019909216919091179055565b60035460009081906001600160a01b03858116911614611ff8576001600160a01b038416600090815260276020526040902054611ffb565b60125b6003549091506000906001600160a01b03858116911614612034576001600160a01b038416600090815260276020526040902054612037565b60125b905061205682600a0a611a6a83600a0a8961491a90919063ffffffff16565b925050505b9392505050565b601c6020526000908152604090205460ff1681565b61207f6149b5565b6001600160a01b03919091166000908152601960205260409020805460ff1916911515919091179055565b60026000541415612102576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260005560165461211d90610100900460ff16601c6143ff565b612125614a6a565b61212e85614a86565b612139848483614ae9565b601654604080517f9d5c28fa0000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152878116602483015286811660448301526064820186905284151560848301529151600160381b90930490911691639d5c28fa9160a480820192600092909190829003018186803b1580156121c657600080fd5b505afa1580156121da573d6000803e3d6000fd5b505050506121e884846140b2565b60006121f686868685611c4d565b60008181526008602052604081209192508361221a5761221586612a5b565b612223565b61222386613e10565b825490915061223457600282018190555b8154158015906122445750600085115b1561226a57612264868360000154846002015487858a8860060154613971565b60028301555b6000612283898989888a88600001548960030154614bff565b90506000612290896144ab565b9050600061229e8a83611a22565b60018601549091506122b090826149ce565b600186018190556122c590841115601d6143ff565b60018501546122d49084614a28565b60018601556122e48a8a89613525565b600386015584546122f590896149ce565b80865542600687015561230b901515601e6143ff565b61231d85600001548660010154614ccd565b61232b8b8b8b8a6001613792565b505060006123398b8a61339e565b600487015490915061234b90826149ce565b600487015561235a8b82614cf1565b871561239f576123738b61236e8b876149ce565b614d91565b61237d8b83614e10565b6123878b84614e8f565b61239a8b6123958d876132ac565b61463a565b61240b565b6001600160a01b038a166000908152602360205260409020546123dc576001600160a01b038a166000908152602460205260409020859055612401565b6123e78a868b6132e0565b6001600160a01b038b166000908152602460205260409020555b61240b8a8a614fa7565b604080518881526001600160a01b03808f166020830152808e16828401528c1660608201526080810184905260a081018b905289151560c082015260e08101879052610100810186905290517f2fe68525253654c21998f35787a8d0f361905ef647c854092430ab65f2f15022918190036101200190a1855460018701546002880154600389015460048a015460058b0154604080518e81526020810197909752868101959095526060860193909352608085019190915260a084015260c083015260e08201879052517f20853733b590dce729d9f4628682ebd9a34d2354e72679e66f43a008fc03b773918190036101000190a15050600160005550505050505050505050565b6017546001600160a01b031681565b600080600080600080600080600061253c8d8d8d8d611c4d565b9050612546615e38565b600860008381526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152505090506000808260a00151136125c6578160a001516000036125cc565b8160a001515b9050816000015182602001518360400151846060015185608001518560008860a0015112158860c001519a509a509a509a509a509a509a509a5050505094995094995094999196509450565b601e6020526000908152604090205481565b600e5481565b6008602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949593949293919290919087565b60286020526000908152604090205481565b60196020526000908152604090205460ff1681565b60096020526000908152604090205481565b6000806126b76000861160266143ff565b6000846126cc576126c788613e10565b6126d5565b6126d588612a5b565b905060008187116126ef576126ea8288614a28565b6126f9565b6126f98783614a28565b9050600061270b88611a6a8b8561491a565b90506000871561271e5750878311612723565b508288115b600061273a601554896149ce90919063ffffffff16565b421161275e576001600160a01b038c166000908152601b6020526040902054612761565b60005b905081801561278457506127758b8261491a565b6127818461271061491a565b11155b1561278e57600092505b509a909950975050505050505050565b600260005414156127f6576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260009081556001600160a01b0382168152602c60205260409020546128219060ff16600e6143ff565b600061282c826144ab565b905061283c60008211600f6143ff565b6128468282614e8f565b604080516001600160a01b03841681526020810183905281517fa5a389190ebf6170a133bda5c769b77f4d6715b8aa172ec0ddf8473d0b4944bd929181900390910190a150506001600055565b601860209081526000928352604080842090915290825290205460ff1681565b60135481565b60246020526000908152604090205481565b601654600160381b90046001600160a01b031681565b3360009081526018602090815260408083206001600160a01b0394909416835292905220805460ff19169055565b6129176149b5565b601680546001600160a01b03909216600160381b027fffffffffff0000000000000000000000000000000000000000ffffffffffffff909216919091179055565b6129606149b5565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b61298a6149b5565b6129a5600160149054906101000a900460ff161560016143ff565b60018054600160a01b7fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909116179055600280546001600160a01b03199081166001600160a01b039889161790915560038054821696881696909617909555600480549095169390951692909217909255600591909155600655600755565b6004546001600160a01b031681565b600c5481565b612a416149b5565b601680549115156101000261ff0019909216919091179055565b60048054601654604080516317e1d38560e11b81526001600160a01b038681169582019590955260006024820181905260ff63010000008504811615156044840152640100000000909404909316151560648201529051919390921691632fc3a70a916084808301926020929190829003018186803b158015612add57600080fd5b505afa158015612af1573d6000803e3d6000fd5b505050506040513d6020811015612b0757600080fd5b505192915050565b600060026000541415612b69576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600055612b76614a6a565b612b7f88614a86565b612b8e888888888888886150a0565b600160005598975050505050505050565b602d6020526000908152604090205481565b612bb96149b5565b6001600160a01b039091166000908152601e6020526040902055565b600060026000541415612c2f576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600055612c3c6143cb565b6001600160a01b0383166000908152602c6020526040902054612c639060ff1660106143ff565b6016805464ff0000000019166401000000001790556000612c83846144ab565b9050612c936000821160116143ff565b612c9d84856140b2565b6000612ca885612a5b565b90506000612cc76c0c9f2c9cd04674edea40000000611a6a858561491a565b600354909150612ce390829088906001600160a01b0316611fc0565b9050612cf36000821160126143ff565b601654604080517f78f15db80000000000000000000000000000000000000000000000000000000081526001600160a01b038981166004830152602482018590529151600093600160381b9004909216916378f15db891604480820192602092909190829003018186803b158015612d6a57600080fd5b505afa158015612d7e573d6000803e3d6000fd5b505050506040513d6020811015612d9457600080fd5b505190506000612da58886846147ab565b90506000612dc46c0c9f2c9cd04674edea40000000611a6a848861491a565b600354909150612de09082908b906001600160a01b0316611fc0565b9050612dec898261557c565b612df68983614e8f565b600354604080517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b038b8116600483015260248201859052915191909216916340c10f1991604480830192600092919082900301818387803b158015612e6457600080fd5b505af1158015612e78573d6000803e3d6000fd5b5050604080516001600160a01b03808d1682528d1660208201528082018a9052606081018590526080810187905290517f2de7e0046c51567d81afaeb29981b87a4470ca1496850cdae633a300d1f9be5193509081900360a0019150a16016805464ff0000000019169055600160005598975050505050505050565b601b6020526000908152604090205481565b612f0e6149b5565b601292909255600655600755565b60236020526000908152604090205481565b60276020526000908152604090205481565b612f486149b5565b601780546001600160a01b0319166001600160a01b0392909216919091179055565b60165465010000000000900460ff1681565b600060026000541415612fd6576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600055601654612fec9060ff1660176143ff565b6001600160a01b0384166000908152602c60205260409020546130139060ff1660186143ff565b6001600160a01b0383166000908152602c602052604090205461303a9060ff1660196143ff565b61305a836001600160a01b0316856001600160a01b03161415601a6143ff565b6016805464ff00000000191664010000000017905561307984806140b2565b61308383846140b2565b600061308e856144ab565b905061309e60008211601b6143ff565b60006130a986612a5b565b905060006130b686613e10565b905060006130c882611a6a868661491a565b90506130d5818989611fc0565b905060006130f46c0c9f2c9cd04674edea40000000611a6a878761491a565b6003549091506131109082908b906001600160a01b0316611fc0565b601654604080517fda1338160000000000000000000000000000000000000000000000000000000081526001600160a01b038d811660048301528c81166024830152604482018590529151939450600093600160381b9093049091169163da13381691606480820192602092909190829003018186803b15801561319357600080fd5b505afa1580156131a7573d6000803e3d6000fd5b505050506040513d60208110156131bd57600080fd5b5051905060006131ce8a85846147ab565b90506131da8b8461557c565b6131e48a84614558565b6131ee8b88614e8f565b6131f88a8561463a565b6132018a61563a565b61320c8a828b614873565b604080516001600160a01b03808c168252808e1660208301528c1681830152606081018990526080810186905260a0810183905260c0810184905290517f0874b2d545cb271cdbda4e093020c452328b24af12382ed62c4d00f5c26709db9181900360e00190a16016805464ff000000001916905560016000559a9950505050505050505050565b60256020526000908152604090205481565b60125481565b6000816132bb57506000611a75565b61205b83836132c986613e10565b614078565b602e6020526000908152604090205481565b6001600160a01b03831660009081526023602090815260408083205460249092528220548285821161331b576133168683614a28565b613325565b6133258287614a28565b9050600061333783611a6a868561491a565b9050868311600061334886896149ce565b90506000826133605761335b82856149ce565b61336a565b61336a8285614a28565b905061337a81611a6a8c8561491a565b9b9a5050505050505050505050565b60165462010000900460ff1681565b600f5481565b6000816133ad57506000611a75565b61205b83836132c986612a5b565b6133c36149b5565b6001600160a01b03919091166000908152601a60205260409020805460ff1916911515919091179055565b6012546001600160a01b03821660009081526021602052604081205490914291613417916149ce565b111561342557506000611d8f565b6012546001600160a01b038316600090815260216020526040812054909161345291611a6a904290614a28565b6001600160a01b0384166000908152600960205260409020549091508061347e57600092505050611d8f565b6001600160a01b0384166000908152601c602052604081205460ff166134a6576006546134aa565b6007545b6001600160a01b0386166000908152600a60205260409020549091506134e3908390611a6a9086906134dd90869061491a565b9061491a565b95945050505050565b6016546301000000900460ff1681565b60296020526000908152604090205481565b600b5481565b601654640100000000900460ff1681565b601654604080517fb1cc53ab0000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152858116602483015284151560448301529151600093600160381b90049092169163b1cc53ab91606480820192602092909190829003018186803b1580156135a557600080fd5b505afa1580156135b9573d6000803e3d6000fd5b505050506040513d60208110156135cf57600080fd5b5051949350505050565b600a6020526000908152604090205481565b60065481565b602080526000908152604090205481565b601654604080517fc7e074c30000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015260248201889052604482018790526064820186905284151560848301529151600093600160381b90049092169163c7e074c39160a480820192602092909190829003018186803b15801561368f57600080fd5b505afa1580156136a3573d6000803e3d6000fd5b505050506040513d60208110156136b957600080fd5b50519695505050505050565b6136cd6149b5565b6136e16001600160a01b03831684836156dd565b505050565b6136ee6149b5565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6137186149b5565b601455565b6137256149b5565b613734612710821160026143ff565b600b55565b6137416149b5565b6001600160a01b0382166000908152602d60205260409020548082111561377b57613775836137708484614a28565b61557c565b5061378e565b6136e1836137898385614a28565b614558565b5050565b601654604080517fd54d5a9f0000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152878116602483015286811660448301528515156064830152841515608483015282516000948594600160381b9091049092169263d54d5a9f9260a4808301939192829003018186803b15801561382157600080fd5b505afa158015613835573d6000803e3d6000fd5b505050506040513d604081101561384b57600080fd5b508051602090910151909890975095505050505050565b60216020526000908152604090205481565b60155481565b601654604080517fda76524c0000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301528881166024830152878116604483015286151560648301526084820186905260a482018590529151600093600160381b90049092169163da76524c9160c480820192602092909190829003018186803b15801561391057600080fd5b505afa158015613924573d6000803e3d6000fd5b505050506040513d602081101561393a57600080fd5b5051979650505050505050565b602c6020526000908152604090205460ff1681565b601d6020526000908152604090205460ff1681565b60008060006139838a8a8a8a886126a6565b909250905060006139948a876149ce565b9050600088156139c357836139b2576139ad8284614a28565b6139bc565b6139bc82846149ce565b90506139e4565b836139d7576139d282846149ce565b6139e1565b6139e18284614a28565b90505b6139f281611a6a8a8561491a565b9450505050505b979650505050505050565b602a5481565b60026000541415613a62576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000556016546601000000000000900460ff1615613a9a5733600090815260196020526040902054613a9a9060ff1660226143ff565b6016805463ff00000019169055613ab184846140b2565b6000613abf86868686611c4d565b9050613ac9615e38565b50600081815260086020908152604091829020825160e08101845281548082526001830154938201939093526002820154938101939093526003810154606084015260048101546080840152600581015460a08401526006015460c0830152613b3590151560236143ff565b600080613b46898989896000613792565b91509150613b59826000141560246143ff565b8160021415613b9457613b76898989600087600001518b8f6150a0565b50506016805463ff0000001916630100000017905550613dfe915050565b6000613ba089836132ac565b6001600160a01b038a16600090815260226020526040902054909150613bc690826149ce565b6001600160a01b038a1660008181526022602090815260409182902093909355805191825291810184905280820183905290517f5d0c0019d3d45fadeb74eff9d2c9924d146d000ac6bcf3c28bf0ac3c9baa011a9181900360600190a1613c3189856080015161575d565b8615613c605760208401518451613c52918b91613c4d91614a28565b614e10565b613c60896123958b856132ac565b600087613c7557613c7089613e10565b613c7e565b613c7e89612a5b565b90507f2e1f85a64a2f22cf2f0c42584e7c919ed4abe8d53675cff0f62bf1e95a1c676f868c8c8c8c8a600001518b602001518c608001518d60a001518a604051808b81526020018a6001600160a01b03168152602001896001600160a01b03168152602001886001600160a01b0316815260200187151581526020018681526020018581526020018481526020018381526020018281526020019a505050505050505050505060405180910390a187158015613d3d5750846020015183105b15613d6b576020850151600090613d549085614a28565b9050613d698b613d648d846132ac565b614e8f565b505b87613d7e57613d7e898660000151615814565b600086815260086020526040812081815560018101829055600281018290556003810182905560048101829055600580820183905560069091019190915554613dce908b906123959082906132ac565b613de48a613dde8c6005546132ac565b89614873565b50506016805463ff00000019166301000000179055505050505b50506001600055505050565b60105481565b60048054601654604080516317e1d38560e11b81526001600160a01b03868116958201959095526001602482015260ff63010000008404811615156044830152640100000000909304909216151560648301525160009390921691632fc3a70a91608480820192602092909190829003018186803b158015612add57600080fd5b602b8181548110613e9e57fe5b6000918252602090912001546001600160a01b0316905081565b613ec06149b5565b6001600160a01b0381166000908152602c6020526040902054613ee79060ff16600d6143ff565b6001600160a01b038116600090815260296020526040902054602a54613f0c91614a28565b602a556001600160a01b0381166000908152602c60209081526040808320805460ff199081169091556027835281842084905560298352818420849055601b8352818420849055602e8352818420849055601c8352818420805482169055601d90925290912080549091169055601354613f87906001614a28565b60135550565b6003546001600160a01b031681565b613fa46149b5565b6001600160a01b03909116600090815260256020526040902055565b601f6020526000908152604090205481565b613fda6149b5565b6016805491151566010000000000000266ff00000000000019909216919091179055565b60006140086149b5565b6001600160a01b03831660009081526022602052604090205480614030576000915050611a75565b6001600160a01b03841660009081526022602052604081205561205b848285614873565b601a6020526000908152604090205460ff1681565b6002546001600160a01b031681565b6000826140875750600061205b565b6001600160a01b0384166000908152602760205260409020546134e383611a6a86600a85900a61491a565b601654604080517ffbfded6d0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015284811660248301529151600093600160381b90049092169163fbfded6d9160448082019260209290919082900301818787803b15801561412b57600080fd5b505af115801561413f573d6000803e3d6000fd5b505050506040513d602081101561415557600080fd5b5051905080614164575061378e565b6001600160a01b0383166000908152602160205260409020546141b157601254614192906134dd4282614973565b6001600160a01b0384166000908152602160205260409020555061378e565b6012546001600160a01b03841660009081526021602052604090205442916141d991906149ce565b11156141e5575061378e565b60006141f0846133ee565b6001600160a01b038516600090815260208052604090205490915061421590826149ce565b6001600160a01b038516600090815260208052604090205560125461423e906134dd4282614973565b6001600160a01b038516600081815260216020908152604080832094909455808052908390205483519283529082015281517fa146fc154e1913322e9817d49f0d5c37466c24326e15de10e739a948be815eab929181900390910190a150505050565b601654604080517ffdaf6ac30000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152878116602483015286811660448301528515156064830152608482018590529151600093600160381b90049092169163fdaf6ac39160a480820192602092909190829003018186803b15801561368f57600080fd5b60266020908152600091825260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156143c35780601f10614398576101008083540402835291602001916143c3565b820191906000526020600020905b8154815290600101906020018083116143a657829003601f168201915b505050505081565b60165465010000000000900460ff16156143fd57336000908152601a60205260409020546143fd9060ff1660366143ff565b565b6000818152602660205260409020826136e15760405162461bcd60e51b815260206004820190815282546002600019610100600184161502019091160460248301819052909182916044909101908490801561449c5780601f106144715761010080835404028352916020019161449c565b820191906000526020600020905b81548152906001019060200180831161447f57829003601f168201915b50509250505060405180910390fd5b6001600160a01b03811660008181526028602090815260408083205481516370a0823160e01b8152306004820152915193949093859391926370a08231926024808301939192829003018186803b15801561450557600080fd5b505afa158015614519573d6000803e3d6000fd5b505050506040513d602081101561452f57600080fd5b50516001600160a01b03851660009081526028602052604090208190559050611d8a8183614a28565b6001600160a01b0382166000908152602d60205260409020548181116145d3576001600160a01b0383166000818152602d60209081526040808320929092558151928352820183905280517f4cd0095bd565d45488212267145f37c5a223186512b169e04f24bc12a4f6b3079281900390910190a15061378e565b6145dd8183614a28565b6001600160a01b0384166000818152602d602090815260409182902093909355805191825291810184905281517f4cd0095bd565d45488212267145f37c5a223186512b169e04f24bc12a4f6b307929181900390910190a1505050565b604080518082018252601a81527f5661756c743a20706f6f6c416d6f756e742065786365656465640000000000006020808301919091526001600160a01b03851660009081526009909152919091205461469591839061587c565b6001600160a01b0383166000908152600960209081526040808320849055600a9091529020546146c891101560326143ff565b604080516001600160a01b03841681526020810183905281517f112726233fbeaeed0f5b1dba5cb0b2b81883dee49fb35ff99fd98ed9f6d31eb0929181900390910190a15050565b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561475f57600080fd5b505afa158015614773573d6000803e3d6000fd5b505050506040513d602081101561478957600080fd5b50516001600160a01b0390921660009081526028602052604090209190915550565b6000806147c8612710611a6a6147c18287614a28565b879061491a565b905060006147d68583614a28565b6001600160a01b0387166000908152602260205260409020549091506147fc90826149ce565b6001600160a01b0387166000908152602260205260409020557f47cd9dda0e50ce30bcaaacd0488452b596221c07ac402a581cfae4d3933cac2b866148418184611a22565b604080516001600160a01b0390931683526020830191909152818101849052519081900360600190a150949350505050565b6148876001600160a01b03841682846156dd565b604080516370a0823160e01b815230600482015290516001600160a01b038516916370a08231916024808301926020929190829003018186803b1580156148cd57600080fd5b505afa1580156148e1573d6000803e3d6000fd5b505050506040513d60208110156148f757600080fd5b50516001600160a01b039093166000908152602860205260409020929092555050565b60008261492957506000611a75565b8282028284828161493657fe5b041461205b5760405162461bcd60e51b8152600401808060200182810382526021815260200180615eb16021913960400191505060405180910390fd5b600061205b83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506158d6565b6001546143fd906001600160a01b0316331460356143ff565b60008282018381101561205b576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061205b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061587c565b601454614a76576143fd565b6143fd6014543a111560376143ff565b336001600160a01b0382161415614a9c57614ae6565b6002546001600160a01b0316331415614ab457614ae6565b6001600160a01b0381166000908152601860209081526040808320338452909152902054614ae69060ff1660296143ff565b50565b8015614b6257614b0e826001600160a01b0316846001600160a01b031614602a6143ff565b6001600160a01b0383166000908152602c6020526040902054614b359060ff16602b6143ff565b6001600160a01b0383166000908152601c6020526040902054614b5d9060ff1615602c6143ff565b6136e1565b6001600160a01b0383166000908152602c6020526040902054614b899060ff16602d6143ff565b6001600160a01b0383166000908152601c6020526040902054614bb09060ff16602e6143ff565b6001600160a01b0382166000908152601c6020526040902054614bd89060ff1615602f6143ff565b6001600160a01b0382166000908152601d60205260409020546136e19060ff1660306143ff565b600080614c0f89898989896142a1565b90506000614c218a8a8a8a898961387a565b9050614c2d82826149ce565b91506000614c3b8a846132ac565b6001600160a01b038b16600090815260226020526040902054909150614c6190826149ce565b6001600160a01b038b1660008181526022602090815260409182902093909355805191825291810185905280820183905290517f5d0c0019d3d45fadeb74eff9d2c9924d146d000ac6bcf3c28bf0ac3c9baa011a9181900360600190a150909998505050505050505050565b81614ce357614cde811560276143ff565b61378e565b61378e8183101560286143ff565b6001600160a01b0382166000908152600a6020526040902054614d1490826149ce565b6001600160a01b0383166000908152600a6020818152604080842085905560098252909220549152614d4991111560346143ff565b604080516001600160a01b03841681526020810183905281517faa5649d82f5462be9d19b0f2b31a59b2259950a6076550bac9f3a1c07db9f66d929181900390910190a15050565b6001600160a01b0382166000908152601f6020526040902054614db490826149ce565b6001600160a01b0383166000818152601f602090815260409182902093909355805191825291810183905281517fd9d4761f75e0d0103b5cbeab941eeb443d7a56a35b5baf2a0787c03f03f4e474929181900390910190a15050565b6001600160a01b0382166000908152601f6020526040902054614e339082614a28565b6001600160a01b0383166000818152601f602090815260409182902093909355805191825291810183905281517f34e07158b9db50df5613e591c44ea2ebc82834eff4a4dc3a46e000e608261d68929181900390910190a15050565b6001600160a01b038216600090815260096020526040902054614eb290826149ce565b6001600160a01b03831660008181526009602090815260408083209490945583516370a0823160e01b8152306004820152935191936370a082319260248083019392829003018186803b158015614f0857600080fd5b505afa158015614f1c573d6000803e3d6000fd5b505050506040513d6020811015614f3257600080fd5b50516001600160a01b038416600090815260096020526040902054909150614f5e9082101560316143ff565b604080516001600160a01b03851681526020810184905281517f976177fbe09a15e5e43f848844963a42b41ef919ef17ff21a17a5421de8f4737929181900390910190a1505050565b6001600160a01b038216600090815260236020526040902054614fca90826149ce565b6001600160a01b03831660009081526023602090815260408083209390935560259052205480156136e1578060236000856001600160a01b03166001600160a01b031681526020019081526020016000205411156040518060400160405280601a81526020017f5661756c743a206d61782073686f72747320657863656564656400000000000081525090611c015760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611bac578181015183820152602001611b94565b601654604080517f81d11a230000000000000000000000000000000000000000000000000000000081526001600160a01b038a8116600483015289811660248301528881166044830152606482018890526084820187905285151560a483015284811660c48301529151600093600160381b9004909216916381d11a239160e4808201928692909190829003018186803b15801561513d57600080fd5b505afa158015615151573d6000803e3d6000fd5b5050505061515f87876140b2565b600061516d89898987611c4d565b600081815260086020526040902080549192509061518e901515601f6143ff565b6151a0868260000154101560206143ff565b6151b2878260010154101560216143ff565b6001810154815460048301546000916151cf91611a6a908b61491a565b60048401549091506151e19082614a28565b60048401556151f08b8261575d565b506000806152028d8d8d8d8d8d61593b565b8554919350915089146153a65761521a8c8c8a613525565b6003850155835461522b908a614a28565b808555600185015461523d9190614ccd565b61524b8d8d8d8b6001613792565b505087156152785761526e8c61236e866001015486614a2890919063ffffffff16565b6152788c8a614e10565b60008861528d576152888c613e10565b615296565b6152968c612a5b565b90507f93d75d64d1f84fc6f430a64fc578bdd4c1e090e90ea2d51773e626d19de56d30868f8f8f8f8f8f886152cb8c8c614a28565b60408051998a526001600160a01b0398891660208b015296881689880152949096166060880152608087019290925260a0860152151560c085015260e084019290925261010083019190915251908190036101200190a18454600186015460028701546003880154600489015460058a0154604080518d81526020810197909752868101959095526060860193909352608085019190915260a084015260c083015260e08201839052517f20853733b590dce729d9f4628682ebd9a34d2354e72679e66f43a008fc03b773918190036101000190a15061551a565b87156153c0576153b68c84614d91565b6153c08c8a614e10565b6000886153d5576153d08c613e10565b6153de565b6153de8c612a5b565b90507f93d75d64d1f84fc6f430a64fc578bdd4c1e090e90ea2d51773e626d19de56d30868f8f8f8f8f8f886154138c8c614a28565b60408051998a526001600160a01b0398891660208b015296881689880152949096166060880152608087019290925260a0860152151560c085015260e084019290925261010083019190915251908190036101200190a18454600186015460028701546003880154600489015460058a0154604080518d81526020810197909752868101959095526060860193909352608085019190915260a084015260c0830152517f73af1d417d82c240fdb6d319b34ad884487c6bf2845d98980cc52ad9171cb4559181900360e00190a15060008581526008602052604081208181556001810182905560028101829055600381018290556004810182905560058101829055600601555b87615529576155298b8a615814565b8115615569578715615543576155438c6123958e856132ac565b600061554f8d836132ac565b905061555c8d828a614873565b95506139f9945050505050565b5060009c9b505050505050505050505050565b6001600160a01b0382166000908152602d602052604090205461559f90826149ce565b6001600160a01b0383166000908152602d6020908152604080832093909355602e9052205480156155f1576001600160a01b0383166000908152602d60205260409020546155f19082101560336143ff565b604080516001600160a01b03851681526020810184905281517f8734a535d62699174c322d74d291c6053308a8caf79759684f44851562dc5cce929181900390910190a1505050565b6001600160a01b0381166000908152601e60209081526040808320546009909252909120541015614ae657604080518082018252601a81527f5661756c743a20706f6f6c416d6f756e74203c206275666665720000000000006020808301918252925162461bcd60e51b81526004810193845282516024820152825192939283926044909201919080838360008315611bac578181015183820152602001611b94565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526136e1908490615b35565b604080518082018252601b81527f5661756c743a20696e73756666696369656e74207265736572766500000000006020808301919091526001600160a01b0385166000908152600a90915291909120546157b891839061587c565b6001600160a01b0383166000818152600a602090815260409182902093909355805191825291810183905281517f533cb5ed32be6a90284e96b5747a1bfc2d38fdb5768a6b5f67ff7d62144ed67b929181900390910190a15050565b6001600160a01b0382166000908152602360205260409020548082111561585457506001600160a01b03821660009081526023602052604081205561378e565b61585e8183614a28565b6001600160a01b038416600090815260236020526040902055505050565b600081848411156158ce5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611bac578181015183820152602001611b94565b505050900390565b600081836159255760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611bac578181015183820152602001611b94565b50600083858161593157fe5b0495945050505050565b600080600061594c89898987611c4d565b6000818152600860205260408120805460038201549394509092615979918d918d918d918b918d91614bff565b905060008060008061599a8d876000015488600201548d8a600601546126a6565b875491955085935091506159b290611a6a8d8461491a565b9250505060008280156159c55750600082115b156159f557506005840180548201905580886159f55760006159e78e846132ac565b90506159f38e8261463a565b505b82158015615a035750600082115b15615a47576001850154615a179083614a28565b600186015588615a3b576000615a2d8e846132ac565b9050615a398e82614e8f565b505b60058501805483900390555b8a15615a6f57615a57818c6149ce565b6001860154909150615a69908c614a28565b60018601555b84548a1415615a92576001850154615a889082906149ce565b6000600187015590505b8084811115615aac57615aa58286614a28565b9050615ae0565b6001860154615abb9086614a28565b60018701558915615ae0576000615ad28f876132ac565b9050615ade8f8261463a565b505b60408051888152851515602082015280820185905290517f3ff41bdde87755b687ae83d0221a232b6be51a803330ed9661c1b5d0105e0d8a9181900360600190a1909e909d509b505050505050505050505050565b6060615b8a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316615be69092919063ffffffff16565b8051909150156136e157808060200190516020811015615ba957600080fd5b50516136e15760405162461bcd60e51b815260040180806020018281038252602a815260200180615ed2602a913960400191505060405180910390fd5b6060615bf58484600085615bfd565b949350505050565b606082471015615c3e5760405162461bcd60e51b8152600401808060200182810382526026815260200180615e8b6026913960400191505060405180910390fd5b615c4785615d4e565b615c98576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310615cd75780518252601f199092019160209182019101615cb8565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114615d39576040519150601f19603f3d011682016040523d82523d6000602084013e615d3e565b606091505b50915091506139f9828286615d54565b3b151590565b60608315615d6357508161205b565b825115615d735782518084602001fd5b60405162461bcd60e51b8152602060048201818152845160248401528451859391928392604401919085019080838360008315611bac578181015183820152602001611b94565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615dfb5782800160ff19823516178555615e28565b82800160010185558215615e28579182015b82811115615e28578235825591602001919060010190615e0d565b50615e34929150615e75565b5090565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b5b80821115615e345760008155600101615e7656fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220e93788030729fb6a923bddcbc4bf8bd1859839a47de6fb5672cc4ac6120a4b0364736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15155,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 12725,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "gov",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 12728,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "isInitialized",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 12731,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "router",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 12734,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "usdm",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 12737,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "priceFeed",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 12740,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "liquidationFeeUsd",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 12743,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "fundingRateFactor",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 12746,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "stableFundingRateFactor",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 12750,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "positions",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_struct(Position)13270_storage)"
      },
      {
        "astId": 12755,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "poolAmounts",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12760,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "reservedAmounts",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12766,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "maxLeverage",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 12770,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "taxBasisPoints",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 12774,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "stableTaxBasisPoints",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 12778,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "mintBurnFeeBasisPoints",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 12782,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "swapFeeBasisPoints",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 12786,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "stableSwapFeeBasisPoints",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 12790,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "marginFeeBasisPoints",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 12794,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "fundingInterval",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 12797,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "whitelistedTokenCount",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 12800,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "maxGasPrice",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 12803,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "minProfitTime",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 12807,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "isSwapEnabled",
        "offset": 0,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 12811,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "isLeverageEnabled",
        "offset": 1,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 12815,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "hasDynamicFees",
        "offset": 2,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 12818,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "includeAmmPrice",
        "offset": 3,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 12821,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "useSwapPricing",
        "offset": 4,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 12825,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "inManagerMode",
        "offset": 5,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 12829,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "inPrivateLiquidationMode",
        "offset": 6,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 12831,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "vaultUtils",
        "offset": 7,
        "slot": "22",
        "type": "t_contract(IVaultUtils)7434"
      },
      {
        "astId": 12833,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "errorController",
        "offset": 0,
        "slot": "23",
        "type": "t_address"
      },
      {
        "astId": 12840,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "approvedRouters",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 12845,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "isLiquidator",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12850,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "isManager",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12855,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "minProfitBasisPoints",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12860,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "stableTokens",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12865,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "shortableTokens",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12870,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "bufferAmounts",
        "offset": 0,
        "slot": "30",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12875,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "guaranteedUsd",
        "offset": 0,
        "slot": "31",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12880,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "cumulativeFundingRates",
        "offset": 0,
        "slot": "32",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12885,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "lastFundingTimes",
        "offset": 0,
        "slot": "33",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12890,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "feeReserves",
        "offset": 0,
        "slot": "34",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12895,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "globalShortSizes",
        "offset": 0,
        "slot": "35",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12900,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "globalShortAveragePrices",
        "offset": 0,
        "slot": "36",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12905,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "maxGlobalShortSizes",
        "offset": 0,
        "slot": "37",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12909,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "errors",
        "offset": 0,
        "slot": "38",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 12914,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "tokenDecimals",
        "offset": 0,
        "slot": "39",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12919,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "tokenBalances",
        "offset": 0,
        "slot": "40",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12924,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "tokenWeights",
        "offset": 0,
        "slot": "41",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12927,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "totalTokenWeights",
        "offset": 0,
        "slot": "42",
        "type": "t_uint256"
      },
      {
        "astId": 12931,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "allWhitelistedTokens",
        "offset": 0,
        "slot": "43",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 12936,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "whitelistedTokens",
        "offset": 0,
        "slot": "44",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12941,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "usdmAmounts",
        "offset": 0,
        "slot": "45",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12946,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "maxUsdmAmounts",
        "offset": 0,
        "slot": "46",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IVaultUtils)7434": {
        "encoding": "inplace",
        "label": "contract IVaultUtils",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(Position)13270_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct DataTypes.Position)",
        "numberOfBytes": "32",
        "value": "t_struct(Position)13270_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Position)13270_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.Position",
        "members": [
          {
            "astId": 13257,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "size",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13259,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "collateral",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13261,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "averagePrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13263,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "entryFundingRate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 13265,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "reserveAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 13267,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "realisedPnl",
            "offset": 0,
            "slot": "5",
            "type": "t_int256"
          },
          {
            "astId": 13269,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "lastIncreasedTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}