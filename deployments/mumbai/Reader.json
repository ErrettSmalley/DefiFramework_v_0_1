{
  "address": "0xA38860181D69566544EcC5839E0541CDf4e0d3eB",
  "abi": [
    {
      "inputs": [],
      "name": "BASIS_POINTS_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POSITION_PROPS_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDM_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "getFeeBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getFees",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_usdmAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getFullVaultTokenInfo",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getFundingRates",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "getMaxAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getPairInfo",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_collateralTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_indexTokens",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "_isLong",
          "type": "bool[]"
        }
      ],
      "name": "getPositions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVaultPriceFeed",
          "name": "_priceFeed",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_yieldTrackers",
          "type": "address[]"
        }
      ],
      "name": "getStakingInfo",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getTokenBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getTokenBalancesWithSupplies",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_excludedAccounts",
          "type": "address[]"
        }
      ],
      "name": "getTokenSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        }
      ],
      "name": "getTotalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_yieldTokens",
          "type": "address[]"
        }
      ],
      "name": "getTotalStaked",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_usdmAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getVaultTokenInfo",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_usdmAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getVaultTokenInfoV2",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_vesters",
          "type": "address[]"
        }
      ],
      "name": "getVestingInfo",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasMaxGlobalShortSizes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_hasMaxGlobalShortSizes",
          "type": "bool"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbe20faaa6fb924eeb38912b07f01932f85cc1434a77fd3516fa79fc3663eadbd",
  "receipt": {
    "to": null,
    "from": "0x9B6B26Db5F9149F0e3f4DAF2Eb98307020236dDB",
    "contractAddress": "0xA38860181D69566544EcC5839E0541CDf4e0d3eB",
    "transactionIndex": 6,
    "gasUsed": "5117435",
    "logsBloom": "0x
    "blockHash": "0xd3188d3d44c66b324da0c43ceedc13f75107a9b742a6354efb7a1755e03549a3",
    "transactionHash": "0xbe20faaa6fb924eeb38912b07f01932f85cc1434a77fd3516fa79fc3663eadbd",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 33420486,
        "transactionHash": "0xbe20faaa6fb924eeb38912b07f01932f85cc1434a77fd3516fa79fc3663eadbd",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009b6b26db5f9149f0e3f4daf2eb98307020236ddb",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001b456b870115000000000000000000000000000000000000000000000000008642728994642ae0000000000000000000000000000000000000000000000456318f07da70df44fd00000000000000000000000000000000000000000000000086272d1e0d6315e000000000000000000000000000000000000000000000045631aa4d45f7e059fd",
        "logIndex": 25,
        "blockHash": "0xd3188d3d44c66b324da0c43ceedc13f75107a9b742a6354efb7a1755e03549a3"
      }
    ],
    "blockNumber": 33420486,
    "cumulativeGasUsed": "5790491",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "59bf562207d3b98a68d8cbf2ed09b4a8",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BASIS_POINTS_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POSITION_PROPS_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDM_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"getFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdmAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getFullVaultTokenInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getFundingRates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"getMaxAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getPairInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_collateralTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_indexTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_isLong\",\"type\":\"bool[]\"}],\"name\":\"getPositions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVaultPriceFeed\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_yieldTrackers\",\"type\":\"address[]\"}],\"name\":\"getStakingInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getTokenBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getTokenBalancesWithSupplies\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_excludedAccounts\",\"type\":\"address[]\"}],\"name\":\"getTokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"getTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_yieldTokens\",\"type\":\"address[]\"}],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdmAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getVaultTokenInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdmAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getVaultTokenInfoV2\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_vesters\",\"type\":\"address[]\"}],\"name\":\"getVestingInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasMaxGlobalShortSizes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_hasMaxGlobalShortSizes\",\"type\":\"bool\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/peripherals/Reader.sol\":\"Reader\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ncontract Governable {\\n    address public gov;\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"Governable: forbidden\\\");\\n        _;\\n    }\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n}\\n\",\"keccak256\":\"0x369f345bc3ec6caba2e5abb12a3b4255da3c6b96374ffbd0b715e64e6508577f\",\"license\":\"MIT\"},\"contracts/amm/interfaces/IPancakeFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IPancakeFactory {\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n}\\n\",\"keccak256\":\"0xd000e5345d70388844b760b0978760a378aceb3f69b5955fe965f59d20ab11c1\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"./IVaultUtils.sol\\\";\\ninterface IVault {\\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\\n    function directPoolDeposit(address _token) external;\\n    function buyUSDM(address _token, address _receiver) external returns (uint256);\\n    function sellUSDM(address _token, address _receiver) external returns (uint256);\\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external returns (uint256);\\n    function increasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function liquidatePosition(address _account, address _collateralToken, address _indexToken, bool _isLong, address _feeReceiver) external;\\n\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\\n    function priceFeed() external view returns (address);\\n    function fundingRateFactor() external view returns (uint256);\\n    function stableFundingRateFactor() external view returns (uint256);\\n    function cumulativeFundingRates(address _token) external view returns (uint256);\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdmDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n    function liquidationFeeUsd() external view returns (uint256);\\n    function taxBasisPoints() external view returns (uint256);\\n    function stableTaxBasisPoints() external view returns (uint256);\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n    function swapFeeBasisPoints() external view returns (uint256);\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n    function marginFeeBasisPoints() external view returns (uint256);\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n    function whitelistedTokens(address _token) external view returns (bool);\\n    function stableTokens(address _token) external view returns (bool);\\n    function shortableTokens(address _token) external view returns (bool);\\n    function feeReserves(address _token) external view returns (uint256);\\n    function globalShortSizes(address _token) external view returns (uint256);\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\\n    function tokenDecimals(address _token) external view returns (uint256);\\n    function tokenWeights(address _token) external view returns (uint256);\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n    function poolAmounts(address _token) external view returns (uint256);\\n    function bufferAmounts(address _token) external view returns (uint256);\\n    function reservedAmounts(address _token) external view returns (uint256);\\n    function usdmAmounts(address _token) external view returns (uint256);\\n    function maxUsdmAmounts(address _token) external view returns (uint256);\\n    function getRedemptionAmount(address _token, uint256 _usdmAmount) external view returns (uint256);\\n    function getMaxPrice(address _token) external view returns (uint256);\\n    function getMinPrice(address _token) external view returns (uint256);\\n    function getDelta(address _indexToken, uint256 _size, uint256 _averagePrice, bool _isLong, uint256 _lastIncreasedTime) external view returns (bool, uint256);\\n    function getPosition(address _account, address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256);\\n    function isInitialized() external view returns (bool);\\n    function isSwapEnabled() external view returns (bool);\\n    function isLeverageEnabled() external view returns (bool);\\n    function router() external view returns (address);\\n    function usdm() external view returns (address);\\n    function gov() external view returns (address);\\n    function whitelistedTokenCount() external view returns (uint256);\\n    function maxLeverage() external view returns (uint256);\\n    function minProfitTime() external view returns (uint256);\\n    function hasDynamicFees() external view returns (bool);\\n    function fundingInterval() external view returns (uint256);\\n    function totalTokenWeights() external view returns (uint256);\\n    function getTargetUsdmAmount(address _token) external view returns (uint256);\\n    function inManagerMode() external view returns (bool);\\n    function inPrivateLiquidationMode() external view returns (bool);\\n    function maxGasPrice() external view returns (uint256);\\n    function approvedRouters(address _account, address _router) external view returns (bool);\\n    function isLiquidator(address _account) external view returns (bool);\\n    function isManager(address _account) external view returns (bool);\\n    function minProfitBasisPoints(address _token) external view returns (uint256);\\n    function tokenBalances(address _token) external view returns (uint256);\\n    function lastFundingTimes(address _token) external view returns (uint256);\\n\\n    function setMaxLeverage(uint256 _maxLeverage) external;\\n    function setInManagerMode(bool _inManagerMode) external;\\n    function setManager(address _manager, bool _isManager) external;\\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\\n    function setUsdmAmount(address _token, uint256 _amount) external;\\n    function setBufferAmount(address _token, uint256 _amount) external;\\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external;\\n    function setLiquidator(address _liquidator, bool _isActive) external;\\n    function setFundingRate(uint256 _fundingInterval, uint256 _fundingRateFactor, uint256 _stableFundingRateFactor) external;\\n    function setFees(uint256 _taxBasisPoints, uint256 _stableTaxBasisPoints, uint256 _mintBurnFeeBasisPoints, uint256 _swapFeeBasisPoints, uint256 _stableSwapFeeBasisPoints, uint256 _marginFeeBasisPoints, uint256 _liquidationFeeUsd, uint256 _minProfitTime, bool _hasDynamicFees) external;\\n    function setTokenConfig(address _token, uint256 _tokenDecimals, uint256 _redemptionBps, uint256 _minProfitBps, uint256 _maxUsdmAmount, bool _isStable, bool _isShortable) external;\\n    function setPriceFeed(address _priceFeed) external;\\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\\n    function setError(uint256 _errorCode, string calldata _error) external;\\n}\\n\",\"keccak256\":\"0x6865fea6348cbcd8eb8c91bbf6fe38d9c7128778ed80b97e6a407f55bf0fbe81\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IVaultPriceFeed {\\n    function adjustmentBasisPoints(address _token) external view returns (uint256);\\n    function isAdjustmentAdditive(address _token) external view returns (bool);\\n    function setAdjustment(address _token, bool _isAdditive, uint256 _adjustmentBps) external;\\n    function setUseV2Pricing(bool _useV2Pricing) external;\\n    function setIsAmmEnabled(bool _isEnabled) external;\\n    function setIsSecondaryPriceEnabled(bool _isEnabled) external;\\n    function setSpreadBasisPoints(address _token, uint256 _spreadBasisPoints) external;\\n    function setSpreadThresholdBasisPoints(uint256 _spreadThresholdBasisPoints) external;\\n    function setFavorPrimaryPrice(bool _favorPrimaryPrice) external;\\n    function setPriceSampleSpace(uint256 _priceSampleSpace) external;\\n    function setMaxStrictPriceDeviation(uint256 _maxStrictPriceDeviation) external;\\n    function getPrice(address _token, bool _maximise, bool _includeAmmPrice, bool _useSwapPricing) external view returns (uint256);\\n    function getAmmPrice(address _token) external view returns (uint256);\\n    function getLatestPrimaryPrice(address _token) external view returns (uint256);\\n    function getPrimaryPrice(address _token, bool _maximise) external view returns (uint256);\\n    function setTokenConfig(address _token, address _priceFeed, uint256 _priceDecimals, bool _isStrictStable) external;\\n}\\n\",\"keccak256\":\"0xa2ed7073305dff5e748522f8279f0690fd51bfeaa3e432b3e1e10de175e4be69\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IVaultUtils {\\n    function updateCumulativeFundingRate(address _collateralToken, address _indexToken) external returns (bool);\\n    function validateIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external view;\\n    function validateDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external view;\\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function getEntryFundingRate(address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256);\\n    function getPositionFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta) external view returns (uint256);\\n    function getFundingFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _size, uint256 _entryFundingRate) external view returns (uint256);\\n    function getBuyUsdmFeeBasisPoints(address _token, uint256 _usdmAmount) external view returns (uint256);\\n    function getSellUsdmFeeBasisPoints(address _token, uint256 _usdmAmount) external view returns (uint256);\\n    function getSwapFeeBasisPoints(address _tokenIn, address _tokenOut, uint256 _usdmAmount) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdmDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x938c049c684992effbeeb9aa3b069331224e0cfdf95e97d4aaf3d8fbd99b51b8\",\"license\":\"MIT\"},\"contracts/core/storage/ReaderStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.6.0;\\nimport \\\"../../libraries/math/SafeMath.sol\\\";\\nimport \\\"../../libraries/token/IERC20.sol\\\";\\nimport \\\"../../core/interfaces/IVault.sol\\\";\\nimport \\\"../../core/interfaces/IVaultPriceFeed.sol\\\";\\nimport \\\"../../tokens/interfaces/IYieldTracker.sol\\\";\\nimport \\\"../../tokens/interfaces/IYieldToken.sol\\\";\\nimport \\\"../../amm/interfaces/IPancakeFactory.sol\\\";\\nimport \\\"../../staking/interfaces/IVester.sol\\\";\\n\\nabstract contract ReaderStorage {\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n    uint256 public constant POSITION_PROPS_LENGTH = 9;\\n    uint256 public constant PRICE_PRECISION = 10 ** 30;\\n    uint256 public constant USDM_DECIMALS = 18;\\n    bool public hasMaxGlobalShortSizes;\\n\\n    using SafeMath for uint256;\\n}\\n\",\"keccak256\":\"0x09e2e25dc2e10723dce9cf11decfa7ea097ca52bb8d7ca792858f30182eaf1ef\",\"license\":\"UNLICENSED\"},\"contracts/libraries/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x41b0da7db3e1f79b338824fed2bc4732430b78002a9d51c2cfa86ad5a12c2763\",\"license\":\"MIT\"},\"contracts/libraries/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa3ce253082421a9e79d2b884ae6f60507b0cc73ea356674072091454c44cc556\",\"license\":\"MIT\"},\"contracts/peripherals/Reader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"../access/Governable.sol\\\";\\nimport \\\"../core/storage/ReaderStorage.sol\\\";\\ncontract Reader is Governable,ReaderStorage {\\n    function setConfig(bool _hasMaxGlobalShortSizes) public onlyGov {\\n        hasMaxGlobalShortSizes = _hasMaxGlobalShortSizes;\\n    }\\n    /* views */\\n    function getMaxAmountIn(IVault _vault, address _tokenIn, address _tokenOut) public view returns (uint256) {\\n        uint256 priceIn = _vault.getMinPrice(_tokenIn);\\n        uint256 priceOut = _vault.getMaxPrice(_tokenOut);\\n        uint256 tokenInDecimals = _vault.tokenDecimals(_tokenIn);\\n        uint256 tokenOutDecimals = _vault.tokenDecimals(_tokenOut);\\n        uint256 amountIn;\\n        {\\n            uint256 poolAmount = _vault.poolAmounts(_tokenOut);\\n            uint256 reservedAmount = _vault.reservedAmounts(_tokenOut);\\n            uint256 bufferAmount = _vault.bufferAmounts(_tokenOut);\\n            uint256 subAmount = reservedAmount > bufferAmount ? reservedAmount : bufferAmount;\\n            if (subAmount >= poolAmount) {\\n                return 0;\\n            }\\n            uint256 availableAmount = poolAmount.sub(subAmount);\\n            amountIn = availableAmount.mul(priceOut).div(priceIn).mul(10 ** tokenInDecimals).div(10 ** tokenOutDecimals);\\n        }\\n        uint256 maxUsdmAmount = _vault.maxUsdmAmounts(_tokenIn);\\n        if (maxUsdmAmount != 0) {\\n            if (maxUsdmAmount < _vault.usdmAmounts(_tokenIn)) {\\n                return 0;\\n            }\\n            uint256 maxAmountIn = maxUsdmAmount.sub(_vault.usdmAmounts(_tokenIn));\\n            maxAmountIn = maxAmountIn.mul(10 ** tokenInDecimals).div(10 ** USDM_DECIMALS);\\n            maxAmountIn = maxAmountIn.mul(PRICE_PRECISION).div(priceIn);\\n            if (amountIn > maxAmountIn) {\\n                return maxAmountIn;\\n            }\\n        }\\n        return amountIn;\\n    }\\n    function getAmountOut(IVault _vault, address _tokenIn, address _tokenOut, uint256 _amountIn) public view returns (uint256, uint256) {\\n        uint256 priceIn = _vault.getMinPrice(_tokenIn);\\n        uint256 tokenInDecimals = _vault.tokenDecimals(_tokenIn);\\n        uint256 tokenOutDecimals = _vault.tokenDecimals(_tokenOut);\\n        uint256 feeBasisPoints;\\n        {\\n            uint256 usdmAmount = _amountIn.mul(priceIn).div(PRICE_PRECISION);\\n            usdmAmount = usdmAmount.mul(10 ** USDM_DECIMALS).div(10 ** tokenInDecimals);\\n            bool isStableSwap = _vault.stableTokens(_tokenIn) && _vault.stableTokens(_tokenOut);\\n            uint256 baseBps = isStableSwap ? _vault.stableSwapFeeBasisPoints() : _vault.swapFeeBasisPoints();\\n            uint256 taxBps = isStableSwap ? _vault.stableTaxBasisPoints() : _vault.taxBasisPoints();\\n            uint256 feesBasisPoints0 = _vault.getFeeBasisPoints(_tokenIn, usdmAmount, baseBps, taxBps, true);\\n            uint256 feesBasisPoints1 = _vault.getFeeBasisPoints(_tokenOut, usdmAmount, baseBps, taxBps, false);\\n            feeBasisPoints = feesBasisPoints0 > feesBasisPoints1 ? feesBasisPoints0 : feesBasisPoints1;\\n        }\\n        uint256 priceOut = _vault.getMaxPrice(_tokenOut);\\n        uint256 amountOut = _amountIn.mul(priceIn).div(priceOut);\\n        amountOut = amountOut.mul(10 ** tokenOutDecimals).div(10 ** tokenInDecimals);\\n        uint256 amountOutAfterFees = amountOut.mul(BASIS_POINTS_DIVISOR.sub(feeBasisPoints)).div(BASIS_POINTS_DIVISOR);\\n        uint256 feeAmount = amountOut.sub(amountOutAfterFees);\\n        return (amountOutAfterFees, feeAmount);\\n    }\\n    function getFeeBasisPoints(IVault _vault, address _tokenIn, address _tokenOut, uint256 _amountIn) public view returns (uint256, uint256, uint256) {\\n        uint256 priceIn = _vault.getMinPrice(_tokenIn);\\n        uint256 tokenInDecimals = _vault.tokenDecimals(_tokenIn);\\n        uint256 usdmAmount = _amountIn.mul(priceIn).div(PRICE_PRECISION);\\n        usdmAmount = usdmAmount.mul(10 ** USDM_DECIMALS).div(10 ** tokenInDecimals);\\n        bool isStableSwap = _vault.stableTokens(_tokenIn) && _vault.stableTokens(_tokenOut);\\n        uint256 baseBps = isStableSwap ? _vault.stableSwapFeeBasisPoints() : _vault.swapFeeBasisPoints();\\n        uint256 taxBps = isStableSwap ? _vault.stableTaxBasisPoints() : _vault.taxBasisPoints();\\n        uint256 feesBasisPoints0 = _vault.getFeeBasisPoints(_tokenIn, usdmAmount, baseBps, taxBps, true);\\n        uint256 feesBasisPoints1 = _vault.getFeeBasisPoints(_tokenOut, usdmAmount, baseBps, taxBps, false);\\n        uint256 feeBasisPoints = feesBasisPoints0 > feesBasisPoints1 ? feesBasisPoints0 : feesBasisPoints1;\\n        return (feeBasisPoints, feesBasisPoints0, feesBasisPoints1);\\n    }\\n    function getFees(address _vault, address[] memory _tokens) public view returns (uint256[] memory) {\\n        uint256[] memory amounts = new uint256[](_tokens.length);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            amounts[i] = IVault(_vault).feeReserves(_tokens[i]);\\n        }\\n        return amounts;\\n    }\\n    function getTotalStaked(address[] memory _yieldTokens) public view returns (uint256[] memory) {\\n        uint256[] memory amounts = new uint256[](_yieldTokens.length);\\n        for (uint256 i = 0; i < _yieldTokens.length; i++) {\\n            IYieldToken yieldToken = IYieldToken(_yieldTokens[i]);\\n            amounts[i] = yieldToken.totalStaked();\\n        }\\n        return amounts;\\n    }\\n    function getStakingInfo(address _account, address[] memory _yieldTrackers) public view returns (uint256[] memory) {\\n        uint256 propsLength = 2;\\n        uint256[] memory amounts = new uint256[](_yieldTrackers.length * propsLength);\\n        for (uint256 i = 0; i < _yieldTrackers.length; i++) {\\n            IYieldTracker yieldTracker = IYieldTracker(_yieldTrackers[i]);\\n            amounts[i * propsLength] = yieldTracker.claimable(_account);\\n            amounts[i * propsLength + 1] = yieldTracker.getTokensPerInterval();\\n        }\\n        return amounts;\\n    }\\n    function getVestingInfo(address _account, address[] memory _vesters) public view returns (uint256[] memory) {\\n        uint256 propsLength = 7;\\n        uint256[] memory amounts = new uint256[](_vesters.length * propsLength);\\n        for (uint256 i = 0; i < _vesters.length; i++) {\\n            IVester vester = IVester(_vesters[i]);\\n            amounts[i * propsLength] = vester.pairAmounts(_account);\\n            amounts[i * propsLength + 1] = vester.getVestedAmount(_account);\\n            amounts[i * propsLength + 2] = IERC20(_vesters[i]).balanceOf(_account);\\n            amounts[i * propsLength + 3] = vester.claimedAmounts(_account);\\n            amounts[i * propsLength + 4] = vester.claimable(_account);\\n            amounts[i * propsLength + 5] = vester.getMaxVestableAmount(_account);\\n            amounts[i * propsLength + 6] = vester.getCombinedAverageStakedAmount(_account);\\n        }\\n        return amounts;\\n    }\\n    function getPairInfo(address _factory, address[] memory _tokens) public view returns (uint256[] memory) {\\n        uint256 inputLength = 2;\\n        uint256 propsLength = 2;\\n        uint256[] memory amounts = new uint256[](_tokens.length / inputLength * propsLength);\\n        for (uint256 i = 0; i < _tokens.length / inputLength; i++) {\\n            address token0 = _tokens[i * inputLength];\\n            address token1 = _tokens[i * inputLength + 1];\\n            address pair = IPancakeFactory(_factory).getPair(token0, token1);\\n            amounts[i * propsLength] = IERC20(token0).balanceOf(pair);\\n            amounts[i * propsLength + 1] = IERC20(token1).balanceOf(pair);\\n        }\\n        return amounts;\\n    }\\n    function getFundingRates(address _vault, address _weth, address[] memory _tokens) public view returns (uint256[] memory) {\\n        uint256 propsLength = 2;\\n        uint256[] memory fundingRates = new uint256[](_tokens.length * propsLength);\\n        IVault vault = IVault(_vault);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (token == address(0)) {\\n                token = _weth;\\n            }\\n            uint256 fundingRateFactor = vault.stableTokens(token) ? vault.stableFundingRateFactor() : vault.fundingRateFactor();\\n            uint256 reservedAmount = vault.reservedAmounts(token);\\n            uint256 poolAmount = vault.poolAmounts(token);\\n            if (poolAmount > 0) {\\n                fundingRates[i * propsLength] = fundingRateFactor.mul(reservedAmount).div(poolAmount);\\n            }\\n            if (vault.cumulativeFundingRates(token) > 0) {\\n                uint256 nextRate = vault.getNextFundingRate(token);\\n                uint256 baseRate = vault.cumulativeFundingRates(token);\\n                fundingRates[i * propsLength + 1] = baseRate.add(nextRate);\\n            }\\n        }\\n        return fundingRates;\\n    }\\n    function getTokenSupply(IERC20 _token, address[] memory _excludedAccounts) public view returns (uint256) {\\n        uint256 supply = _token.totalSupply();\\n        for (uint256 i = 0; i < _excludedAccounts.length; i++) {\\n            address account = _excludedAccounts[i];\\n            uint256 balance = _token.balanceOf(account);\\n            supply = supply.sub(balance);\\n        }\\n        return supply;\\n    }\\n    function getTotalBalance(IERC20 _token, address[] memory _accounts) public view returns (uint256) {\\n        uint256 totalBalance = 0;\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            address account = _accounts[i];\\n            uint256 balance = _token.balanceOf(account);\\n            totalBalance = totalBalance.add(balance);\\n        }\\n        return totalBalance;\\n    }\\n    function getTokenBalances(address _account, address[] memory _tokens) public view returns (uint256[] memory) {\\n        uint256[] memory balances = new uint256[](_tokens.length);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (token == address(0)) {\\n                balances[i] = _account.balance;\\n                continue;\\n            }\\n            balances[i] = IERC20(token).balanceOf(_account);\\n        }\\n        return balances;\\n    }\\n    function getTokenBalancesWithSupplies(address _account, address[] memory _tokens) public view returns (uint256[] memory) {\\n        uint256 propsLength = 2;\\n        uint256[] memory balances = new uint256[](_tokens.length * propsLength);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (token == address(0)) {\\n                balances[i * propsLength] = _account.balance;\\n                balances[i * propsLength + 1] = 0;\\n                continue;\\n            }\\n            balances[i * propsLength] = IERC20(token).balanceOf(_account);\\n            balances[i * propsLength + 1] = IERC20(token).totalSupply();\\n        }\\n        return balances;\\n    }\\n    function getPrices(IVaultPriceFeed _priceFeed, address[] memory _tokens) public view returns (uint256[] memory) {\\n        uint256 propsLength = 6;\\n        uint256[] memory amounts = new uint256[](_tokens.length * propsLength);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            amounts[i * propsLength] = _priceFeed.getPrice(token, true, true, false);\\n            amounts[i * propsLength + 1] = _priceFeed.getPrice(token, false, true, false);\\n            amounts[i * propsLength + 2] = _priceFeed.getPrimaryPrice(token, true);\\n            amounts[i * propsLength + 3] = _priceFeed.getPrimaryPrice(token, false);\\n            amounts[i * propsLength + 4] = _priceFeed.isAdjustmentAdditive(token) ? 1 : 0;\\n            amounts[i * propsLength + 5] = _priceFeed.adjustmentBasisPoints(token);\\n        }\\n        return amounts;\\n    }\\n    function getVaultTokenInfo(address _vault, address _weth, uint256 _usdmAmount, address[] memory _tokens) public view returns (uint256[] memory) {\\n        uint256 propsLength = 10;\\n        IVault vault = IVault(_vault);\\n        IVaultPriceFeed priceFeed = IVaultPriceFeed(vault.priceFeed());\\n        uint256[] memory amounts = new uint256[](_tokens.length * propsLength);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (token == address(0)) {\\n                token = _weth;\\n            }\\n            amounts[i * propsLength] = vault.poolAmounts(token);\\n            amounts[i * propsLength + 1] = vault.reservedAmounts(token);\\n            amounts[i * propsLength + 2] = vault.usdmAmounts(token);\\n            amounts[i * propsLength + 3] = vault.getRedemptionAmount(token, _usdmAmount);\\n            amounts[i * propsLength + 4] = vault.tokenWeights(token);\\n            amounts[i * propsLength + 5] = vault.getMinPrice(token);\\n            amounts[i * propsLength + 6] = vault.getMaxPrice(token);\\n            amounts[i * propsLength + 7] = vault.guaranteedUsd(token);\\n            amounts[i * propsLength + 8] = priceFeed.getPrimaryPrice(token, false);\\n            amounts[i * propsLength + 9] = priceFeed.getPrimaryPrice(token, true);\\n        }\\n        return amounts;\\n    }\\n    function getFullVaultTokenInfo(address _vault, address _weth, uint256 _usdmAmount, address[] memory _tokens) public view returns (uint256[] memory) {\\n        uint256 propsLength = 12;\\n        IVault vault = IVault(_vault);\\n        IVaultPriceFeed priceFeed = IVaultPriceFeed(vault.priceFeed());\\n        uint256[] memory amounts = new uint256[](_tokens.length * propsLength);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (token == address(0)) {\\n                token = _weth;\\n            }\\n            amounts[i * propsLength] = vault.poolAmounts(token);\\n            amounts[i * propsLength + 1] = vault.reservedAmounts(token);\\n            amounts[i * propsLength + 2] = vault.usdmAmounts(token);\\n            amounts[i * propsLength + 3] = vault.getRedemptionAmount(token, _usdmAmount);\\n            amounts[i * propsLength + 4] = vault.tokenWeights(token);\\n            amounts[i * propsLength + 5] = vault.bufferAmounts(token);\\n            amounts[i * propsLength + 6] = vault.maxUsdmAmounts(token);\\n            amounts[i * propsLength + 7] = vault.getMinPrice(token);\\n            amounts[i * propsLength + 8] = vault.getMaxPrice(token);\\n            amounts[i * propsLength + 9] = vault.guaranteedUsd(token);\\n            amounts[i * propsLength + 10] = priceFeed.getPrimaryPrice(token, false);\\n            amounts[i * propsLength + 11] = priceFeed.getPrimaryPrice(token, true);\\n        }\\n        return amounts;\\n    }\\n    function getVaultTokenInfoV2(address _vault, address _weth, uint256 _usdmAmount, address[] memory _tokens) public view returns (uint256[] memory) {\\n        uint256 propsLength = 14;\\n        IVault vault = IVault(_vault);\\n        IVaultPriceFeed priceFeed = IVaultPriceFeed(vault.priceFeed());\\n        uint256[] memory amounts = new uint256[](_tokens.length * propsLength);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (token == address(0)) {\\n                token = _weth;\\n            }\\n            uint256 maxGlobalShortSize = hasMaxGlobalShortSizes ? vault.maxGlobalShortSizes(token) : 0;\\n            amounts[i * propsLength] = vault.poolAmounts(token);\\n            amounts[i * propsLength + 1] = vault.reservedAmounts(token);\\n            amounts[i * propsLength + 2] = vault.usdmAmounts(token);\\n            amounts[i * propsLength + 3] = vault.getRedemptionAmount(token, _usdmAmount);\\n            amounts[i * propsLength + 4] = vault.tokenWeights(token);\\n            amounts[i * propsLength + 5] = vault.bufferAmounts(token);\\n            amounts[i * propsLength + 6] = vault.maxUsdmAmounts(token);\\n            amounts[i * propsLength + 7] = vault.globalShortSizes(token);\\n            amounts[i * propsLength + 8] = maxGlobalShortSize;\\n            amounts[i * propsLength + 9] = vault.getMinPrice(token);\\n            amounts[i * propsLength + 10] = vault.getMaxPrice(token);\\n            amounts[i * propsLength + 11] = vault.guaranteedUsd(token);\\n            amounts[i * propsLength + 12] = priceFeed.getPrimaryPrice(token, false);\\n            amounts[i * propsLength + 13] = priceFeed.getPrimaryPrice(token, true);\\n        }\\n        return amounts;\\n    }\\n    function getPositions(address _vault, address _account, address[] memory _collateralTokens, address[] memory _indexTokens, bool[] memory _isLong) public view returns(uint256[] memory) {\\n        uint256[] memory amounts = new uint256[](_collateralTokens.length * POSITION_PROPS_LENGTH);\\n        for (uint256 i = 0; i < _collateralTokens.length; i++) {\\n            {\\n            (uint256 size,\\n             uint256 collateral,\\n             uint256 averagePrice,\\n             uint256 entryFundingRate,\\n             /* reserveAmount */,\\n             uint256 realisedPnl,\\n             bool hasRealisedProfit,\\n             uint256 lastIncreasedTime) = IVault(_vault).getPosition(_account, _collateralTokens[i], _indexTokens[i], _isLong[i]);\\n\\n            amounts[i * POSITION_PROPS_LENGTH] = size;\\n            amounts[i * POSITION_PROPS_LENGTH + 1] = collateral;\\n            amounts[i * POSITION_PROPS_LENGTH + 2] = averagePrice;\\n            amounts[i * POSITION_PROPS_LENGTH + 3] = entryFundingRate;\\n            amounts[i * POSITION_PROPS_LENGTH + 4] = hasRealisedProfit ? 1 : 0;\\n            amounts[i * POSITION_PROPS_LENGTH + 5] = realisedPnl;\\n            amounts[i * POSITION_PROPS_LENGTH + 6] = lastIncreasedTime;\\n            }\\n            uint256 size = amounts[i * POSITION_PROPS_LENGTH];\\n            uint256 averagePrice = amounts[i * POSITION_PROPS_LENGTH + 2];\\n            uint256 lastIncreasedTime = amounts[i * POSITION_PROPS_LENGTH + 6];\\n            if (averagePrice > 0) {\\n                (bool hasProfit, uint256 delta) = IVault(_vault).getDelta(_indexTokens[i], size, averagePrice, _isLong[i], lastIncreasedTime);\\n                amounts[i * POSITION_PROPS_LENGTH + 7] = hasProfit ? 1 : 0;\\n                amounts[i * POSITION_PROPS_LENGTH + 8] = delta;\\n            }\\n        }\\n        return amounts;\\n    }\\n}\\n\",\"keccak256\":\"0x0dfb215c141eadb104902c9e5a89d6a83d69ee2cb984dd975f510a48d53fa98d\",\"license\":\"MIT\"},\"contracts/staking/interfaces/IVester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IVester {\\n    function rewardTracker() external view returns (address);\\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\\n    function claimable(address _account) external view returns (uint256);\\n    function cumulativeClaimAmounts(address _account) external view returns (uint256);\\n    function claimedAmounts(address _account) external view returns (uint256);\\n    function pairAmounts(address _account) external view returns (uint256);\\n    function getVestedAmount(address _account) external view returns (uint256);\\n    function transferredAverageStakedAmounts(address _account) external view returns (uint256);\\n    function transferredCumulativeRewards(address _account) external view returns (uint256);\\n    function cumulativeRewardDeductions(address _account) external view returns (uint256);\\n    function bonusRewards(address _account) external view returns (uint256);\\n    function transferStakeValues(address _sender, address _receiver) external;\\n    function setTransferredAverageStakedAmounts(address _account, uint256 _amount) external;\\n    function setTransferredCumulativeRewards(address _account, uint256 _amount) external;\\n    function setCumulativeRewardDeductions(address _account, uint256 _amount) external;\\n    function setBonusRewards(address _account, uint256 _amount) external;\\n    function getMaxVestableAmount(address _account) external view returns (uint256);\\n    function getCombinedAverageStakedAmount(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcc7c9d439980a893faf454c2aa0ffe52149fb01682fa431006d0725582a58d1f\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IYieldToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IYieldToken {\\n    function totalStaked() external view returns (uint256);\\n    function stakedBalance(address _account) external view returns (uint256);\\n    function removeAdmin(address _account) external;\\n}\",\"keccak256\":\"0xa5784e03f73a3ed49df871e79c9013fd9664a6cccecdf45714ffbfad62edcf8d\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IYieldTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IYieldTracker {\\n    function claim(address _account, address _receiver) external returns (uint256);\\n    function updateRewards(address _account) external;\\n    function getTokensPerInterval() external view returns (uint256);\\n    function claimable(address _account) external view returns (uint256);\\n}\",\"keccak256\":\"0xa520f9e2f625c31f475cbc0f5a2498985f993eb4502b1a38e4e1fa9554270877\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b03191633179055615b4580620000336000396000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c8063937a0be8116100ee578063c6f1d67611610097578063d802178e11610071578063d802178e14610be0578063dc383cab14610c91578063f3535e6c14610e4f578063fbdb05ca14610e87576101ae565b8063c6f1d67614610b49578063cfad57a214610b65578063d7176ca914610b8b576101ae565b80639b0183c3116100c85780639b0183c314610a6f578063a4543ead14610a90578063ad7e549714610b41576101ae565b8063937a0be8146108fc57806395082d25146109ad57806395a7535a146109b5576101ae565b8063302a81411161015b578063482119341161013557806348211934146106185780637b906e93146106c957806386d4d0f51461078a5780638e83ca321461083b576101ae565b8063302a8141146105055780633613d5271461050d578063440f018c146105be576101ae565b80632413c8c11161018c5780632413c8c1146103025780632ac0184c146103a35780632e3e334214610454576101ae565b8063126082cf146101b357806312d43a51146101cd57806320542568146101f1575b600080fd5b6101bb610f38565b60408051918252519081900360200190f35b6101d5610f3e565b604080516001600160a01b039092168252519081900360200190f35b6102b26004803603608081101561020757600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561024157600080fd5b82018360208201111561025357600080fd5b803590602001918460208302840111600160201b8311171561027457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610f4d945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102ee5781810151838201526020016102d6565b505050509050019250505060405180910390f35b6102b26004803603602081101561031857600080fd5b810190602081018135600160201b81111561033257600080fd5b82018360208201111561034457600080fd5b803590602001918460208302840111600160201b8311171561036557600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061165c945050505050565b6101bb600480360360408110156103b957600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156103e357600080fd5b8201836020820111156103f557600080fd5b803590602001918460208302840111600160201b8311171561041657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611756945050505050565b6102b26004803603604081101561046a57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561049457600080fd5b8201836020820111156104a657600080fd5b803590602001918460208302840111600160201b831117156104c757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611881945050505050565b6101bb611a87565b6102b26004803603604081101561052357600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561054d57600080fd5b82018360208201111561055f57600080fd5b803590602001918460208302840111600160201b8311171561058057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611a8c945050505050565b6105fa600480360360808110156105d457600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135611ec7565b60408051938452602084019290925282820152519081900360600190f35b6102b26004803603604081101561062e57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561065857600080fd5b82018360208201111561066a57600080fd5b803590602001918460208302840111600160201b8311171561068b57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061242d945050505050565b6102b2600480360360808110156106df57600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561071957600080fd5b82018360208201111561072b57600080fd5b803590602001918460208302840111600160201b8311171561074c57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506128e2945050505050565b6102b2600480360360408110156107a057600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156107ca57600080fd5b8201836020820111156107dc57600080fd5b803590602001918460208302840111600160201b831117156107fd57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550613114945050505050565b6102b26004803603608081101561085157600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561088b57600080fd5b82018360208201111561089d57600080fd5b803590602001918460208302840111600160201b831117156108be57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550613215945050505050565b6102b26004803603604081101561091257600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561093c57600080fd5b82018360208201111561094e57600080fd5b803590602001918460208302840111600160201b8311171561096f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550613b93945050505050565b6101bb613d29565b6102b2600480360360608110156109cb57600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156109fe57600080fd5b820183602082011115610a1057600080fd5b803590602001918460208302840111600160201b83111715610a3157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550613d3a945050505050565b610a8e60048036036020811015610a8557600080fd5b50351515614222565b005b6102b260048036036040811015610aa657600080fd5b6001600160a01b038235169190810190604081016020820135600160201b811115610ad057600080fd5b820183602082011115610ae257600080fd5b803590602001918460208302840111600160201b83111715610b0357600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506142ba945050505050565b6101bb614540565b610b51614545565b604080519115158252519081900360200190f35b610a8e60048036036020811015610b7b57600080fd5b50356001600160a01b0316614555565b610bc760048036036080811015610ba157600080fd5b506001600160a01b038135811691602081013582169160408201351690606001356145ee565b6040805192835260208301919091528051918290030190f35b6102b260048036036040811015610bf657600080fd5b6001600160a01b038235169190810190604081016020820135600160201b811115610c2057600080fd5b820183602082011115610c3257600080fd5b803590602001918460208302840111600160201b83111715610c5357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550614ca5945050505050565b6102b2600480360360a0811015610ca757600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b811115610cda57600080fd5b820183602082011115610cec57600080fd5b803590602001918460208302840111600160201b83111715610d0d57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115610d5c57600080fd5b820183602082011115610d6e57600080fd5b803590602001918460208302840111600160201b83111715610d8f57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115610dde57600080fd5b820183602082011115610df057600080fd5b803590602001918460208302840111600160201b83111715610e1157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550614df2945050505050565b6101bb60048036036060811015610e6557600080fd5b506001600160a01b0381358116916020810135821691604090910135166151ef565b6101bb60048036036040811015610e9d57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b811115610ec757600080fd5b820183602082011115610ed957600080fd5b803590602001918460208302840111600160201b83111715610efa57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550615802945050505050565b61271081565b6000546001600160a01b031681565b60606000600a905060008690506000816001600160a01b031663741bef1a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f9557600080fd5b505afa158015610fa9573d6000803e3d6000fd5b505050506040513d6020811015610fbf57600080fd5b50518551909150606090840267ffffffffffffffff81118015610fe157600080fd5b5060405190808252806020026020018201604052801561100b578160200160208202803683370190505b50905060005b865181101561164f57600087828151811061102857fe5b6020026020010151905060006001600160a01b0316816001600160a01b031614156110505750885b846001600160a01b03166352f55eed826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561109d57600080fd5b505afa1580156110b1573d6000803e3d6000fd5b505050506040513d60208110156110c757600080fd5b5051835184908489029081106110d957fe5b602002602001018181525050846001600160a01b031663c3c7b9e9826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561113257600080fd5b505afa158015611146573d6000803e3d6000fd5b505050506040513d602081101561115c57600080fd5b5051835184906001858a020190811061117157fe5b602002602001018181525050846001600160a01b03166383867b2d826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156111ca57600080fd5b505afa1580156111de573d6000803e3d6000fd5b505050506040513d60208110156111f457600080fd5b5051835184906002858a020190811061120957fe5b602002602001018181525050846001600160a01b0316632c668ec1828b6040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b15801561126a57600080fd5b505afa15801561127e573d6000803e3d6000fd5b505050506040513d602081101561129457600080fd5b5051835184906003858a02019081106112a957fe5b602002602001018181525050846001600160a01b031663ab2f3ad4826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561130257600080fd5b505afa158015611316573d6000803e3d6000fd5b505050506040513d602081101561132c57600080fd5b5051835184906004858a020190811061134157fe5b602002602001018181525050846001600160a01b03166381a612d6826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561139a57600080fd5b505afa1580156113ae573d6000803e3d6000fd5b505050506040513d60208110156113c457600080fd5b5051835184906005858a02019081106113d957fe5b602002602001018181525050846001600160a01b031663e124e6d2826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561143257600080fd5b505afa158015611446573d6000803e3d6000fd5b505050506040513d602081101561145c57600080fd5b5051835184906006858a020190811061147157fe5b602002602001018181525050846001600160a01b031663f07456ce826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156114ca57600080fd5b505afa1580156114de573d6000803e3d6000fd5b505050506040513d60208110156114f457600080fd5b5051835184906007858a020190811061150957fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038481166004830152600060248301529151918716926356c8c2c192604480840193829003018186803b15801561156357600080fd5b505afa158015611577573d6000803e3d6000fd5b505050506040513d602081101561158d57600080fd5b5051835184906008858a02019081106115a257fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038481166004830152600160248301529151918716926356c8c2c192604480840193829003018186803b1580156115fc57600080fd5b505afa158015611610573d6000803e3d6000fd5b505050506040513d602081101561162657600080fd5b5051835184906009858a020190811061163b57fe5b602090810291909101015250600101611011565b5098975050505050505050565b606080825167ffffffffffffffff8111801561167757600080fd5b506040519080825280602002602001820160405280156116a1578160200160208202803683370190505b50905060005b835181101561174f5760008482815181106116be57fe5b60200260200101519050806001600160a01b031663817b1cd26040518163ffffffff1660e01b815260040160206040518083038186803b15801561170157600080fd5b505afa158015611715573d6000803e3d6000fd5b505050506040513d602081101561172b57600080fd5b5051835184908490811061173b57fe5b6020908102919091010152506001016116a7565b5092915050565b600080836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561179257600080fd5b505afa1580156117a6573d6000803e3d6000fd5b505050506040513d60208110156117bc57600080fd5b5051905060005b83518110156118775760008482815181106117da57fe5b602002602001015190506000866001600160a01b03166370a08231836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561183357600080fd5b505afa158015611847573d6000803e3d6000fd5b505050506040513d602081101561185d57600080fd5b5051905061186b84826158bb565b935050506001016117c3565b5090505b92915050565b606060006002905060608184510267ffffffffffffffff811180156118a557600080fd5b506040519080825280602002602001820160405280156118cf578160200160208202803683370190505b50905060005b8451811015611a7e5760008582815181106118ec57fe5b6020026020010151905060006001600160a01b0316816001600160a01b0316141561195b57866001600160a01b031631838584028151811061192a57fe5b6020026020010181815250506000838584026001018151811061194957fe5b60200260200101818152505050611a76565b806001600160a01b03166370a08231886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156119a857600080fd5b505afa1580156119bc573d6000803e3d6000fd5b505050506040513d60208110156119d257600080fd5b5051835184908487029081106119e457fe5b602002602001018181525050806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a2957600080fd5b505afa158015611a3d573d6000803e3d6000fd5b505050506040513d6020811015611a5357600080fd5b505183518490600185880201908110611a6857fe5b602002602001018181525050505b6001016118d5565b50949350505050565b601281565b606060006006905060608184510267ffffffffffffffff81118015611ab057600080fd5b50604051908082528060200260200182016040528015611ada578160200160208202803683370190505b50905060005b8451811015611a7e576000858281518110611af757fe5b602090810291909101810151604080516317e1d38560e11b81526001600160a01b0380841660048301526001602483018190526044830152600060648301529151929450908a1692632fc3a70a92608480840193829003018186803b158015611b5f57600080fd5b505afa158015611b73573d6000803e3d6000fd5b505050506040513d6020811015611b8957600080fd5b505183518490848702908110611b9b57fe5b602090810291909101810191909152604080516317e1d38560e11b81526001600160a01b0384811660048301526000602483018190526001604484015260648301529151918a1692632fc3a70a92608480840193829003018186803b158015611c0357600080fd5b505afa158015611c17573d6000803e3d6000fd5b505050506040513d6020811015611c2d57600080fd5b505183518490600185880201908110611c4257fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038481166004830152600160248301529151918a16926356c8c2c192604480840193829003018186803b158015611c9c57600080fd5b505afa158015611cb0573d6000803e3d6000fd5b505050506040513d6020811015611cc657600080fd5b505183518490600285880201908110611cdb57fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038481166004830152600060248301529151918a16926356c8c2c192604480840193829003018186803b158015611d3557600080fd5b505afa158015611d49573d6000803e3d6000fd5b505050506040513d6020811015611d5f57600080fd5b505183518490600385880201908110611d7457fe5b602002602001018181525050866001600160a01b0316636ce8a44b826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611dcd57600080fd5b505afa158015611de1573d6000803e3d6000fd5b505050506040513d6020811015611df757600080fd5b5051611e04576000611e07565b60015b60ff168385840260040181518110611e1b57fe5b602002602001018181525050866001600160a01b03166348cac277826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611e7457600080fd5b505afa158015611e88573d6000803e3d6000fd5b505050506040513d6020811015611e9e57600080fd5b505183518490600585880201908110611eb357fe5b602090810291909101015250600101611ae0565b600080600080876001600160a01b03166381a612d6886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611f1a57600080fd5b505afa158015611f2e573d6000803e3d6000fd5b505050506040513d6020811015611f4457600080fd5b5051604080516323b95ceb60e21b81526001600160a01b038a811660048301529151929350600092918b1691638ee573ac91602480820192602092909190829003018186803b158015611f9657600080fd5b505afa158015611faa573d6000803e3d6000fd5b505050506040513d6020811015611fc057600080fd5b505190506000611fe76c0c9f2c9cd04674edea40000000611fe189866158fd565b90615956565b9050612003600a83900a611fe183670de0b6b3a76400006158fd565b905060008a6001600160a01b03166342b60b038b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561205457600080fd5b505afa158015612068573d6000803e3d6000fd5b505050506040513d602081101561207e57600080fd5b5051801561210157508a6001600160a01b03166342b60b038a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156120d457600080fd5b505afa1580156120e8573d6000803e3d6000fd5b505050506040513d60208110156120fe57600080fd5b50515b9050600081612174578b6001600160a01b031663a22f23926040518163ffffffff1660e01b815260040160206040518083038186803b15801561214357600080fd5b505afa158015612157573d6000803e3d6000fd5b505050506040513d602081101561216d57600080fd5b50516121da565b8b6001600160a01b031663df73a2676040518163ffffffff1660e01b815260040160206040518083038186803b1580156121ad57600080fd5b505afa1580156121c1573d6000803e3d6000fd5b505050506040513d60208110156121d757600080fd5b50515b905060008261224d578c6001600160a01b0316637a210a2b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561221c57600080fd5b505afa158015612230573d6000803e3d6000fd5b505050506040513d602081101561224657600080fd5b50516122b3565b8c6001600160a01b03166310eb56c26040518163ffffffff1660e01b815260040160206040518083038186803b15801561228657600080fd5b505afa15801561229a573d6000803e3d6000fd5b505050506040513d60208110156122b057600080fd5b50515b905060008d6001600160a01b031663c7e074c38e87868660016040518663ffffffff1660e01b815260040180866001600160a01b0316815260200185815260200184815260200183815260200182151581526020019550505050505060206040518083038186803b15801561232757600080fd5b505afa15801561233b573d6000803e3d6000fd5b505050506040513d602081101561235157600080fd5b8101908080519060200190929190505050905060008e6001600160a01b031663c7e074c38e88878760006040518663ffffffff1660e01b815260040180866001600160a01b0316815260200185815260200184815260200183815260200182151581526020019550505050505060206040518083038186803b1580156123d657600080fd5b505afa1580156123ea573d6000803e3d6000fd5b505050506040513d602081101561240057600080fd5b5051905060008183116124135781612415565b825b9b509199509750505050505050509450945094915050565b606060006007905060608184510267ffffffffffffffff8111801561245157600080fd5b5060405190808252806020026020018201604052801561247b578160200160208202803683370190505b50905060005b8451811015611a7e57600085828151811061249857fe5b60200260200101519050806001600160a01b0316635d50e729886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156124ef57600080fd5b505afa158015612503573d6000803e3d6000fd5b505050506040513d602081101561251957600080fd5b50518351849084870290811061252b57fe5b602002602001018181525050806001600160a01b031663d5a73fdd886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561258457600080fd5b505afa158015612598573d6000803e3d6000fd5b505050506040513d60208110156125ae57600080fd5b5051835184906001858802019081106125c357fe5b6020026020010181815250508582815181106125db57fe5b60200260200101516001600160a01b03166370a08231886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561262f57600080fd5b505afa158015612643573d6000803e3d6000fd5b505050506040513d602081101561265957600080fd5b50518351849060028588020190811061266e57fe5b602002602001018181525050806001600160a01b03166371417b32886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156126c757600080fd5b505afa1580156126db573d6000803e3d6000fd5b505050506040513d60208110156126f157600080fd5b50518351849060038588020190811061270657fe5b602002602001018181525050806001600160a01b031663402914f5886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561275f57600080fd5b505afa158015612773573d6000803e3d6000fd5b505050506040513d602081101561278957600080fd5b50518351849060048588020190811061279e57fe5b602002602001018181525050806001600160a01b03166308f26c76886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156127f757600080fd5b505afa15801561280b573d6000803e3d6000fd5b505050506040513d602081101561282157600080fd5b50518351849060058588020190811061283657fe5b602002602001018181525050806001600160a01b03166345f01ee6886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561288f57600080fd5b505afa1580156128a3573d6000803e3d6000fd5b505050506040513d60208110156128b957600080fd5b5051835184906006858802019081106128ce57fe5b602090810291909101015250600101612481565b60606000600c905060008690506000816001600160a01b031663741bef1a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561292a57600080fd5b505afa15801561293e573d6000803e3d6000fd5b505050506040513d602081101561295457600080fd5b50518551909150606090840267ffffffffffffffff8111801561297657600080fd5b506040519080825280602002602001820160405280156129a0578160200160208202803683370190505b50905060005b865181101561164f5760008782815181106129bd57fe5b6020026020010151905060006001600160a01b0316816001600160a01b031614156129e55750885b846001600160a01b03166352f55eed826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612a3257600080fd5b505afa158015612a46573d6000803e3d6000fd5b505050506040513d6020811015612a5c57600080fd5b505183518490848902908110612a6e57fe5b602002602001018181525050846001600160a01b031663c3c7b9e9826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612ac757600080fd5b505afa158015612adb573d6000803e3d6000fd5b505050506040513d6020811015612af157600080fd5b5051835184906001858a0201908110612b0657fe5b602002602001018181525050846001600160a01b03166383867b2d826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612b5f57600080fd5b505afa158015612b73573d6000803e3d6000fd5b505050506040513d6020811015612b8957600080fd5b5051835184906002858a0201908110612b9e57fe5b602002602001018181525050846001600160a01b0316632c668ec1828b6040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b158015612bff57600080fd5b505afa158015612c13573d6000803e3d6000fd5b505050506040513d6020811015612c2957600080fd5b5051835184906003858a0201908110612c3e57fe5b602002602001018181525050846001600160a01b031663ab2f3ad4826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612c9757600080fd5b505afa158015612cab573d6000803e3d6000fd5b505050506040513d6020811015612cc157600080fd5b5051835184906004858a0201908110612cd657fe5b602002602001018181525050846001600160a01b0316634a993ee9826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612d2f57600080fd5b505afa158015612d43573d6000803e3d6000fd5b505050506040513d6020811015612d5957600080fd5b5051835184906005858a0201908110612d6e57fe5b602002602001018181525050846001600160a01b0316639acc6b33826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612dc757600080fd5b505afa158015612ddb573d6000803e3d6000fd5b505050506040513d6020811015612df157600080fd5b5051835184906006858a0201908110612e0657fe5b602002602001018181525050846001600160a01b03166381a612d6826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612e5f57600080fd5b505afa158015612e73573d6000803e3d6000fd5b505050506040513d6020811015612e8957600080fd5b5051835184906007858a0201908110612e9e57fe5b602002602001018181525050846001600160a01b031663e124e6d2826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612ef757600080fd5b505afa158015612f0b573d6000803e3d6000fd5b505050506040513d6020811015612f2157600080fd5b5051835184906008858a0201908110612f3657fe5b602002602001018181525050846001600160a01b031663f07456ce826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612f8f57600080fd5b505afa158015612fa3573d6000803e3d6000fd5b505050506040513d6020811015612fb957600080fd5b5051835184906009858a0201908110612fce57fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038481166004830152600060248301529151918716926356c8c2c192604480840193829003018186803b15801561302857600080fd5b505afa15801561303c573d6000803e3d6000fd5b505050506040513d602081101561305257600080fd5b505183518490600a858a020190811061306757fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038481166004830152600160248301529151918716926356c8c2c192604480840193829003018186803b1580156130c157600080fd5b505afa1580156130d5573d6000803e3d6000fd5b505050506040513d60208110156130eb57600080fd5b505183518490600b858a020190811061310057fe5b6020908102919091010152506001016129a6565b606080825167ffffffffffffffff8111801561312f57600080fd5b50604051908082528060200260200182016040528015613159578160200160208202803683370190505b50905060005b835181101561187757846001600160a01b0316631ce9cb8f85838151811061318357fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156131c857600080fd5b505afa1580156131dc573d6000803e3d6000fd5b505050506040513d60208110156131f257600080fd5b5051825183908390811061320257fe5b602090810291909101015260010161315f565b60606000600e905060008690506000816001600160a01b031663741bef1a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561325d57600080fd5b505afa158015613271573d6000803e3d6000fd5b505050506040513d602081101561328757600080fd5b50518551909150606090840267ffffffffffffffff811180156132a957600080fd5b506040519080825280602002602001820160405280156132d3578160200160208202803683370190505b50905060005b865181101561164f5760008782815181106132f057fe5b6020026020010151905060006001600160a01b0316816001600160a01b031614156133185750885b60008054600160a01b900460ff166133315760006133ab565b856001600160a01b0316639698d25a836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561337e57600080fd5b505afa158015613392573d6000803e3d6000fd5b505050506040513d60208110156133a857600080fd5b50515b9050856001600160a01b03166352f55eed836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156133fa57600080fd5b505afa15801561340e573d6000803e3d6000fd5b505050506040513d602081101561342457600080fd5b505184518590858a0290811061343657fe5b602002602001018181525050856001600160a01b031663c3c7b9e9836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561348f57600080fd5b505afa1580156134a3573d6000803e3d6000fd5b505050506040513d60208110156134b957600080fd5b5051845185906001868b02019081106134ce57fe5b602002602001018181525050856001600160a01b03166383867b2d836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561352757600080fd5b505afa15801561353b573d6000803e3d6000fd5b505050506040513d602081101561355157600080fd5b5051845185906002868b020190811061356657fe5b602002602001018181525050856001600160a01b0316632c668ec1838c6040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b1580156135c757600080fd5b505afa1580156135db573d6000803e3d6000fd5b505050506040513d60208110156135f157600080fd5b5051845185906003868b020190811061360657fe5b602002602001018181525050856001600160a01b031663ab2f3ad4836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561365f57600080fd5b505afa158015613673573d6000803e3d6000fd5b505050506040513d602081101561368957600080fd5b5051845185906004868b020190811061369e57fe5b602002602001018181525050856001600160a01b0316634a993ee9836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156136f757600080fd5b505afa15801561370b573d6000803e3d6000fd5b505050506040513d602081101561372157600080fd5b5051845185906005868b020190811061373657fe5b602002602001018181525050856001600160a01b0316639acc6b33836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561378f57600080fd5b505afa1580156137a3573d6000803e3d6000fd5b505050506040513d60208110156137b957600080fd5b5051845185906006868b02019081106137ce57fe5b602002602001018181525050856001600160a01b0316638a78daa8836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561382757600080fd5b505afa15801561383b573d6000803e3d6000fd5b505050506040513d602081101561385157600080fd5b5051845185906007868b020190811061386657fe5b60200260200101818152505080848885026008018151811061388457fe5b602002602001018181525050856001600160a01b03166381a612d6836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156138dd57600080fd5b505afa1580156138f1573d6000803e3d6000fd5b505050506040513d602081101561390757600080fd5b5051845185906009868b020190811061391c57fe5b602002602001018181525050856001600160a01b031663e124e6d2836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561397557600080fd5b505afa158015613989573d6000803e3d6000fd5b505050506040513d602081101561399f57600080fd5b505184518590600a868b02019081106139b457fe5b602002602001018181525050856001600160a01b031663f07456ce836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015613a0d57600080fd5b505afa158015613a21573d6000803e3d6000fd5b505050506040513d6020811015613a3757600080fd5b505184518590600b868b0201908110613a4c57fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038581166004830152600060248301529151918816926356c8c2c192604480840193829003018186803b158015613aa657600080fd5b505afa158015613aba573d6000803e3d6000fd5b505050506040513d6020811015613ad057600080fd5b505184518590600c868b0201908110613ae557fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038581166004830152600160248301529151918816926356c8c2c192604480840193829003018186803b158015613b3f57600080fd5b505afa158015613b53573d6000803e3d6000fd5b505050506040513d6020811015613b6957600080fd5b505184518590600d868b0201908110613b7e57fe5b602090810291909101015250506001016132d9565b606060006002905060608184510267ffffffffffffffff81118015613bb757600080fd5b50604051908082528060200260200182016040528015613be1578160200160208202803683370190505b50905060005b8451811015611a7e576000858281518110613bfe57fe5b60200260200101519050806001600160a01b031663402914f5886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015613c5557600080fd5b505afa158015613c69573d6000803e3d6000fd5b505050506040513d6020811015613c7f57600080fd5b505183518490848702908110613c9157fe5b602002602001018181525050806001600160a01b0316632459f51d6040518163ffffffff1660e01b815260040160206040518083038186803b158015613cd657600080fd5b505afa158015613cea573d6000803e3d6000fd5b505050506040513d6020811015613d0057600080fd5b505183518490600185880201908110613d1557fe5b602090810291909101015250600101613be7565b6c0c9f2c9cd04674edea4000000081565b606060006002905060608184510267ffffffffffffffff81118015613d5e57600080fd5b50604051908082528060200260200182016040528015613d88578160200160208202803683370190505b5090508560005b8551811015614214576000868281518110613da657fe5b6020026020010151905060006001600160a01b0316816001600160a01b03161415613dce5750865b6000836001600160a01b03166342b60b03836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015613e1d57600080fd5b505afa158015613e31573d6000803e3d6000fd5b505050506040513d6020811015613e4757600080fd5b5051613eb757836001600160a01b031663c4f718bf6040518163ffffffff1660e01b815260040160206040518083038186803b158015613e8657600080fd5b505afa158015613e9a573d6000803e3d6000fd5b505050506040513d6020811015613eb057600080fd5b5051613f1d565b836001600160a01b031663134ca63b6040518163ffffffff1660e01b815260040160206040518083038186803b158015613ef057600080fd5b505afa158015613f04573d6000803e3d6000fd5b505050506040513d6020811015613f1a57600080fd5b50515b90506000846001600160a01b031663c3c7b9e9846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015613f6e57600080fd5b505afa158015613f82573d6000803e3d6000fd5b505050506040513d6020811015613f9857600080fd5b5051604080516352f55eed60e01b81526001600160a01b0386811660048301529151929350600092918816916352f55eed91602480820192602092909190829003018186803b158015613fea57600080fd5b505afa158015613ffe573d6000803e3d6000fd5b505050506040513d602081101561401457600080fd5b5051905080156140475761402c81611fe185856158fd565b878987028151811061403a57fe5b6020026020010181815250505b6000866001600160a01b031663c65bc7b1866040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561409657600080fd5b505afa1580156140aa573d6000803e3d6000fd5b505050506040513d60208110156140c057600080fd5b50511115614204576000866001600160a01b031663a93acac2866040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561411757600080fd5b505afa15801561412b573d6000803e3d6000fd5b505050506040513d602081101561414157600080fd5b5051604080517fc65bc7b10000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301529151929350600092918a169163c65bc7b191602480820192602092909190829003018186803b1580156141ac57600080fd5b505afa1580156141c0573d6000803e3d6000fd5b505050506040513d60208110156141d657600080fd5b505190506141e48183615998565b898b8902600101815181106141f557fe5b60200260200101818152505050505b505060019092019150613d8f9050565b5090925050505b9392505050565b6000546001600160a01b03163314614281576040805162461bcd60e51b815260206004820152601560248201527f476f7665726e61626c653a20666f7262696464656e0000000000000000000000604482015290519081900360640190fd5b60008054911515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909216919091179055565b805160609060029081908390829004820267ffffffffffffffff811180156142e157600080fd5b5060405190808252806020026020018201604052801561430b578160200160208202803683370190505b50905060005b8386518161431b57fe5b04811015614536576000868583028151811061433357fe5b602002602001015190506000878684026001018151811061435057fe5b602002602001015190506000896001600160a01b031663e6a4390584846040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b1580156143ba57600080fd5b505afa1580156143ce573d6000803e3d6000fd5b505050506040513d60208110156143e457600080fd5b5051604080517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0380841660048301529151929350908516916370a0823191602480820192602092909190829003018186803b15801561444c57600080fd5b505afa158015614460573d6000803e3d6000fd5b505050506040513d602081101561447657600080fd5b50518551869086890290811061448857fe5b602002602001018181525050816001600160a01b03166370a08231826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156144e157600080fd5b505afa1580156144f5573d6000803e3d6000fd5b505050506040513d602081101561450b57600080fd5b5051855186906001878a020190811061452057fe5b6020908102919091010152505050600101614311565b5095945050505050565b600981565b600054600160a01b900460ff1681565b6000546001600160a01b031633146145b4576040805162461bcd60e51b815260206004820152601560248201527f476f7665726e61626c653a20666f7262696464656e0000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000806000866001600160a01b03166381a612d6876040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561464057600080fd5b505afa158015614654573d6000803e3d6000fd5b505050506040513d602081101561466a57600080fd5b5051604080516323b95ceb60e21b81526001600160a01b0389811660048301529151929350600092918a1691638ee573ac91602480820192602092909190829003018186803b1580156146bc57600080fd5b505afa1580156146d0573d6000803e3d6000fd5b505050506040513d60208110156146e657600080fd5b5051604080516323b95ceb60e21b81526001600160a01b0389811660048301529151929350600092918b1691638ee573ac91602480820192602092909190829003018186803b15801561473857600080fd5b505afa15801561474c573d6000803e3d6000fd5b505050506040513d602081101561476257600080fd5b505190506000806147846c0c9f2c9cd04674edea40000000611fe18a886158fd565b90506147a0600a85900a611fe183670de0b6b3a76400006158fd565b905060008b6001600160a01b03166342b60b038c6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156147f157600080fd5b505afa158015614805573d6000803e3d6000fd5b505050506040513d602081101561481b57600080fd5b5051801561489e57508b6001600160a01b03166342b60b038b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561487157600080fd5b505afa158015614885573d6000803e3d6000fd5b505050506040513d602081101561489b57600080fd5b50515b9050600081614911578c6001600160a01b031663a22f23926040518163ffffffff1660e01b815260040160206040518083038186803b1580156148e057600080fd5b505afa1580156148f4573d6000803e3d6000fd5b505050506040513d602081101561490a57600080fd5b5051614977565b8c6001600160a01b031663df73a2676040518163ffffffff1660e01b815260040160206040518083038186803b15801561494a57600080fd5b505afa15801561495e573d6000803e3d6000fd5b505050506040513d602081101561497457600080fd5b50515b90506000826149ea578d6001600160a01b0316637a210a2b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156149b957600080fd5b505afa1580156149cd573d6000803e3d6000fd5b505050506040513d60208110156149e357600080fd5b5051614a50565b8d6001600160a01b03166310eb56c26040518163ffffffff1660e01b815260040160206040518083038186803b158015614a2357600080fd5b505afa158015614a37573d6000803e3d6000fd5b505050506040513d6020811015614a4d57600080fd5b50515b905060008e6001600160a01b031663c7e074c38f87868660016040518663ffffffff1660e01b815260040180866001600160a01b0316815260200185815260200184815260200183815260200182151581526020019550505050505060206040518083038186803b158015614ac457600080fd5b505afa158015614ad8573d6000803e3d6000fd5b505050506040513d6020811015614aee57600080fd5b8101908080519060200190929190505050905060008f6001600160a01b031663c7e074c38f88878760006040518663ffffffff1660e01b815260040180866001600160a01b0316815260200185815260200184815260200183815260200182151581526020019550505050505060206040518083038186803b158015614b7357600080fd5b505afa158015614b87573d6000803e3d6000fd5b505050506040513d6020811015614b9d57600080fd5b50519050808211614bae5780614bb0565b815b965050505050505060008a6001600160a01b031663e124e6d28a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015614c0757600080fd5b505afa158015614c1b573d6000803e3d6000fd5b505050506040513d6020811015614c3157600080fd5b505190506000614c4582611fe18b896158fd565b9050614c6485600a0a611fe186600a0a846158fd90919063ffffffff16565b90506000614c82612710611fe1614c7b82886158bb565b85906158fd565b90506000614c9083836158bb565b919e919d50909b505050505050505050505050565b606080825167ffffffffffffffff81118015614cc057600080fd5b50604051908082528060200260200182016040528015614cea578160200160208202803683370190505b50905060005b8351811015611877576000848281518110614d0757fe5b6020026020010151905060006001600160a01b0316816001600160a01b03161415614d5557856001600160a01b031631838381518110614d4357fe5b60200260200101818152505050614dea565b806001600160a01b03166370a08231876040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015614da257600080fd5b505afa158015614db6573d6000803e3d6000fd5b505050506040513d6020811015614dcc57600080fd5b50518351849084908110614ddc57fe5b602002602001018181525050505b600101614cf0565b606080600985510267ffffffffffffffff81118015614e1057600080fd5b50604051908082528060200260200182016040528015614e3a578160200160208202803683370190505b50905060005b85518110156151e45760008060008060008060008e6001600160a01b0316634a3f088d8f8f8b81518110614e7057fe5b60200260200101518f8c81518110614e8457fe5b60200260200101518f8d81518110614e9857fe5b60200260200101516040518563ffffffff1660e01b815260040180856001600160a01b03168152602001846001600160a01b03168152602001836001600160a01b0316815260200182151581526020019450505050506101006040518083038186803b158015614f0757600080fd5b505afa158015614f1b573d6000803e3d6000fd5b505050506040513d610100811015614f3257600080fd5b50805160208201516040830151606084015160a085015160c086015160e0909601518f51959d50939b509199509750955091935090915087908a9060098b02908110614f7a57fe5b602002602001018181525050858960098a0260010181518110614f9957fe5b602002602001018181525050848960098a0260020181518110614fb857fe5b602002602001018181525050838960098a0260030181518110614fd757fe5b60200260200101818152505081614fef576000614ff2565b60015b60ff168960098a026004018151811061500757fe5b602002602001018181525050828960098a026005018151811061502657fe5b602002602001018181525050808960098a026006018151811061504557fe5b60200260200101818152505050505050505050600082600983028151811061506957fe5b60200260200101519050600083600984026002018151811061508757fe5b6020026020010151905060008460098502600601815181106150a557fe5b6020026020010151905060008211156151d9576000808c6001600160a01b0316635c07eaab8b88815181106150d657fe5b602002602001015187878d8b815181106150ec57fe5b6020026020010151886040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001831515815260200182815260200195505050505050604080518083038186803b15801561514f57600080fd5b505afa158015615163573d6000803e3d6000fd5b505050506040513d604081101561517957600080fd5b508051602090910151909250905081615193576000615196565b60015b60ff168760098802600701815181106151ab57fe5b602002602001018181525050808760098802600801815181106151ca57fe5b60200260200101818152505050505b505050600101614e40565b509695505050505050565b600080846001600160a01b03166381a612d6856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561523f57600080fd5b505afa158015615253573d6000803e3d6000fd5b505050506040513d602081101561526957600080fd5b5051604080517fe124e6d20000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015291519293506000929188169163e124e6d291602480820192602092909190829003018186803b1580156152d457600080fd5b505afa1580156152e8573d6000803e3d6000fd5b505050506040513d60208110156152fe57600080fd5b5051604080516323b95ceb60e21b81526001600160a01b038881166004830152915192935060009291891691638ee573ac91602480820192602092909190829003018186803b15801561535057600080fd5b505afa158015615364573d6000803e3d6000fd5b505050506040513d602081101561537a57600080fd5b5051604080516323b95ceb60e21b81526001600160a01b0388811660048301529151929350600092918a1691638ee573ac91602480820192602092909190829003018186803b1580156153cc57600080fd5b505afa1580156153e0573d6000803e3d6000fd5b505050506040513d60208110156153f657600080fd5b5051604080516352f55eed60e01b81526001600160a01b038981166004830152915192935060009283928c16916352f55eed916024808301926020929190829003018186803b15801561544857600080fd5b505afa15801561545c573d6000803e3d6000fd5b505050506040513d602081101561547257600080fd5b5051604080517fc3c7b9e90000000000000000000000000000000000000000000000000000000081526001600160a01b038b811660048301529151929350600092918d169163c3c7b9e991602480820192602092909190829003018186803b1580156154dd57600080fd5b505afa1580156154f1573d6000803e3d6000fd5b505050506040513d602081101561550757600080fd5b5051604080517f4a993ee90000000000000000000000000000000000000000000000000000000081526001600160a01b038c811660048301529151929350600092918e1691634a993ee991602480820192602092909190829003018186803b15801561557257600080fd5b505afa158015615586573d6000803e3d6000fd5b505050506040513d602081101561559c57600080fd5b5051905060008183116155af57816155b1565b825b90508381106155cc576000995050505050505050505061421b565b60006155d885836158bb565b905061560587600a0a611fe18a600a0a6155ff8e611fe18f886158fd90919063ffffffff16565b906158fd565b955050505050506000896001600160a01b0316639acc6b338a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561565b57600080fd5b505afa15801561566f573d6000803e3d6000fd5b505050506040513d602081101561568557600080fd5b50519050801561164f57896001600160a01b03166383867b2d8a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156156dc57600080fd5b505afa1580156156f0573d6000803e3d6000fd5b505050506040513d602081101561570657600080fd5b505181101561571e576000965050505050505061421b565b60006157a38b6001600160a01b03166383867b2d8c6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561577057600080fd5b505afa158015615784573d6000803e3d6000fd5b505050506040513d602081101561579a57600080fd5b505183906158bb565b90506157bf670de0b6b3a7640000611fe183600a89900a6158fd565b90506157dc87611fe1836c0c9f2c9cd04674edea400000006158fd565b9050808311156157f457965061421b95505050505050565b505098975050505050505050565b600080805b835181101561187757600084828151811061581e57fe5b602002602001015190506000866001600160a01b03166370a08231836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561587757600080fd5b505afa15801561588b573d6000803e3d6000fd5b505050506040513d60208110156158a157600080fd5b505190506158af8482615998565b93505050600101615807565b600061421b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506159f2565b60008261590c5750600061187b565b8282028284828161591957fe5b041461421b5760405162461bcd60e51b8152600401808060200182810382526021815260200180615aef6021913960400191505060405180910390fd5b600061421b83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250615a89565b60008282018381101561421b576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008184841115615a815760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015615a46578181015183820152602001615a2e565b50505050905090810190601f168015615a735780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008183615ad85760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315615a46578181015183820152602001615a2e565b506000838581615ae457fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212205f24d9d6cb61c7ac8a7374f630374d23be74d3da215bb2fd0409f7888bfab21a64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ae5760003560e01c8063937a0be8116100ee578063c6f1d67611610097578063d802178e11610071578063d802178e14610be0578063dc383cab14610c91578063f3535e6c14610e4f578063fbdb05ca14610e87576101ae565b8063c6f1d67614610b49578063cfad57a214610b65578063d7176ca914610b8b576101ae565b80639b0183c3116100c85780639b0183c314610a6f578063a4543ead14610a90578063ad7e549714610b41576101ae565b8063937a0be8146108fc57806395082d25146109ad57806395a7535a146109b5576101ae565b8063302a81411161015b578063482119341161013557806348211934146106185780637b906e93146106c957806386d4d0f51461078a5780638e83ca321461083b576101ae565b8063302a8141146105055780633613d5271461050d578063440f018c146105be576101ae565b80632413c8c11161018c5780632413c8c1146103025780632ac0184c146103a35780632e3e334214610454576101ae565b8063126082cf146101b357806312d43a51146101cd57806320542568146101f1575b600080fd5b6101bb610f38565b60408051918252519081900360200190f35b6101d5610f3e565b604080516001600160a01b039092168252519081900360200190f35b6102b26004803603608081101561020757600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561024157600080fd5b82018360208201111561025357600080fd5b803590602001918460208302840111600160201b8311171561027457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610f4d945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102ee5781810151838201526020016102d6565b505050509050019250505060405180910390f35b6102b26004803603602081101561031857600080fd5b810190602081018135600160201b81111561033257600080fd5b82018360208201111561034457600080fd5b803590602001918460208302840111600160201b8311171561036557600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061165c945050505050565b6101bb600480360360408110156103b957600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156103e357600080fd5b8201836020820111156103f557600080fd5b803590602001918460208302840111600160201b8311171561041657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611756945050505050565b6102b26004803603604081101561046a57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561049457600080fd5b8201836020820111156104a657600080fd5b803590602001918460208302840111600160201b831117156104c757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611881945050505050565b6101bb611a87565b6102b26004803603604081101561052357600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561054d57600080fd5b82018360208201111561055f57600080fd5b803590602001918460208302840111600160201b8311171561058057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611a8c945050505050565b6105fa600480360360808110156105d457600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135611ec7565b60408051938452602084019290925282820152519081900360600190f35b6102b26004803603604081101561062e57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561065857600080fd5b82018360208201111561066a57600080fd5b803590602001918460208302840111600160201b8311171561068b57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061242d945050505050565b6102b2600480360360808110156106df57600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561071957600080fd5b82018360208201111561072b57600080fd5b803590602001918460208302840111600160201b8311171561074c57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506128e2945050505050565b6102b2600480360360408110156107a057600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156107ca57600080fd5b8201836020820111156107dc57600080fd5b803590602001918460208302840111600160201b831117156107fd57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550613114945050505050565b6102b26004803603608081101561085157600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561088b57600080fd5b82018360208201111561089d57600080fd5b803590602001918460208302840111600160201b831117156108be57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550613215945050505050565b6102b26004803603604081101561091257600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561093c57600080fd5b82018360208201111561094e57600080fd5b803590602001918460208302840111600160201b8311171561096f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550613b93945050505050565b6101bb613d29565b6102b2600480360360608110156109cb57600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156109fe57600080fd5b820183602082011115610a1057600080fd5b803590602001918460208302840111600160201b83111715610a3157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550613d3a945050505050565b610a8e60048036036020811015610a8557600080fd5b50351515614222565b005b6102b260048036036040811015610aa657600080fd5b6001600160a01b038235169190810190604081016020820135600160201b811115610ad057600080fd5b820183602082011115610ae257600080fd5b803590602001918460208302840111600160201b83111715610b0357600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506142ba945050505050565b6101bb614540565b610b51614545565b604080519115158252519081900360200190f35b610a8e60048036036020811015610b7b57600080fd5b50356001600160a01b0316614555565b610bc760048036036080811015610ba157600080fd5b506001600160a01b038135811691602081013582169160408201351690606001356145ee565b6040805192835260208301919091528051918290030190f35b6102b260048036036040811015610bf657600080fd5b6001600160a01b038235169190810190604081016020820135600160201b811115610c2057600080fd5b820183602082011115610c3257600080fd5b803590602001918460208302840111600160201b83111715610c5357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550614ca5945050505050565b6102b2600480360360a0811015610ca757600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b811115610cda57600080fd5b820183602082011115610cec57600080fd5b803590602001918460208302840111600160201b83111715610d0d57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115610d5c57600080fd5b820183602082011115610d6e57600080fd5b803590602001918460208302840111600160201b83111715610d8f57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115610dde57600080fd5b820183602082011115610df057600080fd5b803590602001918460208302840111600160201b83111715610e1157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550614df2945050505050565b6101bb60048036036060811015610e6557600080fd5b506001600160a01b0381358116916020810135821691604090910135166151ef565b6101bb60048036036040811015610e9d57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b811115610ec757600080fd5b820183602082011115610ed957600080fd5b803590602001918460208302840111600160201b83111715610efa57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550615802945050505050565b61271081565b6000546001600160a01b031681565b60606000600a905060008690506000816001600160a01b031663741bef1a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f9557600080fd5b505afa158015610fa9573d6000803e3d6000fd5b505050506040513d6020811015610fbf57600080fd5b50518551909150606090840267ffffffffffffffff81118015610fe157600080fd5b5060405190808252806020026020018201604052801561100b578160200160208202803683370190505b50905060005b865181101561164f57600087828151811061102857fe5b6020026020010151905060006001600160a01b0316816001600160a01b031614156110505750885b846001600160a01b03166352f55eed826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561109d57600080fd5b505afa1580156110b1573d6000803e3d6000fd5b505050506040513d60208110156110c757600080fd5b5051835184908489029081106110d957fe5b602002602001018181525050846001600160a01b031663c3c7b9e9826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561113257600080fd5b505afa158015611146573d6000803e3d6000fd5b505050506040513d602081101561115c57600080fd5b5051835184906001858a020190811061117157fe5b602002602001018181525050846001600160a01b03166383867b2d826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156111ca57600080fd5b505afa1580156111de573d6000803e3d6000fd5b505050506040513d60208110156111f457600080fd5b5051835184906002858a020190811061120957fe5b602002602001018181525050846001600160a01b0316632c668ec1828b6040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b15801561126a57600080fd5b505afa15801561127e573d6000803e3d6000fd5b505050506040513d602081101561129457600080fd5b5051835184906003858a02019081106112a957fe5b602002602001018181525050846001600160a01b031663ab2f3ad4826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561130257600080fd5b505afa158015611316573d6000803e3d6000fd5b505050506040513d602081101561132c57600080fd5b5051835184906004858a020190811061134157fe5b602002602001018181525050846001600160a01b03166381a612d6826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561139a57600080fd5b505afa1580156113ae573d6000803e3d6000fd5b505050506040513d60208110156113c457600080fd5b5051835184906005858a02019081106113d957fe5b602002602001018181525050846001600160a01b031663e124e6d2826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561143257600080fd5b505afa158015611446573d6000803e3d6000fd5b505050506040513d602081101561145c57600080fd5b5051835184906006858a020190811061147157fe5b602002602001018181525050846001600160a01b031663f07456ce826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156114ca57600080fd5b505afa1580156114de573d6000803e3d6000fd5b505050506040513d60208110156114f457600080fd5b5051835184906007858a020190811061150957fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038481166004830152600060248301529151918716926356c8c2c192604480840193829003018186803b15801561156357600080fd5b505afa158015611577573d6000803e3d6000fd5b505050506040513d602081101561158d57600080fd5b5051835184906008858a02019081106115a257fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038481166004830152600160248301529151918716926356c8c2c192604480840193829003018186803b1580156115fc57600080fd5b505afa158015611610573d6000803e3d6000fd5b505050506040513d602081101561162657600080fd5b5051835184906009858a020190811061163b57fe5b602090810291909101015250600101611011565b5098975050505050505050565b606080825167ffffffffffffffff8111801561167757600080fd5b506040519080825280602002602001820160405280156116a1578160200160208202803683370190505b50905060005b835181101561174f5760008482815181106116be57fe5b60200260200101519050806001600160a01b031663817b1cd26040518163ffffffff1660e01b815260040160206040518083038186803b15801561170157600080fd5b505afa158015611715573d6000803e3d6000fd5b505050506040513d602081101561172b57600080fd5b5051835184908490811061173b57fe5b6020908102919091010152506001016116a7565b5092915050565b600080836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561179257600080fd5b505afa1580156117a6573d6000803e3d6000fd5b505050506040513d60208110156117bc57600080fd5b5051905060005b83518110156118775760008482815181106117da57fe5b602002602001015190506000866001600160a01b03166370a08231836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561183357600080fd5b505afa158015611847573d6000803e3d6000fd5b505050506040513d602081101561185d57600080fd5b5051905061186b84826158bb565b935050506001016117c3565b5090505b92915050565b606060006002905060608184510267ffffffffffffffff811180156118a557600080fd5b506040519080825280602002602001820160405280156118cf578160200160208202803683370190505b50905060005b8451811015611a7e5760008582815181106118ec57fe5b6020026020010151905060006001600160a01b0316816001600160a01b0316141561195b57866001600160a01b031631838584028151811061192a57fe5b6020026020010181815250506000838584026001018151811061194957fe5b60200260200101818152505050611a76565b806001600160a01b03166370a08231886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156119a857600080fd5b505afa1580156119bc573d6000803e3d6000fd5b505050506040513d60208110156119d257600080fd5b5051835184908487029081106119e457fe5b602002602001018181525050806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a2957600080fd5b505afa158015611a3d573d6000803e3d6000fd5b505050506040513d6020811015611a5357600080fd5b505183518490600185880201908110611a6857fe5b602002602001018181525050505b6001016118d5565b50949350505050565b601281565b606060006006905060608184510267ffffffffffffffff81118015611ab057600080fd5b50604051908082528060200260200182016040528015611ada578160200160208202803683370190505b50905060005b8451811015611a7e576000858281518110611af757fe5b602090810291909101810151604080516317e1d38560e11b81526001600160a01b0380841660048301526001602483018190526044830152600060648301529151929450908a1692632fc3a70a92608480840193829003018186803b158015611b5f57600080fd5b505afa158015611b73573d6000803e3d6000fd5b505050506040513d6020811015611b8957600080fd5b505183518490848702908110611b9b57fe5b602090810291909101810191909152604080516317e1d38560e11b81526001600160a01b0384811660048301526000602483018190526001604484015260648301529151918a1692632fc3a70a92608480840193829003018186803b158015611c0357600080fd5b505afa158015611c17573d6000803e3d6000fd5b505050506040513d6020811015611c2d57600080fd5b505183518490600185880201908110611c4257fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038481166004830152600160248301529151918a16926356c8c2c192604480840193829003018186803b158015611c9c57600080fd5b505afa158015611cb0573d6000803e3d6000fd5b505050506040513d6020811015611cc657600080fd5b505183518490600285880201908110611cdb57fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038481166004830152600060248301529151918a16926356c8c2c192604480840193829003018186803b158015611d3557600080fd5b505afa158015611d49573d6000803e3d6000fd5b505050506040513d6020811015611d5f57600080fd5b505183518490600385880201908110611d7457fe5b602002602001018181525050866001600160a01b0316636ce8a44b826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611dcd57600080fd5b505afa158015611de1573d6000803e3d6000fd5b505050506040513d6020811015611df757600080fd5b5051611e04576000611e07565b60015b60ff168385840260040181518110611e1b57fe5b602002602001018181525050866001600160a01b03166348cac277826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611e7457600080fd5b505afa158015611e88573d6000803e3d6000fd5b505050506040513d6020811015611e9e57600080fd5b505183518490600585880201908110611eb357fe5b602090810291909101015250600101611ae0565b600080600080876001600160a01b03166381a612d6886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611f1a57600080fd5b505afa158015611f2e573d6000803e3d6000fd5b505050506040513d6020811015611f4457600080fd5b5051604080516323b95ceb60e21b81526001600160a01b038a811660048301529151929350600092918b1691638ee573ac91602480820192602092909190829003018186803b158015611f9657600080fd5b505afa158015611faa573d6000803e3d6000fd5b505050506040513d6020811015611fc057600080fd5b505190506000611fe76c0c9f2c9cd04674edea40000000611fe189866158fd565b90615956565b9050612003600a83900a611fe183670de0b6b3a76400006158fd565b905060008a6001600160a01b03166342b60b038b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561205457600080fd5b505afa158015612068573d6000803e3d6000fd5b505050506040513d602081101561207e57600080fd5b5051801561210157508a6001600160a01b03166342b60b038a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156120d457600080fd5b505afa1580156120e8573d6000803e3d6000fd5b505050506040513d60208110156120fe57600080fd5b50515b9050600081612174578b6001600160a01b031663a22f23926040518163ffffffff1660e01b815260040160206040518083038186803b15801561214357600080fd5b505afa158015612157573d6000803e3d6000fd5b505050506040513d602081101561216d57600080fd5b50516121da565b8b6001600160a01b031663df73a2676040518163ffffffff1660e01b815260040160206040518083038186803b1580156121ad57600080fd5b505afa1580156121c1573d6000803e3d6000fd5b505050506040513d60208110156121d757600080fd5b50515b905060008261224d578c6001600160a01b0316637a210a2b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561221c57600080fd5b505afa158015612230573d6000803e3d6000fd5b505050506040513d602081101561224657600080fd5b50516122b3565b8c6001600160a01b03166310eb56c26040518163ffffffff1660e01b815260040160206040518083038186803b15801561228657600080fd5b505afa15801561229a573d6000803e3d6000fd5b505050506040513d60208110156122b057600080fd5b50515b905060008d6001600160a01b031663c7e074c38e87868660016040518663ffffffff1660e01b815260040180866001600160a01b0316815260200185815260200184815260200183815260200182151581526020019550505050505060206040518083038186803b15801561232757600080fd5b505afa15801561233b573d6000803e3d6000fd5b505050506040513d602081101561235157600080fd5b8101908080519060200190929190505050905060008e6001600160a01b031663c7e074c38e88878760006040518663ffffffff1660e01b815260040180866001600160a01b0316815260200185815260200184815260200183815260200182151581526020019550505050505060206040518083038186803b1580156123d657600080fd5b505afa1580156123ea573d6000803e3d6000fd5b505050506040513d602081101561240057600080fd5b5051905060008183116124135781612415565b825b9b509199509750505050505050509450945094915050565b606060006007905060608184510267ffffffffffffffff8111801561245157600080fd5b5060405190808252806020026020018201604052801561247b578160200160208202803683370190505b50905060005b8451811015611a7e57600085828151811061249857fe5b60200260200101519050806001600160a01b0316635d50e729886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156124ef57600080fd5b505afa158015612503573d6000803e3d6000fd5b505050506040513d602081101561251957600080fd5b50518351849084870290811061252b57fe5b602002602001018181525050806001600160a01b031663d5a73fdd886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561258457600080fd5b505afa158015612598573d6000803e3d6000fd5b505050506040513d60208110156125ae57600080fd5b5051835184906001858802019081106125c357fe5b6020026020010181815250508582815181106125db57fe5b60200260200101516001600160a01b03166370a08231886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561262f57600080fd5b505afa158015612643573d6000803e3d6000fd5b505050506040513d602081101561265957600080fd5b50518351849060028588020190811061266e57fe5b602002602001018181525050806001600160a01b03166371417b32886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156126c757600080fd5b505afa1580156126db573d6000803e3d6000fd5b505050506040513d60208110156126f157600080fd5b50518351849060038588020190811061270657fe5b602002602001018181525050806001600160a01b031663402914f5886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561275f57600080fd5b505afa158015612773573d6000803e3d6000fd5b505050506040513d602081101561278957600080fd5b50518351849060048588020190811061279e57fe5b602002602001018181525050806001600160a01b03166308f26c76886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156127f757600080fd5b505afa15801561280b573d6000803e3d6000fd5b505050506040513d602081101561282157600080fd5b50518351849060058588020190811061283657fe5b602002602001018181525050806001600160a01b03166345f01ee6886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561288f57600080fd5b505afa1580156128a3573d6000803e3d6000fd5b505050506040513d60208110156128b957600080fd5b5051835184906006858802019081106128ce57fe5b602090810291909101015250600101612481565b60606000600c905060008690506000816001600160a01b031663741bef1a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561292a57600080fd5b505afa15801561293e573d6000803e3d6000fd5b505050506040513d602081101561295457600080fd5b50518551909150606090840267ffffffffffffffff8111801561297657600080fd5b506040519080825280602002602001820160405280156129a0578160200160208202803683370190505b50905060005b865181101561164f5760008782815181106129bd57fe5b6020026020010151905060006001600160a01b0316816001600160a01b031614156129e55750885b846001600160a01b03166352f55eed826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612a3257600080fd5b505afa158015612a46573d6000803e3d6000fd5b505050506040513d6020811015612a5c57600080fd5b505183518490848902908110612a6e57fe5b602002602001018181525050846001600160a01b031663c3c7b9e9826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612ac757600080fd5b505afa158015612adb573d6000803e3d6000fd5b505050506040513d6020811015612af157600080fd5b5051835184906001858a0201908110612b0657fe5b602002602001018181525050846001600160a01b03166383867b2d826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612b5f57600080fd5b505afa158015612b73573d6000803e3d6000fd5b505050506040513d6020811015612b8957600080fd5b5051835184906002858a0201908110612b9e57fe5b602002602001018181525050846001600160a01b0316632c668ec1828b6040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b158015612bff57600080fd5b505afa158015612c13573d6000803e3d6000fd5b505050506040513d6020811015612c2957600080fd5b5051835184906003858a0201908110612c3e57fe5b602002602001018181525050846001600160a01b031663ab2f3ad4826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612c9757600080fd5b505afa158015612cab573d6000803e3d6000fd5b505050506040513d6020811015612cc157600080fd5b5051835184906004858a0201908110612cd657fe5b602002602001018181525050846001600160a01b0316634a993ee9826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612d2f57600080fd5b505afa158015612d43573d6000803e3d6000fd5b505050506040513d6020811015612d5957600080fd5b5051835184906005858a0201908110612d6e57fe5b602002602001018181525050846001600160a01b0316639acc6b33826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612dc757600080fd5b505afa158015612ddb573d6000803e3d6000fd5b505050506040513d6020811015612df157600080fd5b5051835184906006858a0201908110612e0657fe5b602002602001018181525050846001600160a01b03166381a612d6826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612e5f57600080fd5b505afa158015612e73573d6000803e3d6000fd5b505050506040513d6020811015612e8957600080fd5b5051835184906007858a0201908110612e9e57fe5b602002602001018181525050846001600160a01b031663e124e6d2826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612ef757600080fd5b505afa158015612f0b573d6000803e3d6000fd5b505050506040513d6020811015612f2157600080fd5b5051835184906008858a0201908110612f3657fe5b602002602001018181525050846001600160a01b031663f07456ce826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612f8f57600080fd5b505afa158015612fa3573d6000803e3d6000fd5b505050506040513d6020811015612fb957600080fd5b5051835184906009858a0201908110612fce57fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038481166004830152600060248301529151918716926356c8c2c192604480840193829003018186803b15801561302857600080fd5b505afa15801561303c573d6000803e3d6000fd5b505050506040513d602081101561305257600080fd5b505183518490600a858a020190811061306757fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038481166004830152600160248301529151918716926356c8c2c192604480840193829003018186803b1580156130c157600080fd5b505afa1580156130d5573d6000803e3d6000fd5b505050506040513d60208110156130eb57600080fd5b505183518490600b858a020190811061310057fe5b6020908102919091010152506001016129a6565b606080825167ffffffffffffffff8111801561312f57600080fd5b50604051908082528060200260200182016040528015613159578160200160208202803683370190505b50905060005b835181101561187757846001600160a01b0316631ce9cb8f85838151811061318357fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156131c857600080fd5b505afa1580156131dc573d6000803e3d6000fd5b505050506040513d60208110156131f257600080fd5b5051825183908390811061320257fe5b602090810291909101015260010161315f565b60606000600e905060008690506000816001600160a01b031663741bef1a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561325d57600080fd5b505afa158015613271573d6000803e3d6000fd5b505050506040513d602081101561328757600080fd5b50518551909150606090840267ffffffffffffffff811180156132a957600080fd5b506040519080825280602002602001820160405280156132d3578160200160208202803683370190505b50905060005b865181101561164f5760008782815181106132f057fe5b6020026020010151905060006001600160a01b0316816001600160a01b031614156133185750885b60008054600160a01b900460ff166133315760006133ab565b856001600160a01b0316639698d25a836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561337e57600080fd5b505afa158015613392573d6000803e3d6000fd5b505050506040513d60208110156133a857600080fd5b50515b9050856001600160a01b03166352f55eed836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156133fa57600080fd5b505afa15801561340e573d6000803e3d6000fd5b505050506040513d602081101561342457600080fd5b505184518590858a0290811061343657fe5b602002602001018181525050856001600160a01b031663c3c7b9e9836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561348f57600080fd5b505afa1580156134a3573d6000803e3d6000fd5b505050506040513d60208110156134b957600080fd5b5051845185906001868b02019081106134ce57fe5b602002602001018181525050856001600160a01b03166383867b2d836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561352757600080fd5b505afa15801561353b573d6000803e3d6000fd5b505050506040513d602081101561355157600080fd5b5051845185906002868b020190811061356657fe5b602002602001018181525050856001600160a01b0316632c668ec1838c6040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b1580156135c757600080fd5b505afa1580156135db573d6000803e3d6000fd5b505050506040513d60208110156135f157600080fd5b5051845185906003868b020190811061360657fe5b602002602001018181525050856001600160a01b031663ab2f3ad4836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561365f57600080fd5b505afa158015613673573d6000803e3d6000fd5b505050506040513d602081101561368957600080fd5b5051845185906004868b020190811061369e57fe5b602002602001018181525050856001600160a01b0316634a993ee9836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156136f757600080fd5b505afa15801561370b573d6000803e3d6000fd5b505050506040513d602081101561372157600080fd5b5051845185906005868b020190811061373657fe5b602002602001018181525050856001600160a01b0316639acc6b33836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561378f57600080fd5b505afa1580156137a3573d6000803e3d6000fd5b505050506040513d60208110156137b957600080fd5b5051845185906006868b02019081106137ce57fe5b602002602001018181525050856001600160a01b0316638a78daa8836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561382757600080fd5b505afa15801561383b573d6000803e3d6000fd5b505050506040513d602081101561385157600080fd5b5051845185906007868b020190811061386657fe5b60200260200101818152505080848885026008018151811061388457fe5b602002602001018181525050856001600160a01b03166381a612d6836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156138dd57600080fd5b505afa1580156138f1573d6000803e3d6000fd5b505050506040513d602081101561390757600080fd5b5051845185906009868b020190811061391c57fe5b602002602001018181525050856001600160a01b031663e124e6d2836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561397557600080fd5b505afa158015613989573d6000803e3d6000fd5b505050506040513d602081101561399f57600080fd5b505184518590600a868b02019081106139b457fe5b602002602001018181525050856001600160a01b031663f07456ce836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015613a0d57600080fd5b505afa158015613a21573d6000803e3d6000fd5b505050506040513d6020811015613a3757600080fd5b505184518590600b868b0201908110613a4c57fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038581166004830152600060248301529151918816926356c8c2c192604480840193829003018186803b158015613aa657600080fd5b505afa158015613aba573d6000803e3d6000fd5b505050506040513d6020811015613ad057600080fd5b505184518590600c868b0201908110613ae557fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038581166004830152600160248301529151918816926356c8c2c192604480840193829003018186803b158015613b3f57600080fd5b505afa158015613b53573d6000803e3d6000fd5b505050506040513d6020811015613b6957600080fd5b505184518590600d868b0201908110613b7e57fe5b602090810291909101015250506001016132d9565b606060006002905060608184510267ffffffffffffffff81118015613bb757600080fd5b50604051908082528060200260200182016040528015613be1578160200160208202803683370190505b50905060005b8451811015611a7e576000858281518110613bfe57fe5b60200260200101519050806001600160a01b031663402914f5886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015613c5557600080fd5b505afa158015613c69573d6000803e3d6000fd5b505050506040513d6020811015613c7f57600080fd5b505183518490848702908110613c9157fe5b602002602001018181525050806001600160a01b0316632459f51d6040518163ffffffff1660e01b815260040160206040518083038186803b158015613cd657600080fd5b505afa158015613cea573d6000803e3d6000fd5b505050506040513d6020811015613d0057600080fd5b505183518490600185880201908110613d1557fe5b602090810291909101015250600101613be7565b6c0c9f2c9cd04674edea4000000081565b606060006002905060608184510267ffffffffffffffff81118015613d5e57600080fd5b50604051908082528060200260200182016040528015613d88578160200160208202803683370190505b5090508560005b8551811015614214576000868281518110613da657fe5b6020026020010151905060006001600160a01b0316816001600160a01b03161415613dce5750865b6000836001600160a01b03166342b60b03836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015613e1d57600080fd5b505afa158015613e31573d6000803e3d6000fd5b505050506040513d6020811015613e4757600080fd5b5051613eb757836001600160a01b031663c4f718bf6040518163ffffffff1660e01b815260040160206040518083038186803b158015613e8657600080fd5b505afa158015613e9a573d6000803e3d6000fd5b505050506040513d6020811015613eb057600080fd5b5051613f1d565b836001600160a01b031663134ca63b6040518163ffffffff1660e01b815260040160206040518083038186803b158015613ef057600080fd5b505afa158015613f04573d6000803e3d6000fd5b505050506040513d6020811015613f1a57600080fd5b50515b90506000846001600160a01b031663c3c7b9e9846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015613f6e57600080fd5b505afa158015613f82573d6000803e3d6000fd5b505050506040513d6020811015613f9857600080fd5b5051604080516352f55eed60e01b81526001600160a01b0386811660048301529151929350600092918816916352f55eed91602480820192602092909190829003018186803b158015613fea57600080fd5b505afa158015613ffe573d6000803e3d6000fd5b505050506040513d602081101561401457600080fd5b5051905080156140475761402c81611fe185856158fd565b878987028151811061403a57fe5b6020026020010181815250505b6000866001600160a01b031663c65bc7b1866040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561409657600080fd5b505afa1580156140aa573d6000803e3d6000fd5b505050506040513d60208110156140c057600080fd5b50511115614204576000866001600160a01b031663a93acac2866040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561411757600080fd5b505afa15801561412b573d6000803e3d6000fd5b505050506040513d602081101561414157600080fd5b5051604080517fc65bc7b10000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301529151929350600092918a169163c65bc7b191602480820192602092909190829003018186803b1580156141ac57600080fd5b505afa1580156141c0573d6000803e3d6000fd5b505050506040513d60208110156141d657600080fd5b505190506141e48183615998565b898b8902600101815181106141f557fe5b60200260200101818152505050505b505060019092019150613d8f9050565b5090925050505b9392505050565b6000546001600160a01b03163314614281576040805162461bcd60e51b815260206004820152601560248201527f476f7665726e61626c653a20666f7262696464656e0000000000000000000000604482015290519081900360640190fd5b60008054911515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909216919091179055565b805160609060029081908390829004820267ffffffffffffffff811180156142e157600080fd5b5060405190808252806020026020018201604052801561430b578160200160208202803683370190505b50905060005b8386518161431b57fe5b04811015614536576000868583028151811061433357fe5b602002602001015190506000878684026001018151811061435057fe5b602002602001015190506000896001600160a01b031663e6a4390584846040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b1580156143ba57600080fd5b505afa1580156143ce573d6000803e3d6000fd5b505050506040513d60208110156143e457600080fd5b5051604080517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0380841660048301529151929350908516916370a0823191602480820192602092909190829003018186803b15801561444c57600080fd5b505afa158015614460573d6000803e3d6000fd5b505050506040513d602081101561447657600080fd5b50518551869086890290811061448857fe5b602002602001018181525050816001600160a01b03166370a08231826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156144e157600080fd5b505afa1580156144f5573d6000803e3d6000fd5b505050506040513d602081101561450b57600080fd5b5051855186906001878a020190811061452057fe5b6020908102919091010152505050600101614311565b5095945050505050565b600981565b600054600160a01b900460ff1681565b6000546001600160a01b031633146145b4576040805162461bcd60e51b815260206004820152601560248201527f476f7665726e61626c653a20666f7262696464656e0000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000806000866001600160a01b03166381a612d6876040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561464057600080fd5b505afa158015614654573d6000803e3d6000fd5b505050506040513d602081101561466a57600080fd5b5051604080516323b95ceb60e21b81526001600160a01b0389811660048301529151929350600092918a1691638ee573ac91602480820192602092909190829003018186803b1580156146bc57600080fd5b505afa1580156146d0573d6000803e3d6000fd5b505050506040513d60208110156146e657600080fd5b5051604080516323b95ceb60e21b81526001600160a01b0389811660048301529151929350600092918b1691638ee573ac91602480820192602092909190829003018186803b15801561473857600080fd5b505afa15801561474c573d6000803e3d6000fd5b505050506040513d602081101561476257600080fd5b505190506000806147846c0c9f2c9cd04674edea40000000611fe18a886158fd565b90506147a0600a85900a611fe183670de0b6b3a76400006158fd565b905060008b6001600160a01b03166342b60b038c6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156147f157600080fd5b505afa158015614805573d6000803e3d6000fd5b505050506040513d602081101561481b57600080fd5b5051801561489e57508b6001600160a01b03166342b60b038b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561487157600080fd5b505afa158015614885573d6000803e3d6000fd5b505050506040513d602081101561489b57600080fd5b50515b9050600081614911578c6001600160a01b031663a22f23926040518163ffffffff1660e01b815260040160206040518083038186803b1580156148e057600080fd5b505afa1580156148f4573d6000803e3d6000fd5b505050506040513d602081101561490a57600080fd5b5051614977565b8c6001600160a01b031663df73a2676040518163ffffffff1660e01b815260040160206040518083038186803b15801561494a57600080fd5b505afa15801561495e573d6000803e3d6000fd5b505050506040513d602081101561497457600080fd5b50515b90506000826149ea578d6001600160a01b0316637a210a2b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156149b957600080fd5b505afa1580156149cd573d6000803e3d6000fd5b505050506040513d60208110156149e357600080fd5b5051614a50565b8d6001600160a01b03166310eb56c26040518163ffffffff1660e01b815260040160206040518083038186803b158015614a2357600080fd5b505afa158015614a37573d6000803e3d6000fd5b505050506040513d6020811015614a4d57600080fd5b50515b905060008e6001600160a01b031663c7e074c38f87868660016040518663ffffffff1660e01b815260040180866001600160a01b0316815260200185815260200184815260200183815260200182151581526020019550505050505060206040518083038186803b158015614ac457600080fd5b505afa158015614ad8573d6000803e3d6000fd5b505050506040513d6020811015614aee57600080fd5b8101908080519060200190929190505050905060008f6001600160a01b031663c7e074c38f88878760006040518663ffffffff1660e01b815260040180866001600160a01b0316815260200185815260200184815260200183815260200182151581526020019550505050505060206040518083038186803b158015614b7357600080fd5b505afa158015614b87573d6000803e3d6000fd5b505050506040513d6020811015614b9d57600080fd5b50519050808211614bae5780614bb0565b815b965050505050505060008a6001600160a01b031663e124e6d28a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015614c0757600080fd5b505afa158015614c1b573d6000803e3d6000fd5b505050506040513d6020811015614c3157600080fd5b505190506000614c4582611fe18b896158fd565b9050614c6485600a0a611fe186600a0a846158fd90919063ffffffff16565b90506000614c82612710611fe1614c7b82886158bb565b85906158fd565b90506000614c9083836158bb565b919e919d50909b505050505050505050505050565b606080825167ffffffffffffffff81118015614cc057600080fd5b50604051908082528060200260200182016040528015614cea578160200160208202803683370190505b50905060005b8351811015611877576000848281518110614d0757fe5b6020026020010151905060006001600160a01b0316816001600160a01b03161415614d5557856001600160a01b031631838381518110614d4357fe5b60200260200101818152505050614dea565b806001600160a01b03166370a08231876040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015614da257600080fd5b505afa158015614db6573d6000803e3d6000fd5b505050506040513d6020811015614dcc57600080fd5b50518351849084908110614ddc57fe5b602002602001018181525050505b600101614cf0565b606080600985510267ffffffffffffffff81118015614e1057600080fd5b50604051908082528060200260200182016040528015614e3a578160200160208202803683370190505b50905060005b85518110156151e45760008060008060008060008e6001600160a01b0316634a3f088d8f8f8b81518110614e7057fe5b60200260200101518f8c81518110614e8457fe5b60200260200101518f8d81518110614e9857fe5b60200260200101516040518563ffffffff1660e01b815260040180856001600160a01b03168152602001846001600160a01b03168152602001836001600160a01b0316815260200182151581526020019450505050506101006040518083038186803b158015614f0757600080fd5b505afa158015614f1b573d6000803e3d6000fd5b505050506040513d610100811015614f3257600080fd5b50805160208201516040830151606084015160a085015160c086015160e0909601518f51959d50939b509199509750955091935090915087908a9060098b02908110614f7a57fe5b602002602001018181525050858960098a0260010181518110614f9957fe5b602002602001018181525050848960098a0260020181518110614fb857fe5b602002602001018181525050838960098a0260030181518110614fd757fe5b60200260200101818152505081614fef576000614ff2565b60015b60ff168960098a026004018151811061500757fe5b602002602001018181525050828960098a026005018151811061502657fe5b602002602001018181525050808960098a026006018151811061504557fe5b60200260200101818152505050505050505050600082600983028151811061506957fe5b60200260200101519050600083600984026002018151811061508757fe5b6020026020010151905060008460098502600601815181106150a557fe5b6020026020010151905060008211156151d9576000808c6001600160a01b0316635c07eaab8b88815181106150d657fe5b602002602001015187878d8b815181106150ec57fe5b6020026020010151886040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001831515815260200182815260200195505050505050604080518083038186803b15801561514f57600080fd5b505afa158015615163573d6000803e3d6000fd5b505050506040513d604081101561517957600080fd5b508051602090910151909250905081615193576000615196565b60015b60ff168760098802600701815181106151ab57fe5b602002602001018181525050808760098802600801815181106151ca57fe5b60200260200101818152505050505b505050600101614e40565b509695505050505050565b600080846001600160a01b03166381a612d6856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561523f57600080fd5b505afa158015615253573d6000803e3d6000fd5b505050506040513d602081101561526957600080fd5b5051604080517fe124e6d20000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015291519293506000929188169163e124e6d291602480820192602092909190829003018186803b1580156152d457600080fd5b505afa1580156152e8573d6000803e3d6000fd5b505050506040513d60208110156152fe57600080fd5b5051604080516323b95ceb60e21b81526001600160a01b038881166004830152915192935060009291891691638ee573ac91602480820192602092909190829003018186803b15801561535057600080fd5b505afa158015615364573d6000803e3d6000fd5b505050506040513d602081101561537a57600080fd5b5051604080516323b95ceb60e21b81526001600160a01b0388811660048301529151929350600092918a1691638ee573ac91602480820192602092909190829003018186803b1580156153cc57600080fd5b505afa1580156153e0573d6000803e3d6000fd5b505050506040513d60208110156153f657600080fd5b5051604080516352f55eed60e01b81526001600160a01b038981166004830152915192935060009283928c16916352f55eed916024808301926020929190829003018186803b15801561544857600080fd5b505afa15801561545c573d6000803e3d6000fd5b505050506040513d602081101561547257600080fd5b5051604080517fc3c7b9e90000000000000000000000000000000000000000000000000000000081526001600160a01b038b811660048301529151929350600092918d169163c3c7b9e991602480820192602092909190829003018186803b1580156154dd57600080fd5b505afa1580156154f1573d6000803e3d6000fd5b505050506040513d602081101561550757600080fd5b5051604080517f4a993ee90000000000000000000000000000000000000000000000000000000081526001600160a01b038c811660048301529151929350600092918e1691634a993ee991602480820192602092909190829003018186803b15801561557257600080fd5b505afa158015615586573d6000803e3d6000fd5b505050506040513d602081101561559c57600080fd5b5051905060008183116155af57816155b1565b825b90508381106155cc576000995050505050505050505061421b565b60006155d885836158bb565b905061560587600a0a611fe18a600a0a6155ff8e611fe18f886158fd90919063ffffffff16565b906158fd565b955050505050506000896001600160a01b0316639acc6b338a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561565b57600080fd5b505afa15801561566f573d6000803e3d6000fd5b505050506040513d602081101561568557600080fd5b50519050801561164f57896001600160a01b03166383867b2d8a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156156dc57600080fd5b505afa1580156156f0573d6000803e3d6000fd5b505050506040513d602081101561570657600080fd5b505181101561571e576000965050505050505061421b565b60006157a38b6001600160a01b03166383867b2d8c6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561577057600080fd5b505afa158015615784573d6000803e3d6000fd5b505050506040513d602081101561579a57600080fd5b505183906158bb565b90506157bf670de0b6b3a7640000611fe183600a89900a6158fd565b90506157dc87611fe1836c0c9f2c9cd04674edea400000006158fd565b9050808311156157f457965061421b95505050505050565b505098975050505050505050565b600080805b835181101561187757600084828151811061581e57fe5b602002602001015190506000866001600160a01b03166370a08231836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561587757600080fd5b505afa15801561588b573d6000803e3d6000fd5b505050506040513d60208110156158a157600080fd5b505190506158af8482615998565b93505050600101615807565b600061421b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506159f2565b60008261590c5750600061187b565b8282028284828161591957fe5b041461421b5760405162461bcd60e51b8152600401808060200182810382526021815260200180615aef6021913960400191505060405180910390fd5b600061421b83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250615a89565b60008282018381101561421b576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008184841115615a815760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015615a46578181015183820152602001615a2e565b50505050905090810190601f168015615a735780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008183615ad85760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315615a46578181015183820152602001615a2e565b506000838581615ae457fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212205f24d9d6cb61c7ac8a7374f630374d23be74d3da215bb2fd0409f7888bfab21a64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3,
        "contract": "contracts/peripherals/Reader.sol:Reader",
        "label": "gov",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12288,
        "contract": "contracts/peripherals/Reader.sol:Reader",
        "label": "hasMaxGlobalShortSizes",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}