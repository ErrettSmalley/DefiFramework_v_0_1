{
  "address": "0x388Ca3664Cb1635aE8348AB2A1Bb6C0652f5E693",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_shortsTracker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_depositFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_orderBook",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withdrawETH",
          "type": "bool"
        }
      ],
      "name": "decreasePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "feeReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "increasePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "increasePositionBufferBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "increasePositionETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isLiquidator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isOrderKeeper",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isPartner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_feeReceiver",
          "type": "address"
        }
      ],
      "name": "liquidatePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxGlobalLongSizes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxGlobalShortSizes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "opened",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orderBook",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralStorage",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sendValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositFee",
          "type": "uint256"
        }
      ],
      "name": "setDepositFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_increasePositionBufferBps",
          "type": "uint256"
        }
      ],
      "name": "setIncreasePositionBufferBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        }
      ],
      "name": "setLiquidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_longSizes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_shortSizes",
          "type": "uint256[]"
        }
      ],
      "name": "setMaxGlobalSizes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_opened",
          "type": "bool"
        }
      ],
      "name": "setOpened",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        }
      ],
      "name": "setOrderKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        }
      ],
      "name": "setPartner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_referralStorage",
          "type": "address"
        }
      ],
      "name": "setReferralStorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_shouldValidateIncreaseOrder",
          "type": "bool"
        }
      ],
      "name": "setShouldValidateIncreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shortsTracker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shouldValidateIncreaseOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x87a0cc36e7141f776bb3e01a12004409addc51678145b11f995b53e355d2c6b2",
  "receipt": {
    "to": null,
    "from": "0x9B6B26Db5F9149F0e3f4DAF2Eb98307020236dDB",
    "contractAddress": "0x388Ca3664Cb1635aE8348AB2A1Bb6C0652f5E693",
    "transactionIndex": 0,
    "gasUsed": "4021589",
    "logsBloom": "0x
    "blockHash": "0x2e0c3726ce93f1d401cc6ba59074fcbbbba16c1b70766bfb49b4cf6a107c9405",
    "transactionHash": "0x87a0cc36e7141f776bb3e01a12004409addc51678145b11f995b53e355d2c6b2",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 33420433,
        "transactionHash": "0x87a0cc36e7141f776bb3e01a12004409addc51678145b11f995b53e355d2c6b2",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009b6b26db5f9149f0e3f4daf2eb98307020236ddb",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x000000000000000000000000000000000000000000000000035940d54ed262b00000000000000000000000000000000000000000000000008b47085ab8eba32d000000000000000000000000000000000000000000000c1f9605241175fb18f700000000000000000000000000000000000000000000000087edc7856a19407d000000000000000000000000000000000000000000000c1f995e64e6c4cd7ba7",
        "logIndex": 0,
        "blockHash": "0x2e0c3726ce93f1d401cc6ba59074fcbbbba16c1b70766bfb49b4cf6a107c9405"
      }
    ],
    "blockNumber": 33420433,
    "cumulativeGasUsed": "4021589",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc54aa813eF930Aa3F3fc4C646e134a53D2d08277",
    "0xDf6B69098507cbbE21f57BC7a58790D75A61AAdA",
    "0x165a116e1da7cf312085505475311d448Cd20890",
    "0x09Ed1597f5803360189F39E3348Ea9C342Fd0233",
    50,
    "0xeF10b34cEd3cFefaB6c0Da20d6615739b4ECc2Dd"
  ],
  "numDeployments": 1,
  "solcInputHash": "59bf562207d3b98a68d8cbf2ed09b4a8",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shortsTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_orderBook\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withdrawETH\",\"type\":\"bool\"}],\"name\":\"decreasePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"increasePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increasePositionBufferBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"increasePositionETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOrderKeeper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPartner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"liquidatePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxGlobalLongSizes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxGlobalShortSizes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"opened\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderBook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"}],\"name\":\"setDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_increasePositionBufferBps\",\"type\":\"uint256\"}],\"name\":\"setIncreasePositionBufferBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setLiquidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_longSizes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shortSizes\",\"type\":\"uint256[]\"}],\"name\":\"setMaxGlobalSizes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_opened\",\"type\":\"bool\"}],\"name\":\"setOpened\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setOrderKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setPartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referralStorage\",\"type\":\"address\"}],\"name\":\"setReferralStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_shouldValidateIncreaseOrder\",\"type\":\"bool\"}],\"name\":\"setShouldValidateIncreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shortsTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldValidateIncreaseOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/PositionManager.sol\":\"PositionManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ncontract Governable {\\n    address public gov;\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"Governable: forbidden\\\");\\n        _;\\n    }\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n}\\n\",\"keccak256\":\"0x369f345bc3ec6caba2e5abb12a3b4255da3c6b96374ffbd0b715e64e6508577f\",\"license\":\"MIT\"},\"contracts/core/BasePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"./settings/BasePositionManagerSettings.sol\\\";\\n\\ncontract BasePositionManager is BasePositionManagerSettings {\\n    \\n    constructor(address _vault, address _router, address _shortsTracker, address _weth, uint256 _depositFee) public {\\n        vault = _vault;\\n        router = _router;\\n        weth = _weth;\\n        depositFee = _depositFee;\\n        shortsTracker = _shortsTracker;\\n        admin = msg.sender;\\n    }\\n    function withdrawFees(address _token, address _receiver) external onlyAdmin {\\n        uint256 amount = feeReserves[_token];\\n        if (amount == 0) {return;}\\n        feeReserves[_token] = 0;\\n        IERC20(_token).safeTransfer(_receiver, amount);\\n        emit Events.WithdrawFees(_token, _receiver, amount);\\n    }\\n\\n    function approve(address _token, address _spender, uint256 _amount) external onlyGov {\\n        IERC20(_token).approve(_spender, _amount);\\n    }\\n\\n    function sendValue(address payable _receiver, uint256 _amount) external onlyGov {\\n        _receiver.sendValue(_amount);\\n    }\\n}\\n\",\"keccak256\":\"0xaa9b75fa023081fd4688b950cfc71369cc82e1c3f87f16a2b546f2c2e9de0883\",\"license\":\"MIT\"},\"contracts/core/PositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"./BasePositionManager.sol\\\";\\nimport \\\"./settings/PositionManagerSettings.sol\\\";\\n\\ncontract PositionManager is BasePositionManager, PositionManagerSettings {\\n\\n    constructor(address _vault, address _router, address _shortsTracker, address _weth, uint256 _depositFee, address _orderBook) public BasePositionManager(_vault, _router, _shortsTracker, _weth, _depositFee) {\\n        orderBook = _orderBook;\\n    }\\n    \\n    function increasePosition(address[] memory _path, address _indexToken, uint256 _amountIn, uint256 _minOut, uint256 _sizeDelta, bool _isLong, uint256 _price) external nonReentrant onlyPartnersOrOpened {\\n        require(_path.length == 1 || _path.length == 2, Errors.POSITIONMANAGER_INVALID_PATH_LENGTH);\\n        if (_amountIn > 0) {\\n            if (_path.length == 1) {\\n                IRouter(router).pluginTransfer(_path[0], msg.sender, address(this), _amountIn);\\n            } else {\\n                IRouter(router).pluginTransfer(_path[0], msg.sender, vault, _amountIn);\\n                _amountIn = _swap(_path, _minOut, address(this));\\n            }\\n            uint256 afterFeeAmount = _collectFees(msg.sender, _path, _amountIn, _indexToken, _isLong, _sizeDelta);\\n            IERC20(_path[_path.length - 1]).safeTransfer(vault, afterFeeAmount);\\n        }\\n        _increasePosition(msg.sender, _path[_path.length - 1], _indexToken, _sizeDelta, _isLong, _price);\\n    }\\n\\n    function increasePositionETH(address[] memory _path, address _indexToken, uint256 _minOut, uint256 _sizeDelta, bool _isLong, uint256 _price) external payable nonReentrant onlyPartnersOrOpened {\\n        require(_path.length == 1 || _path.length == 2, Errors.POSITIONMANAGER_INVALID_PATH_LENGTH);\\n        require(_path[0] == weth, Errors.POSITIONMANAGER_INVALID_PATH);\\n        if (msg.value > 0) {\\n            _transferInETH();\\n            uint256 _amountIn = msg.value;\\n            if (_path.length > 1) {\\n                IERC20(weth).safeTransfer(vault, msg.value);\\n                _amountIn = _swap(_path, _minOut, address(this));\\n            }\\n            uint256 afterFeeAmount = _collectFees(msg.sender, _path, _amountIn, _indexToken, _isLong, _sizeDelta);\\n            IERC20(_path[_path.length - 1]).safeTransfer(vault, afterFeeAmount);\\n        }\\n        _increasePosition(msg.sender, _path[_path.length - 1], _indexToken, _sizeDelta, _isLong, _price);\\n    }\\n\\n    function decreasePosition(address[] memory _path, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver, uint256 _price, uint256 _minOut, bool _withdrawETH) external nonReentrant onlyPartnersOrOpened {\\n        require(_path.length == 1 || _path.length == 2, Errors.POSITIONMANAGER_INVALID_PATH_LENGTH);\\n        if (_withdrawETH) require(_path[_path.length - 1] == weth, Errors.POSITIONMANAGER_INVALID_PATH);\\n        uint256 amountOut = _decreasePosition(msg.sender, _path[0], _indexToken, _collateralDelta, _sizeDelta, _isLong, address(this), _price);\\n        if (amountOut > 0) {\\n            if (_path.length > 1) {\\n                IERC20(_path[0]).safeTransfer(vault, amountOut);\\n                amountOut = _swap(_path, _minOut, address(this));\\n            }\\n            if (_withdrawETH) {\\n                _transferOutETHWithGasLimitIgnoreFail(amountOut, payable(_receiver));\\n            } else {\\n                IERC20(_path[_path.length - 1]).safeTransfer(_receiver, amountOut);\\n            }\\n        }\\n    }\\n\\n    function liquidatePosition(address _account, address _collateralToken, address _indexToken, bool _isLong, address _feeReceiver) external nonReentrant onlyLiquidator {\\n        address _vault = vault;\\n        address timelock = IVault(_vault).gov();\\n        (uint256 size, , , , , , ,) = IVault(vault).getPosition(_account, _collateralToken, _indexToken, _isLong);\\n        uint256 markPrice = _isLong ? IVault(_vault).getMinPrice(_indexToken) : IVault(_vault).getMaxPrice(_indexToken);\\n        IShortsTracker(shortsTracker).updateGlobalShortData(_account, _collateralToken, _indexToken, _isLong, size, markPrice, false);\\n        ITimelock(timelock).enableLeverage(_vault);\\n        IVault(_vault).liquidatePosition(_account, _collateralToken, _indexToken, _isLong, _feeReceiver);\\n        ITimelock(timelock).disableLeverage(_vault);\\n    }\\n}\\n\",\"keccak256\":\"0x7979658224add0f1f3fcb6ea9ab71cc011f0740c0ec148eab8cf23349f3637cc\",\"license\":\"MIT\"},\"contracts/core/interfaces/IBasePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IBasePositionManager {\\n    function maxGlobalLongSizes(address _token) external view returns (uint256);\\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd76708dc7d8d65da97fdf5c047cbc2be771f8815476e2afd57d36d63d2592609\",\"license\":\"MIT\"},\"contracts/core/interfaces/IOrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IOrderBook {\\n//\\tfunction getSwapOrder(address _account, uint256 _orderIndex) external view returns (address path0, address path1, address path2, uint256 amountIn, uint256 minOut, uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n//  function getIncreaseOrder(address _account, uint256 _orderIndex) external view returns (address purchaseToken, uint256 purchaseTokenAmount, address collateralToken, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee);\\n//  function getDecreaseOrder(address _account, uint256 _orderIndex) external view returns (address collateralToken, uint256 collateralDelta, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee);\\n//    function executeSwapOrder(address, uint256, address payable) external;\\n//    function executeDecreaseOrder(address, uint256, address payable) external;\\n//    function executeIncreaseOrder(address, uint256, address payable) external;\\n}\\n\",\"keccak256\":\"0x51cc5f804b35961b1ddd0e0909a90eab34c523f6ec56b56e84ab51203c8bd28c\",\"license\":\"MIT\"},\"contracts/core/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IRouter {\\n    function addPlugin(address _plugin) external;\\n    function pluginTransfer(address _token, address _account, address _receiver, uint256 _amount) external;\\n    function pluginIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function pluginDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n    function swap(address[] memory _path, uint256 _amountIn, uint256 _minOut, address _receiver) external;\\n}\\n\",\"keccak256\":\"0x68ee3ea5df5884cf76de6c0bbbf463926ffc511658a81ef6f467482300d2977a\",\"license\":\"MIT\"},\"contracts/core/interfaces/IShortsTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IShortsTracker {\\n    function isGlobalShortDataReady() external view returns (bool);\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n    function getNextGlobalShortData(address _account, address _collateralToken, address _indexToken, uint256 _nextPrice, uint256 _sizeDelta, bool _isIncrease) external view returns (uint256, uint256);\\n    function updateGlobalShortData(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta, uint256 _markPrice, bool _isIncrease) external;\\n}\\n\",\"keccak256\":\"0x0c487479566bd78b1424f8d627c4815888d84fbc406251daab71b68e0d5ee2f0\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"./IVaultUtils.sol\\\";\\ninterface IVault {\\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\\n    function directPoolDeposit(address _token) external;\\n    function buyUSDM(address _token, address _receiver) external returns (uint256);\\n    function sellUSDM(address _token, address _receiver) external returns (uint256);\\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external returns (uint256);\\n    function increasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function liquidatePosition(address _account, address _collateralToken, address _indexToken, bool _isLong, address _feeReceiver) external;\\n\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\\n    function priceFeed() external view returns (address);\\n    function fundingRateFactor() external view returns (uint256);\\n    function stableFundingRateFactor() external view returns (uint256);\\n    function cumulativeFundingRates(address _token) external view returns (uint256);\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdmDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n    function liquidationFeeUsd() external view returns (uint256);\\n    function taxBasisPoints() external view returns (uint256);\\n    function stableTaxBasisPoints() external view returns (uint256);\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n    function swapFeeBasisPoints() external view returns (uint256);\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n    function marginFeeBasisPoints() external view returns (uint256);\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n    function whitelistedTokens(address _token) external view returns (bool);\\n    function stableTokens(address _token) external view returns (bool);\\n    function shortableTokens(address _token) external view returns (bool);\\n    function feeReserves(address _token) external view returns (uint256);\\n    function globalShortSizes(address _token) external view returns (uint256);\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\\n    function tokenDecimals(address _token) external view returns (uint256);\\n    function tokenWeights(address _token) external view returns (uint256);\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n    function poolAmounts(address _token) external view returns (uint256);\\n    function bufferAmounts(address _token) external view returns (uint256);\\n    function reservedAmounts(address _token) external view returns (uint256);\\n    function usdmAmounts(address _token) external view returns (uint256);\\n    function maxUsdmAmounts(address _token) external view returns (uint256);\\n    function getRedemptionAmount(address _token, uint256 _usdmAmount) external view returns (uint256);\\n    function getMaxPrice(address _token) external view returns (uint256);\\n    function getMinPrice(address _token) external view returns (uint256);\\n    function getDelta(address _indexToken, uint256 _size, uint256 _averagePrice, bool _isLong, uint256 _lastIncreasedTime) external view returns (bool, uint256);\\n    function getPosition(address _account, address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256);\\n    function isInitialized() external view returns (bool);\\n    function isSwapEnabled() external view returns (bool);\\n    function isLeverageEnabled() external view returns (bool);\\n    function router() external view returns (address);\\n    function usdm() external view returns (address);\\n    function gov() external view returns (address);\\n    function whitelistedTokenCount() external view returns (uint256);\\n    function maxLeverage() external view returns (uint256);\\n    function minProfitTime() external view returns (uint256);\\n    function hasDynamicFees() external view returns (bool);\\n    function fundingInterval() external view returns (uint256);\\n    function totalTokenWeights() external view returns (uint256);\\n    function getTargetUsdmAmount(address _token) external view returns (uint256);\\n    function inManagerMode() external view returns (bool);\\n    function inPrivateLiquidationMode() external view returns (bool);\\n    function maxGasPrice() external view returns (uint256);\\n    function approvedRouters(address _account, address _router) external view returns (bool);\\n    function isLiquidator(address _account) external view returns (bool);\\n    function isManager(address _account) external view returns (bool);\\n    function minProfitBasisPoints(address _token) external view returns (uint256);\\n    function tokenBalances(address _token) external view returns (uint256);\\n    function lastFundingTimes(address _token) external view returns (uint256);\\n\\n    function setMaxLeverage(uint256 _maxLeverage) external;\\n    function setInManagerMode(bool _inManagerMode) external;\\n    function setManager(address _manager, bool _isManager) external;\\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\\n    function setUsdmAmount(address _token, uint256 _amount) external;\\n    function setBufferAmount(address _token, uint256 _amount) external;\\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external;\\n    function setLiquidator(address _liquidator, bool _isActive) external;\\n    function setFundingRate(uint256 _fundingInterval, uint256 _fundingRateFactor, uint256 _stableFundingRateFactor) external;\\n    function setFees(uint256 _taxBasisPoints, uint256 _stableTaxBasisPoints, uint256 _mintBurnFeeBasisPoints, uint256 _swapFeeBasisPoints, uint256 _stableSwapFeeBasisPoints, uint256 _marginFeeBasisPoints, uint256 _liquidationFeeUsd, uint256 _minProfitTime, bool _hasDynamicFees) external;\\n    function setTokenConfig(address _token, uint256 _tokenDecimals, uint256 _redemptionBps, uint256 _minProfitBps, uint256 _maxUsdmAmount, bool _isStable, bool _isShortable) external;\\n    function setPriceFeed(address _priceFeed) external;\\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\\n    function setError(uint256 _errorCode, string calldata _error) external;\\n}\\n\",\"keccak256\":\"0x6865fea6348cbcd8eb8c91bbf6fe38d9c7128778ed80b97e6a407f55bf0fbe81\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IVaultUtils {\\n    function updateCumulativeFundingRate(address _collateralToken, address _indexToken) external returns (bool);\\n    function validateIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external view;\\n    function validateDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external view;\\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function getEntryFundingRate(address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256);\\n    function getPositionFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta) external view returns (uint256);\\n    function getFundingFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _size, uint256 _entryFundingRate) external view returns (uint256);\\n    function getBuyUsdmFeeBasisPoints(address _token, uint256 _usdmAmount) external view returns (uint256);\\n    function getSellUsdmFeeBasisPoints(address _token, uint256 _usdmAmount) external view returns (uint256);\\n    function getSwapFeeBasisPoints(address _tokenIn, address _tokenOut, uint256 _usdmAmount) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdmDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x938c049c684992effbeeb9aa3b069331224e0cfdf95e97d4aaf3d8fbd99b51b8\",\"license\":\"MIT\"},\"contracts/core/settings/BasePositionManagerAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"../../libraries/Events.sol\\\";\\nimport \\\"../../libraries/Errors.sol\\\";\\nimport \\\"../../tokens/interfaces/IWETH.sol\\\";\\nimport \\\"../interfaces/IRouter.sol\\\";\\nimport \\\"../interfaces/IVault.sol\\\";\\nimport \\\"../interfaces/IShortsTracker.sol\\\";\\nimport \\\"../interfaces/IOrderBook.sol\\\";\\nimport \\\"../../peripherals/interfaces/ITimelock.sol\\\";\\nimport \\\"../../referrals/interfaces/IReferralStorage.sol\\\";\\nimport \\\"../../libraries/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../../access/Governable.sol\\\";\\nabstract contract BasePositionManagerAggregator is Governable, ReentrancyGuard{\\n}\\n\",\"keccak256\":\"0x0218c6e7d3aa521716f3250ac61811c8aafc2a9fd7b4d5f73d4db0eb8840ddbb\",\"license\":\"MIT\"},\"contracts/core/settings/BasePositionManagerSettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"../storage/BasePositionManagerStorage.sol\\\";\\nimport \\\"./BasePositionManagerAggregator.sol\\\";\\nabstract contract BasePositionManagerSettings is BasePositionManagerAggregator, BasePositionManagerStorage {\\n    function setAdmin(address _admin) external onlyGov {\\n        admin = _admin;\\n        emit Events.SetAdmin(_admin);\\n    }\\n    function setDepositFee(uint256 _depositFee) external onlyAdmin {\\n        depositFee = _depositFee;\\n        emit Events.SetDepositFee(_depositFee);\\n    }\\n    function setIncreasePositionBufferBps(uint256 _increasePositionBufferBps) external onlyAdmin {\\n        increasePositionBufferBps = _increasePositionBufferBps;\\n        emit Events.SetIncreasePositionBufferBps(_increasePositionBufferBps);\\n    }\\n    function setReferralStorage(address _referralStorage) external onlyAdmin {\\n        referralStorage = _referralStorage;\\n        emit Events.SetReferralStorage(_referralStorage);\\n    }\\n    function setMaxGlobalSizes(address[] memory _tokens, uint256[] memory _longSizes, uint256[] memory _shortSizes) external onlyAdmin {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            maxGlobalLongSizes[token] = _longSizes[i];\\n            maxGlobalShortSizes[token] = _shortSizes[i];\\n        }\\n        emit Events.SetMaxGlobalSizes(_tokens, _longSizes, _shortSizes);\\n    }\\n    function _validateMaxGlobalSize(address _indexToken, bool _isLong, uint256 _sizeDelta) internal view {\\n        if (_sizeDelta == 0) {\\n            return;\\n        }\\n        if (_isLong) {\\n            uint256 maxGlobalLongSize = maxGlobalLongSizes[_indexToken];\\n            if (maxGlobalLongSize > 0 && IVault(vault).guaranteedUsd(_indexToken).add(_sizeDelta) > maxGlobalLongSize) {\\n                revert(Errors.BASEPOSITIONMANAGER_MAX_GLOBAL_LONGS_EXCEEDED);\\n            }\\n        } else {\\n            uint256 maxGlobalShortSize = maxGlobalShortSizes[_indexToken];\\n            if (maxGlobalShortSize > 0 && IVault(vault).globalShortSizes(_indexToken).add(_sizeDelta) > maxGlobalShortSize) {\\n                revert(Errors.BASEPOSITIONMANAGER_MAX_GLOBAL_SHORTS_EXCEEDED);\\n            }\\n        }\\n    }\\n    function _increasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong, uint256 _price) internal {\\n        address _vault = vault;\\n        uint256 markPrice = _isLong ? IVault(_vault).getMaxPrice(_indexToken) : IVault(_vault).getMinPrice(_indexToken);\\n        if (_isLong) {\\n            require(markPrice <= _price, Errors.BASEPOSITIONMANAGER_MARK_PRICE_HIGHER_THAN_LIMIT);\\n        } else {\\n            require(markPrice >= _price, Errors.BASEPOSITIONMANAGER_MARK_PRICE_LOWER_THAN_LIMIT);\\n        }\\n        _validateMaxGlobalSize(_indexToken, _isLong, _sizeDelta);\\n        address timelock = IVault(_vault).gov();\\n        IShortsTracker(shortsTracker).updateGlobalShortData(_account, _collateralToken, _indexToken, _isLong, _sizeDelta, markPrice, true);\\n        ITimelock(timelock).enableLeverage(_vault);\\n        IRouter(router).pluginIncreasePosition(_account, _collateralToken, _indexToken, _sizeDelta, _isLong);\\n        ITimelock(timelock).disableLeverage(_vault);\\n        _emitIncreasePositionReferral(_account, _sizeDelta);\\n    }\\n    function _decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver, uint256 _price) internal returns (uint256) {\\n        address _vault = vault;\\n        uint256 markPrice = _isLong ? IVault(_vault).getMinPrice(_indexToken) : IVault(_vault).getMaxPrice(_indexToken);\\n        if (_isLong) {\\n            require(markPrice >= _price, Errors.BASEPOSITIONMANAGER_MARK_PRICE_LOWER_THAN_LIMIT);\\n        } else {\\n            require(markPrice <= _price, Errors.BASEPOSITIONMANAGER_MARK_PRICE_HIGHER_THAN_LIMIT);\\n        }\\n        address timelock = IVault(_vault).gov();\\n        IShortsTracker(shortsTracker).updateGlobalShortData(_account, _collateralToken, _indexToken, _isLong, _sizeDelta, markPrice, false);\\n        ITimelock(timelock).enableLeverage(_vault);\\n        uint256 amountOut = IRouter(router).pluginDecreasePosition(_account, _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong, _receiver);\\n        ITimelock(timelock).disableLeverage(_vault);\\n        _emitDecreasePositionReferral(_account, _sizeDelta);\\n        return amountOut;\\n    }\\n    function _emitIncreasePositionReferral(address _account, uint256 _sizeDelta) internal {\\n        address _referralStorage = referralStorage;\\n        if (_referralStorage == address(0)) {\\n            return;\\n        }\\n        (bytes32 referralCode, address referrer) = IReferralStorage(_referralStorage).getTraderReferralInfo(_account);\\n        emit Events.IncreasePositionReferral(_account, _sizeDelta, IVault(vault).marginFeeBasisPoints(), referralCode, referrer);\\n    }\\n    function _emitDecreasePositionReferral(address _account, uint256 _sizeDelta) internal {\\n        address _referralStorage = referralStorage;\\n        if (_referralStorage == address(0)) {\\n            return;\\n        }\\n        (bytes32 referralCode, address referrer) = IReferralStorage(_referralStorage).getTraderReferralInfo(_account);\\n        if (referralCode == bytes32(0)) {\\n            return;\\n        }\\n        emit Events.DecreasePositionReferral(_account, _sizeDelta, IVault(vault).marginFeeBasisPoints(), referralCode, referrer);\\n    }\\n    function _swap(address[] memory _path, uint256 _minOut, address _receiver) internal returns (uint256) {\\n        if (_path.length == 2) {\\n            return _vaultSwap(_path[0], _path[1], _minOut, _receiver);\\n        }\\n        revert(Errors.BASEPOSITIONMANAGER_INVALID_PATH_LENGTH);\\n    }\\n    function _vaultSwap(address _tokenIn, address _tokenOut, uint256 _minOut, address _receiver) internal returns (uint256) {\\n        uint256 amountOut = IVault(vault).swap(_tokenIn, _tokenOut, _receiver);\\n        require(amountOut >= _minOut, Errors.BASEPOSITIONMANAGER_INSUFFICIENT_AMOUNTOUT);\\n        return amountOut;\\n    }\\n    function _transferInETH() internal {\\n        if (msg.value != 0) {\\n            IWETH(weth).deposit{value : msg.value}();\\n        }\\n    }\\n    function _transferOutETHWithGasLimitIgnoreFail(uint256 _amountOut, address payable _receiver) internal {\\n        IWETH(weth).withdraw(_amountOut);\\n        _receiver.transfer(_amountOut);\\n    }\\n    function _collectFees(address _account, address[] memory _path, uint256 _amountIn, address _indexToken, bool _isLong, uint256 _sizeDelta) internal returns (uint256) {\\n        bool shouldDeductFee = _shouldDeductFee(_account, _path, _amountIn, _indexToken, _isLong, _sizeDelta);\\n        if (shouldDeductFee) {\\n            uint256 afterFeeAmount = _amountIn.mul(BASIS_POINTS_DIVISOR.sub(depositFee)).div(BASIS_POINTS_DIVISOR);\\n            uint256 feeAmount = _amountIn.sub(afterFeeAmount);\\n            address feeToken = _path[_path.length - 1];\\n            feeReserves[feeToken] = feeReserves[feeToken].add(feeAmount);\\n            return afterFeeAmount;\\n        }\\n        return _amountIn;\\n    }\\n    function _shouldDeductFee(address _account, address[] memory _path, uint256 _amountIn, address _indexToken, bool _isLong, uint256 _sizeDelta) internal view returns (bool) {\\n        if (!_isLong) {return false;}\\n        if (_sizeDelta == 0) {return true;}\\n        address collateralToken = _path[_path.length - 1];\\n        IVault _vault = IVault(vault);\\n        (uint256 size, uint256 collateral, , , , , ,) = _vault.getPosition(_account, collateralToken, _indexToken, _isLong);\\n        if (size == 0) {return false;}\\n        uint256 nextSize = size.add(_sizeDelta);\\n        uint256 collateralDelta = _vault.tokenToUsdMin(collateralToken, _amountIn);\\n        uint256 nextCollateral = collateral.add(collateralDelta);\\n        uint256 prevLeverage = size.mul(BASIS_POINTS_DIVISOR).div(collateral);\\n        uint256 nextLeverage = nextSize.mul(BASIS_POINTS_DIVISOR + increasePositionBufferBps).div(nextCollateral);\\n        return nextLeverage < prevLeverage;\\n    }\\n}\\n\",\"keccak256\":\"0x3003a2c6fe433aba822ba54504ec95c344910b5e3b9eb44546d3e6cf5a2309fa\",\"license\":\"MIT\"},\"contracts/core/settings/PositionManagerAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"../interfaces/IRouter.sol\\\";\\nimport \\\"../interfaces/IVault.sol\\\";\\nimport \\\"../interfaces/IOrderBook.sol\\\";\\nimport \\\"../../peripherals/interfaces/ITimelock.sol\\\";\\nimport \\\"../../libraries/Events.sol\\\";\\nimport \\\"../../libraries/Errors.sol\\\";\\n\\nabstract contract PositionManagerAggregator{\\n\\n}\\n\",\"keccak256\":\"0xe0dd37e63e756833107a764d874e6e3da0f210a96f89cd448293a73efdbbc404\",\"license\":\"MIT\"},\"contracts/core/settings/PositionManagerSettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"../storage/PositionManagerStorage.sol\\\";\\nimport \\\"../storage/BasePositionManagerStorage.sol\\\";\\nimport \\\"./PositionManagerAggregator.sol\\\";\\nabstract contract PositionManagerSettings is\\n    PositionManagerStorage,\\n    BasePositionManagerStorage,\\n    PositionManagerAggregator\\n{\\n    function setOrderKeeper(address _account, bool _isActive) external onlyAdmin {\\n        isOrderKeeper[_account] = _isActive;\\n        emit Events.SetOrderKeeper(_account, _isActive);\\n    }\\n    function setLiquidator(address _account, bool _isActive) external onlyAdmin {\\n        isLiquidator[_account] = _isActive;\\n        emit Events.SetLiquidator(_account, _isActive);\\n    }\\n    function setPartner(address _account, bool _isActive) external onlyAdmin {\\n        isPartner[_account] = _isActive;\\n        emit Events.SetPartner(_account, _isActive);\\n    }\\n    function setOpened(bool _opened) external onlyAdmin {\\n        opened = _opened;\\n        emit Events.SetOpened(_opened);\\n    }\\n    function setShouldValidateIncreaseOrder(bool _shouldValidateIncreaseOrder) external onlyAdmin {\\n        shouldValidateIncreaseOrder = _shouldValidateIncreaseOrder;\\n        emit Events.SetShouldValidateIncreaseOrder(_shouldValidateIncreaseOrder);\\n    }\\n}\\n\",\"keccak256\":\"0xfbb3ed647ae6a2563aeebbafc277ee39c3c6092aa71f8895867d3b164737a6b5\",\"license\":\"MIT\"},\"contracts/core/storage/BasePositionManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../libraries/math/SafeMath.sol\\\";\\nimport \\\"../../libraries/token/IERC20.sol\\\";\\nimport \\\"../../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../../libraries/utils/Address.sol\\\";\\nimport \\\"../../libraries/Errors.sol\\\";\\nimport \\\"../interfaces/IBasePositionManager.sol\\\";\\n\\nabstract contract BasePositionManagerStorage is IBasePositionManager {\\n\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n    uint256 public depositFee;\\n    uint256 public increasePositionBufferBps = 100;\\n    address public admin;\\n    address public vault;\\n    address public shortsTracker;\\n    address public router;\\n    address public weth;\\n    address public referralStorage;\\n    mapping(address => uint256) public override maxGlobalLongSizes; /* token => uint*/\\n    mapping(address => uint256) public override maxGlobalShortSizes; /* token => uint*/\\n    mapping(address => uint256) public feeReserves; /* token=> uint*/\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n    \\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"BasePositionManager: forbidden\\\");\\n        _;\\n    }\\n    \\n    receive() external payable {\\n        require(msg.sender == weth, Errors.BASEPOSITIONMANAGER_INVALID_SENDER);\\n    }\\n}\\n\",\"keccak256\":\"0xbfa6b1627f9dfc54d91a69c0dfcc1ea121be90b3d95e508974680cea6cd0ffdd\",\"license\":\"MIT\"},\"contracts/core/storage/PositionManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"../../libraries/Errors.sol\\\";\\nabstract contract PositionManagerStorage {\\n    bool public opened;\\n    bool public shouldValidateIncreaseOrder = true;\\n    address public orderBook;\\n    mapping (address => bool) public isOrderKeeper; /* address => bool*/\\n    mapping (address => bool) public isPartner; /* address => bool*/\\n    mapping (address => bool) public isLiquidator; /* address => bool*/\\n    modifier onlyOrderKeeper() {\\n        require(isOrderKeeper[msg.sender], Errors.POSITIONMANAGER_FORBIDDEN);\\n        _;\\n    }\\n    modifier onlyPartnersOrOpened() {\\n        require(isPartner[msg.sender] || opened, Errors.POSITIONMANAGER_FORBIDDEN);\\n        _;\\n    }\\n    modifier onlyLiquidator() {\\n        require(isLiquidator[msg.sender], Errors.POSITIONMANAGER_FORBIDDEN);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xa48cddc88babfa728e56a052fe21355a4100cf91f1d51b6b4d7c56694bab56a5\",\"license\":\"MIT\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nlibrary Errors {\\n    /* Timelock Error Message*/\\n    string public constant Timelock_Invalid_Target = \\\"Timelock: invalid _target\\\";\\n    string public constant Timelock_Invalid_Buffer = \\\"Timelock: invalid _buffer\\\";\\n    string public constant Timelock_Buffer_Cannot_Be_Decreased = \\\"Timelock: buffer cannot be decreased\\\";\\n    string public constant Timelock_invalid_maxLeverage = \\\"Timelock: invalid _maxLeverage\\\";\\n    string public constant Timelock_invalid_fundingRateFactor = \\\"Timelock: invalid _fundingRateFactor\\\";\\n    string public constant Timelock_invalid_stableFundingRateFactor = \\\"Timelock: invalid _stableFundingRateFactor\\\";\\n    string public constant Timelock_invalid_minProfitBps = \\\"Timelock: invalid _minProfitBps\\\";\\n    string public constant Timelock_token_not_yet_whitelisted = \\\"Timelock: token not yet whitelisted\\\";\\n    string public constant TIMELOCK_INVALID_MAXGASPRICE = \\\"Invalid _maxGasPrice\\\";\\n    string public constant TIMELOCK_INVALID_LENGTHS = \\\"Timelock: invalid lengths\\\";\\n    string public constant TIMELOCK_MAXTOKENSUPPLY_EXCEEDED = \\\"Timelock: maxTokenSupply exceeded\\\";\\n    string public constant TIMELOCK_ACTION_ALREADY_SIGNALLED = \\\"Timelock: action already signalled\\\";\\n    string public constant TIMELOCK_ACTION_NOT_SIGNALLED = \\\"Timelock: action not signalled\\\";\\n    string public constant TIMELOCK_ACTION_TIME_NOT_YET_PASSED = \\\"Timelock: action time not yet passed\\\";\\n    string public constant TIMELOCK_INVALID_ACTION = \\\"Timelock: invalid _action\\\";\\n    string public constant TIMELOCK_INVALID_BUFFER = \\\"Timelock: invalid _buffer\\\";\\n\\n    /* PriceFeed Error Message*/\\n    string public constant PriceFeed_forbidden = \\\"PriceFeed: forbidden\\\";\\n\\n    /* USDM.sol*/\\n    string public constant USDM_FORBIDDEN = \\\"USDM: forbidden\\\";\\n\\n    /* BasePositionManagers.sol */\\n    string public constant BASEPOSITIONMANAGER_MARK_PRICE_LOWER_THAN_LIMIT      = \\\"BasePositionManager: mark price lower than limit\\\";\\n    string public constant BASEPOSITIONMANAGER_MARK_PRICE_HIGHER_THAN_LIMIT     = \\\"BasePositionManager: mark price higher than limit\\\";\\n    string public constant BASEPOSITIONMANAGER_INVALID_PATH_LENGTH              = \\\"BasePositionManager: invalid _path.length\\\";\\n    string public constant BASEPOSITIONMANAGER_INSUFFICIENT_AMOUNTOUT           = \\\"BasePositionManager: insufficient amountOut\\\";\\n    string public constant BASEPOSITIONMANAGER_MAX_GLOBAL_LONGS_EXCEEDED        = \\\"BasePositionManager: max global longs exceeded\\\";\\n    string public constant BASEPOSITIONMANAGER_MAX_GLOBAL_SHORTS_EXCEEDED       = \\\"BasePositionManager: max global shorts exceeded\\\";\\n    string public constant BASEPOSITIONMANAGER_INVALID_SENDER                   = \\\"BasePositionManager: invalid sender\\\";\\n\\n    /* PositionManager.sol */\\n    string public constant POSITIONMANAGER_INVALID_PATH_LENGTH                  = \\\"PositionManager: invalid _path.length\\\";\\n    string public constant POSITIONMANAGER_INVALID_PATH                         = \\\"PositionManager: invalid _path\\\";\\n    string public constant POSITIONMANAGER_LONG_DEPOSIT                         = \\\"PositionManager: long deposit\\\";\\n    string public constant POSITIONMANAGER_LONG_LEVERAGE_DECREASE               = \\\"PositionManager: long leverage decrease\\\";\\n    string public constant POSITIONMANAGER_FORBIDDEN                            = \\\"PositionManager: forbidden\\\";\\n\\n    /* Router.sol*/\\n    string public constant ROUTER_FORBIDDEN                                     = \\\"Router: forbidden\\\";\\n\\n    /* MlpManager.sol */\\n    string public constant MLPMANAGER_ACTION_NOT_ENABLED                        = \\\"MlpManager: action not enabled\\\";\\n    string public constant MLPMANAGER_INVALID_WEIGHT                            = \\\"MlpManager: invalid weight\\\";\\n    string public constant MLPMANAGER_INVALID_COOLDOWNDURATION                  = \\\"MlpManager: invalid _cooldownDuration\\\";\\n    string public constant MLPMANAGER_INVALID_AMOUNT                            = \\\"MlpManager: invalid _amount\\\";\\n    string public constant MLPMANAGER_INSUFFICIENT_USDM_OUTPUT                  = \\\"MlpManager: insufficient USDM output\\\";\\n    string public constant MLPMANAGER_INSUFFICIENT_MLP_OUTPUT                   = \\\"MlpManager: insufficient MLP output\\\";\\n    string public constant MLPMANAGER_INVALID_MLPAMOUNT                         = \\\"MlpManager: invalid _mlpAmount\\\";\\n    string public constant MLPMANAGER_COOLDOWN_DURATION_NOT_YET_PASSED          = \\\"MlpManager: cooldown duration not yet passed\\\";\\n    string public constant MLPMANAGER_INSUFFICIENT_OUTPUT                       = \\\"MlpManager: insufficient output\\\";\\n    string public constant MLPMANAGER_FORBIDDEN                                 = \\\"MlpManager: forbidden\\\";\\n\\n    /* ShortsTrack.sol*/\\n    string public constant SHORTSTRACKER_FORBIDDEN                              = \\\"ShortsTracker: forbidden\\\";\\n    string public constant SHORTSTRACKER_INVALID_HANDLER                        = \\\"ShortsTracker: invalid _handler\\\";\\n    string public constant SHORTSTRACKER_ALREADY_MIGRATED                       = \\\"ShortsTracker: already migrated\\\";\\n    string public constant SHORTSTRACKER_OVERFLOW                               = \\\"ShortsTracker: overflow\\\";\\n\\n    /* VaultUtils.sol*/\\n    string public constant VAULT_LOSSES_EXCEED_COLLATERAL                       = \\\"Vault: losses exceed collateral\\\";\\n    string public constant VAULT_FEES_EXCEED_COLLATERAL                         = \\\"Vault: fees exceed collateral\\\";\\n    string public constant VAULT_LIQUIDATION_FEES_EXCEED_COLLATERAL             = \\\"Vault: liquidation fees exceed collateral\\\";\\n    string public constant VAULT_MAXLEVERAGE_EXCEEDED                           = \\\"Vault: maxLeverage exceeded\\\";\\n\\n    /* VaultPriceFeed.sol*/\\n    string public constant VAULTPRICEFEED_FORBIDDEN                             = \\\"VaultPriceFeed: forbidden\\\";\\n    string public constant VAULTPRICEFEED_ADJUSTMENT_FREQUENCY_EXCEEDED         = \\\"VaultPriceFeed: adjustment frequency exceeded\\\";\\n    string public constant VAULTPRICEFEED_INVALID_ADJUSTMENTBPS                 = \\\"Vaultpricefeed: invalid _adjustmentBps\\\";\\n    string public constant VAULTPRICEFEED_INVALID_SPREADBASISPOINTS             = \\\"VaultPriceFeed: invalid _spreadBasisPoints\\\";\\n    string public constant VAULTPRICEFEED_INVALID_PRICESAMPLESPACE              = \\\"VaultPriceFeed: invalid _priceSampleSpace\\\";\\n    string internal constant VAULTPRICEFEED_INVALID_PRICE_FEED                  = \\\"VaultPriceFeed: invalid price feed\\\";\\n    string internal constant VAULTPRICEFEED_INVALID_PRICE                       = \\\"VaultPriceFeed: invalid price\\\";\\n    string internal constant CHAINLINK_FEEDS_ARE_NOT_BEING_UPDATED              = \\\"Chainlink feeds are not being updated\\\";\\n    string internal constant VAULTPRICEFEED_COULD_NOT_FETCH_PRICE               = \\\"VaultPriceFeed: could not fetch price\\\";\\n\\n    /* VaultInternal.sol*/\\n    string internal constant VAULT_POOLAMOUNT_EXCEEDED                          = \\\"Vault: poolAmount exceeded\\\";\\n    string internal constant VAULT_INSUFFICIENT_RESERVE                         = \\\"Vault: insufficient reserve\\\";\\n    string internal constant VAULT_MAX_SHORTS_EXCEEDED                          = \\\"Vault: max shorts exceeded\\\";\\n    string internal constant VAULT_POOLAMOUNT_BUFFER                            = \\\"Vault: poolAmount < buffer\\\";\\n    string internal constant VAULT_INVALID_ERRORCONTROLLER                      = \\\"Vault: invalid errorController\\\";\\n\\n    /* Router.sol */\\n    string internal constant ROUTER_INVALID_SENDER                              = \\\"Router: invalid sender\\\";\\n    string internal constant ROUTER_INVALID_PATH                                = \\\"Router: invalid _path\\\";\\n    string internal constant ROUTER_MARK_PRICE_HIGHER_THAN_LIMIT                = \\\"Router: mark price higher than limit\\\";\\n    string internal constant ROUTER_MARK_PRICE_LOWER_THAN_LIMIT                 = \\\"Router: mark price lower than limit\\\";\\n    string internal constant ROUTER_INVALID_PATH_LENGTH                         = \\\"Router: invalid _path.length\\\";\\n    string internal constant ROUTER_INSUFFICIENT_AMOUNTOUT                      = \\\"Router: insufficient amountOut\\\";\\n    string internal constant ROUTER_INVALID_PLUGIN                              = \\\"Router: invalid plugin\\\";\\n    string internal constant ROUTER_PLUGIN_NOT_APPROVED                         = \\\"Router: plugin not approved\\\";\\n\\n    /* OrderBook.sol*/\\n    string internal constant ORDERBOOK_FORBIDDEN                                = \\\"OrderBook: forbidden\\\";\\n    string internal constant ORDERBOOK_ALREADY_INITIALIZED                      = \\\"OrderBook: already initialized\\\";\\n    string internal constant ORDERBOOK_INVALID_SENDER                           = \\\"OrderBook: invalid sender\\\";\\n    string internal constant ORDERBOOK_INVALID_PATH_LENGTH                      = \\\"OrderBook: invalid _path.length\\\";\\n    string internal constant ORDERBOOK_INVALID_PATH                             = \\\"OrderBook: invalid _path\\\";\\n    string internal constant ORDERBOOK_INVALID_AMOUNTIN                         = \\\"OrderBook: invalid _amountIn\\\";\\n    string internal constant ORDERBOOK_INSUFFICIENT_EXECUTION_FEE               = \\\"OrderBook: insufficient execution fee\\\";\\n    string internal constant ORDERBOOK_ONLY_WETH_COULD_BE_WRAPPED               = \\\"OrderBook: only weth could be wrapped\\\";\\n    string internal constant ORDERBOOK_INCORRECT_VALUE_TRANSFERRED              = \\\"OrderBook: incorrect value transferred\\\";\\n    string internal constant ORDERBOOK_INCORRECT_EXECUTION_FEE_TRANSFERRED      = \\\"OrderBook: incorrect execution fee transferred\\\";\\n    string internal constant ORDERBOOK_NON_EXISTENT_ORDER                       = \\\"OrderBook: non-existent order\\\";\\n    string internal constant ORDERBOOK_INVALID_PRICE_FOR_EXECUTION              = \\\"OrderBook: invalid price for execution\\\";\\n    string internal constant ORDERBOOK_INSUFFICIENT_COLLATERAL                  = \\\"OrderBook: insufficient collateral\\\";\\n    string internal constant ORDERBOOK_INSUFFICIENT_AMOUNTOUT                   = \\\"OrderBook: insufficient amountOut\\\";\\n\\n    /* RewardRouterV2.sol */\\n    string internal constant REWARDROUTER_INVALID_AMOUNT                        = \\\"RewardRouter: invalid _amount\\\";\\n    string internal constant REWARDROUTER_INVALID_MSG_VALUE                     = \\\"RewardRouter: invalid msg.value\\\";\\n    string internal constant REWARDROUTER_ALREADY_INITIALIZED                   = \\\"RewardRouter: already initialized\\\";\\n    string internal constant REWARDROUTER_INVALID_MLPAMOUNT                     = \\\"RewardRouter: invalid _mlpAmount\\\";\\n    string internal constant REWARDROUTER_SENDER_HAS_VESTED_TOKENS              = \\\"RewardRouter: sender has vested tokens\\\";\\n    string internal constant REWARDROUTER_TRANSFER_NOT_SIGNALLED                = \\\"RewardRouter: transfer not signalled\\\";\\n    string internal constant REWARDROUTER_STAKEDMOLDTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0                      = \\\"RewardRouter: stakedMoldTracker.averageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_STAKEDMOLDTRACKER_CUMULATIVEREWARDS_GREATER_0                         = \\\"RewardRouter: stakedMoldTracker.cumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_BONUSMOLDTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0                       = \\\"RewardRouter: bonusMoldTracker.averageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_BONUSMOLDTRACKER_CUMULATIVEREWARDS_GREATER_0                          = \\\"RewardRouter: bonusMoldTracker.cumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_FEEMOLDTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0                         = \\\"RewardRouter: feeMoldTracker.averageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_FEEMOLDTRACKER_CUMULATIVEREWARDS_GREATER_0                            = \\\"RewardRouter: feeMoldTracker.cumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_MOLDVESTER_TRANSFERREDAVERAGESTAKEDAMOUNTS_GREATER_0                  = \\\"RewardRouter: MoldVester.transferredAverageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_MOLDVESTER_TRANSFERREDCUMULATIVEREWARDS_GREATER_0                     = \\\"RewardRouter: MoldVester.transferredCumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_STAKEDMLPTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0                       = \\\"RewardRouter: stakedMlpTracker.averageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_STAKEDMLPTRACKER_CUMULATIVEREWARDS_GREATER_0                          = \\\"RewardRouter: stakedMlpTracker.cumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_FEEMLPTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0                          = \\\"RewardRouter: feeMlpTracker.averageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_FEEMLPTRACKER_CUMULATIVEREWARDS_GREATER_0                             = \\\"RewardRouter: feeMlpTracker.cumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_MOLDVESTER_BALANCE_GREATER_0          = \\\"RewardRouter: MoldVester.balance > 0\\\";\\n    string internal constant REWARDROUTER_MLPVESTER_BALANCE_GREATER_0           = \\\"RewardRouter: MlpVester.balance > 0\\\";\\n\\n}\\n\",\"keccak256\":\"0x2d6c5a1032ea8a6b12bcb7fde4f03a3519d67086d21a2a9bf4ea541db73bdbc5\",\"license\":\"MIT\"},\"contracts/libraries/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nlibrary Events {\\n    /* BasePositionManager Events */\\n    event SetDepositFee(uint256 depositFee);\\n    event SetIncreasePositionBufferBps(uint256 increasePositionBufferBps);\\n    event SetReferralStorage(address referralStorage);\\n    event SetAdmin(address admin);\\n    event WithdrawFees(address token, address receiver, uint256 amount);\\n    event SetMaxGlobalSizes(address[] tokens, uint256[] longSizes, uint256[] shortSizes);\\n    event IncreasePositionReferral(address account, uint256 sizeDelta, uint256 marginFeeBasisPoints, bytes32 referralCode, address referrer);\\n    event DecreasePositionReferral(address account, uint256 sizeDelta, uint256 marginFeeBasisPoints, bytes32 referralCode, address referrer);\\n\\n    /*Position Manager Events*/\\n    event SetOrderKeeper(address indexed account, bool isActive);\\n    event SetLiquidator(address indexed account, bool isActive);\\n    event SetPartner(address account, bool isActive);\\n    event SetOpened(bool opened);\\n    event SetShouldValidateIncreaseOrder(bool shouldValidateIncreaseOrder);\\n\\n\\n    /* Orderbook.sol events */\\n    event CreateIncreaseOrder(address indexed account, uint256 orderIndex, address purchaseToken, uint256 purchaseTokenAmount, address collateralToken, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee);\\n    event CancelIncreaseOrder(address indexed account, uint256 orderIndex, address purchaseToken, uint256 purchaseTokenAmount, address collateralToken, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee);\\n    event ExecuteIncreaseOrder(address indexed account, uint256 orderIndex, address purchaseToken, uint256 purchaseTokenAmount, address collateralToken, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee, uint256 executionPrice);\\n    event UpdateIncreaseOrder(address indexed account, uint256 orderIndex, address collateralToken, address indexToken, bool isLong, uint256 sizeDelta, uint256 triggerPrice, bool triggerAboveThreshold);\\n    event CreateDecreaseOrder(address indexed account, uint256 orderIndex, address collateralToken, uint256 collateralDelta, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee);\\n    event CancelDecreaseOrder(address indexed account, uint256 orderIndex, address collateralToken, uint256 collateralDelta, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee);\\n    event ExecuteDecreaseOrder(address indexed account, uint256 orderIndex, address collateralToken, uint256 collateralDelta, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee, uint256 executionPrice);\\n    event UpdateDecreaseOrder(address indexed account, uint256 orderIndex, address collateralToken, uint256 collateralDelta, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold);\\n    event CreateSwapOrder(address indexed account, uint256 orderIndex, address[] path, uint256 amountIn, uint256 minOut, uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event CancelSwapOrder(address indexed account, uint256 orderIndex, address[] path, uint256 amountIn, uint256 minOut, uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event UpdateSwapOrder(address indexed account, uint256 ordexIndex, address[] path, uint256 amountIn, uint256 minOut, uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event ExecuteSwapOrder(address indexed account, uint256 orderIndex, address[] path, uint256 amountIn, uint256 minOut, uint256 amountOut, uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event Initialize(address router, address vault, address weth, address usdm, uint256 minExecutionFee, uint256 minPurchaseTokenAmountUsd);\\n    event UpdateMinExecutionFee(uint256 minExecutionFee);\\n    event UpdateMinPurchaseTokenAmountUsd(uint256 minPurchaseTokenAmountUsd);\\n    event UpdateGov(address gov);\\n\\n    /* Router.sol events*/\\n    event Swap(address account, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);\\n\\n    /* ShortsTracker.sol events*/\\n    event GlobalShortDataUpdated(address indexed token, uint256 globalShortSize, uint256 globalShortAveragePrice);\\n\\n    /* Vault.sol events */\\n    event BuyUSDM(address account, address token, uint256 tokenAmount, uint256 usdmAmount, uint256 feeBasisPoints);\\n    event SellUSDM(address account, address token, uint256 usdmAmount, uint256 tokenAmount, uint256 feeBasisPoints);\\n    event Swap(address account, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut, uint256 amountOutAfterFees, uint256 feeBasisPoints);\\n    event IncreasePosition(bytes32 key, address account, address collateralToken, address indexToken, uint256 collateralDelta, uint256 sizeDelta, bool isLong, uint256 price, uint256 fee);\\n    event DecreasePosition(bytes32 key, address account, address collateralToken, address indexToken, uint256 collateralDelta, uint256 sizeDelta, bool isLong, uint256 price, uint256 fee);\\n    event LiquidatePosition(bytes32 key, address account, address collateralToken, address indexToken, bool isLong, uint256 size, uint256 collateral, uint256 reserveAmount, int256 realisedPnl, uint256 markPrice);\\n    event UpdatePosition(bytes32 key, uint256 size, uint256 collateral, uint256 averagePrice, uint256 entryFundingRate, uint256 reserveAmount, int256 realisedPnl, uint256 markPrice);\\n    event ClosePosition(bytes32 key, uint256 size, uint256 collateral, uint256 averagePrice, uint256 entryFundingRate, uint256 reserveAmount, int256 realisedPnl);\\n    event UpdateFundingRate(address token, uint256 fundingRate);\\n    event UpdatePnl(bytes32 key, bool hasProfit, uint256 delta);\\n    event CollectSwapFees(address token, uint256 feeUsd, uint256 feeTokens);\\n    event CollectMarginFees(address token, uint256 feeUsd, uint256 feeTokens);\\n    event DirectPoolDeposit(address token, uint256 amount);\\n    event IncreasePoolAmount(address token, uint256 amount);\\n    event DecreasePoolAmount(address token, uint256 amount);\\n    event IncreaseUsdmAmount(address token, uint256 amount);\\n    event DecreaseUsdmAmount(address token, uint256 amount);\\n    event IncreaseReservedAmount(address token, uint256 amount);\\n    event DecreaseReservedAmount(address token, uint256 amount);\\n    event IncreaseGuaranteedUsd(address token, uint256 amount);\\n    event DecreaseGuaranteedUsd(address token, uint256 amount);\\n\\n    /* Timelock.sol events */\\n    event SignalPendingAction(bytes32 action);\\n    event SignalApprove(address token, address spender, uint256 amount, bytes32 action);\\n    event SignalWithdrawToken(address target, address token, address receiver, uint256 amount, bytes32 action);\\n    event SignalMint(address token, address receiver, uint256 amount, bytes32 action);\\n    event SignalSetGov(address target, address gov, bytes32 action);\\n    event SignalSetHandler(address target, address handler, bool isActive, bytes32 action);\\n    event SignalSetPriceFeed(address vault, address priceFeed, bytes32 action);\\n    event SignalRedeemUsdm(address vault, address token, uint256 amount);\\n    event SignalVaultSetTokenConfig(address vault, address token, uint256 tokenDecimals, uint256 tokenWeight, uint256 minProfitBps, uint256 maxUsdmAmount, bool isStable, bool isShortable);\\n    event ClearAction(bytes32 action);\\n\\n    /* MlpManager.sol */\\n    event AddLiquidity(address account, address token, uint256 amount, uint256 aumInUsdm, uint256 mlpSupply, uint256 usdmAmount, uint256 mintAmount);\\n    event RemoveLiquidity(address account, address token, uint256 mlpAmount, uint256 aumInUsdm, uint256 mlpSupply, uint256 usdmAmount, uint256 amountOut);\\n\\n    /* RewardRouterV2 */\\n    event StakeMold(address account, address token, uint256 amount);\\n    event UnstakeMold(address account, address token, uint256 amount);\\n    event StakeMlp(address account, uint256 amount);\\n    event UnstakeMlp(address account, uint256 amount);\\n}\\n\",\"keccak256\":\"0x555bd8706eac18f05cbc296299b1379465408d2040130886612e55bbddbb7179\",\"license\":\"MIT\"},\"contracts/libraries/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x41b0da7db3e1f79b338824fed2bc4732430b78002a9d51c2cfa86ad5a12c2763\",\"license\":\"MIT\"},\"contracts/libraries/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa3ce253082421a9e79d2b884ae6f60507b0cc73ea356674072091454c44cc556\",\"license\":\"MIT\"},\"contracts/libraries/token/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../math/SafeMath.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf80766b21ea67a73c81e0dea4543375243938c8b223e29c5d783be61ab3f424c\",\"license\":\"MIT\"},\"contracts/libraries/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1845481964ebacf35afe1a006fa574793b52e698eba0a8db6e3d30202bc45429\",\"license\":\"MIT\"},\"contracts/libraries/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xae7a1e407ed171ecd3a0d3976875d6c58eefdccf831ebce6314ec94892dffc03\",\"license\":\"MIT\"},\"contracts/peripherals/interfaces/ITimelock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface ITimelock {\\n    function setAdmin(address _admin) external;\\n    function enableLeverage(address _vault) external;\\n    function disableLeverage(address _vault) external;\\n    function setIsLeverageEnabled(address _vault, bool _isLeverageEnabled) external;\\n    function signalSetGov(address _target, address _gov) external;\\n}\\n\",\"keccak256\":\"0x6578af6463e634c18ad3ec9f12e464b1a1421357c416537e531b31ac63ff13cd\",\"license\":\"MIT\"},\"contracts/referrals/interfaces/IReferralStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IReferralStorage {\\n    function codeOwners(bytes32 _code) external view returns (address);\\n    function getTraderReferralInfo(address _account) external view returns (bytes32, address);\\n    function setTraderReferralCode(address _account, bytes32 _code) external;\\n    function setTier(uint256 _tierId, uint256 _totalRebate, uint256 _discountShare) external;\\n    function setReferrerTier(address _referrer, uint256 _tierId) external;\\n    function govSetCodeOwner(bytes32 _code, address _newAccount) external;\\n}\\n\",\"keccak256\":\"0xdc96e3661590fd72a5583a6b84bf29369b5e7080b532ce337b5b8d04edb5a495\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IWETH.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\",\"keccak256\":\"0x9322725581103de3f494f25318f2ebaf50100d57c2631a26d4c253833bc6bc23\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526002805461ff001916610100179055606460075534801561002457600080fd5b50604051620044c9380380620044c9833981810160405260c081101561004957600080fd5b508051602082015160408301516060840151608085015160a090950151600080546001600160a01b03199081163390811790925560018055600980546001600160a01b03988916908316179055600b805496881696821696909617909555600c805493871693861693909317909255600695909555600a805492851692841692909217909155600880549092161790556002805491909216620100000262010000600160b01b03199091161790556143c280620001076000396000f3fe60806040526004361061026d5760003560e01c806367a5279311610153578063b7ddc992116100cb578063ef12c67e1161007f578063f851a44011610064578063f851a44014610cb5578063f887ea4014610cca578063fbfa77cf14610cdf57610327565b8063ef12c67e14610ac2578063f255527814610c7a57610327565b8063de2ea948116100b0578063de2ea94814610940578063e1f21c6714610995578063e7dae9fe146109d857610327565b8063b7ddc99214610835578063cfad57a21461090d57610327565b80639698d25a116101225780639a0a18bf116101075780639a0a18bf14610711578063ae4d7f9a1461073d578063b32755de1461077057610327565b80639698d25a146106c957806398d1e03a146106fc57610327565b806367a5279314610639578063704b6c021461064e578063776af5ba146106815780638c0f9aac1461069657610327565b806324a084df116101e65780634584bd4b116101b5578063529a356f1161019a578063529a356f146105dc5780635f88eade1461060f578063657bc5d01461062457610327565b80634584bd4b1461059d578063490ae210146105b257610327565b806324a084df146104cd5780633833f5f5146105065780633fc8cef31461054d5780634453a3741461056257610327565b80631b9043591161023d5780631e261538116102225780631e2615381461042d57806321acf65914610468578063233bfe3b146104a357610327565b80631b904359146103cc5780631ce9cb8f146103fa57610327565b80626cc35e1461032c5780631045c74e1461035d578063126082cf146103a257806312d43a51146103b757610327565b3661032757600c54604080516060810190915260238082526001600160a01b0390921633149161431b6020830139906103245760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156102e95781810151838201526020016102d1565b50505050905090810190601f1680156103165780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50005b600080fd5b34801561033857600080fd5b50610341610cf4565b604080516001600160a01b039092168252519081900360200190f35b34801561036957600080fd5b506103906004803603602081101561038057600080fd5b50356001600160a01b0316610d03565b60408051918252519081900360200190f35b3480156103ae57600080fd5b50610390610d15565b3480156103c357600080fd5b50610341610d1b565b3480156103d857600080fd5b506103f8600480360360208110156103ef57600080fd5b50351515610d2a565b005b34801561040657600080fd5b506103906004803603602081101561041d57600080fd5b50356001600160a01b0316610dd8565b34801561043957600080fd5b506103f86004803603604081101561045057600080fd5b506001600160a01b0381351690602001351515610dea565b34801561047457600080fd5b506103f86004803603604081101561048b57600080fd5b506001600160a01b0381351690602001351515610ea9565b3480156104af57600080fd5b506103f8600480360360208110156104c657600080fd5b5035610f6c565b3480156104d957600080fd5b506103f8600480360360408110156104f057600080fd5b506001600160a01b038135169060200135611006565b34801561051257600080fd5b506105396004803603602081101561052957600080fd5b50356001600160a01b0316611074565b604080519115158252519081900360200190f35b34801561055957600080fd5b50610341611089565b34801561056e57600080fd5b506103f86004803603604081101561058557600080fd5b506001600160a01b0381351690602001351515611098565b3480156105a957600080fd5b50610539611157565b3480156105be57600080fd5b506103f8600480360360208110156105d557600080fd5b5035611165565b3480156105e857600080fd5b50610539600480360360208110156105ff57600080fd5b50356001600160a01b03166111ff565b34801561061b57600080fd5b50610539611214565b34801561063057600080fd5b5061034161121d565b34801561064557600080fd5b5061039061122c565b34801561065a57600080fd5b506103f86004803603602081101561067157600080fd5b50356001600160a01b0316611232565b34801561068d57600080fd5b506103416112ea565b3480156106a257600080fd5b50610539600480360360208110156106b957600080fd5b50356001600160a01b03166112ff565b3480156106d557600080fd5b50610390600480360360208110156106ec57600080fd5b50356001600160a01b0316611314565b34801561070857600080fd5b50610390611326565b34801561071d57600080fd5b506103f86004803603602081101561073457600080fd5b5035151561132c565b34801561074957600080fd5b506103f86004803603602081101561076057600080fd5b50356001600160a01b03166113d2565b6103f8600480360360c081101561078657600080fd5b8101906020810181356401000000008111156107a157600080fd5b8201836020820111156107b357600080fd5b803590602001918460208302840111640100000000831117156107d557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550506001600160a01b0383351693505050602081013590604081013590606081013515159060800135611492565b34801561084157600080fd5b506103f8600480360360e081101561085857600080fd5b81019060208101813564010000000081111561087357600080fd5b82018360208201111561088557600080fd5b803590602001918460208302840111640100000000831117156108a757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550506001600160a01b0383351693505050602081013590604081013590606081013590608081013515159060a0013561178f565b34801561091957600080fd5b506103f86004803603602081101561093057600080fd5b50356001600160a01b0316611b00565b34801561094c57600080fd5b506103f8600480360360a081101561096357600080fd5b506001600160a01b03813581169160208101358216916040820135811691606081013515159160809091013516611b86565b3480156109a157600080fd5b506103f8600480360360608110156109b857600080fd5b506001600160a01b038135811691602081013590911690604001356120b0565b3480156109e457600080fd5b506103f860048036036101208110156109fc57600080fd5b810190602081018135640100000000811115610a1757600080fd5b820183602082011115610a2957600080fd5b80359060200191846020830284011164010000000083111715610a4b57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505081356001600160a01b0390811693506020830135926040810135925060608101351515916080820135169060a08101359060c08101359060e00135151561218f565b348015610ace57600080fd5b506103f860048036036060811015610ae557600080fd5b810190602081018135640100000000811115610b0057600080fd5b820183602082011115610b1257600080fd5b80359060200191846020830284011164010000000083111715610b3457600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050640100000000811115610b8457600080fd5b820183602082011115610b9657600080fd5b80359060200191846020830284011164010000000083111715610bb857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050640100000000811115610c0857600080fd5b820183602082011115610c1a57600080fd5b80359060200191846020830284011164010000000083111715610c3c57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550612463945050505050565b348015610c8657600080fd5b506103f860048036036040811015610c9d57600080fd5b506001600160a01b0381358116916020013516612664565b348015610cc157600080fd5b5061034161275a565b348015610cd657600080fd5b50610341612769565b348015610ceb57600080fd5b50610341612778565b600d546001600160a01b031681565b600e6020526000908152604090205481565b61271081565b6000546001600160a01b031681565b6008546001600160a01b03163314610d89576040805162461bcd60e51b815260206004820152601e60248201527f42617365506f736974696f6e4d616e616765723a20666f7262696464656e0000604482015290519081900360640190fd5b60028054821515610100810261ff00199092169190911790915560408051918252517fa956222e37fe025ff51e5440ac729a9bd417ff91e485e14dcffa2c0ba8894f409181900360200190a150565b60106020526000908152604090205481565b6008546001600160a01b03163314610e49576040805162461bcd60e51b815260206004820152601e60248201527f42617365506f736974696f6e4d616e616765723a20666f7262696464656e0000604482015290519081900360640190fd5b6001600160a01b038216600081815260036020908152604091829020805460ff1916851515908117909155825190815291517f1d5bc0255b943d6a5b5279e8a55d74d620baccbceecb25e87a3558f14c4c118e9281900390910190a25050565b6008546001600160a01b03163314610f08576040805162461bcd60e51b815260206004820152601e60248201527f42617365506f736974696f6e4d616e616765723a20666f7262696464656e0000604482015290519081900360640190fd5b6001600160a01b038216600081815260046020908152604091829020805460ff191685151590811790915582519384529083015280517fa4e46c70ff429a91de7d1716d736e877c7cca1c22ac850b23d242530dd95e4749281900390910190a15050565b6008546001600160a01b03163314610fcb576040805162461bcd60e51b815260206004820152601e60248201527f42617365506f736974696f6e4d616e616765723a20666f7262696464656e0000604482015290519081900360640190fd5b60078190556040805182815290517f21167d0d4661af93817ebce920f18986eed3d75d5e1c03f2aed05efcbafbc4529181900360200190a150565b6000546001600160a01b0316331461105d576040805162461bcd60e51b815260206004820152601560248201527423b7bb32b93730b136329d103337b93134b23232b760591b604482015290519081900360640190fd5b6110706001600160a01b03831682612787565b5050565b60036020526000908152604090205460ff1681565b600c546001600160a01b031681565b6008546001600160a01b031633146110f7576040805162461bcd60e51b815260206004820152601e60248201527f42617365506f736974696f6e4d616e616765723a20666f7262696464656e0000604482015290519081900360640190fd5b6001600160a01b038216600081815260056020908152604091829020805460ff1916851515908117909155825190815291517f8c0d56805c3b43d441481229dc64bee168253ffe4305f37ab7cfe63b1c4268c69281900390910190a25050565b600254610100900460ff1681565b6008546001600160a01b031633146111c4576040805162461bcd60e51b815260206004820152601e60248201527f42617365506f736974696f6e4d616e616765723a20666f7262696464656e0000604482015290519081900360640190fd5b60068190556040805182815290517f974fd3c1fcb4653dfc4fb740c4c692cd212d55c28f163f310128cb64d83006759181900360200190a150565b60056020526000908152604090205460ff1681565b60025460ff1681565b600a546001600160a01b031681565b60065481565b6000546001600160a01b03163314611289576040805162461bcd60e51b815260206004820152601560248201527423b7bb32b93730b136329d103337b93134b23232b760591b604482015290519081900360640190fd5b600880546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff19909116811790915560408051918252517f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a19181900360200190a150565b6002546201000090046001600160a01b031681565b60046020526000908152604090205460ff1681565b600f6020526000908152604090205481565b60075481565b6008546001600160a01b0316331461138b576040805162461bcd60e51b815260206004820152601e60248201527f42617365506f736974696f6e4d616e616765723a20666f7262696464656e0000604482015290519081900360640190fd5b6002805482151560ff19909116811790915560408051918252517fb396a770d36909ca07c2b7d7d408f43c9bb74425c5d17caf44336c4f09c420949181900360200190a150565b6008546001600160a01b03163314611431576040805162461bcd60e51b815260206004820152601e60248201527f42617365506f736974696f6e4d616e616765723a20666f7262696464656e0000604482015290519081900360640190fd5b600d80546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff19909116811790915560408051918252517f828abcccea18192c21d645e575652c49e20b986dab777906fc473d056b01b6a89181900360200190a150565b600260015414156114ea576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001553360009081526004602052604090205460ff168061150f575060025460ff165b6040518060400160405280601a81526020017f506f736974696f6e4d616e616765723a20666f7262696464656e000000000000815250906115915760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b508551600114806115a3575085516002145b60405180606001604052806025815260200161436860259139906116085760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b50600c5486516001600160a01b0390911690879060009061162557fe5b60200260200101516001600160a01b0316146040518060400160405280601e81526020017f506f736974696f6e4d616e616765723a20696e76616c6964205f706174680000815250906116b95760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b50341561175e576116c8612871565b85513490600110156116ff57600954600c546116f1916001600160a01b039182169116346128dd565b6116fc87863061295d565b90505b600061170f3389848a888a612a0b565b905061175b600960009054906101000a90046001600160a01b0316828a60018c51038151811061173b57fe5b60200260200101516001600160a01b03166128dd9092919063ffffffff16565b50505b611783338760018951038151811061177257fe5b602002602001015187868686612aea565b50506001805550505050565b600260015414156117e7576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001553360009081526004602052604090205460ff168061180c575060025460ff165b6040518060400160405280601a81526020017f506f736974696f6e4d616e616765723a20666f7262696464656e0000000000008152509061188e5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b508651600114806118a0575086516002145b60405180606001604052806025815260200161436860259139906119055760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b508415611ace578651600114156119c657600b5487516001600160a01b0390911690631b82787890899060009061193857fe5b60200260200101513330896040518563ffffffff1660e01b815260040180856001600160a01b03168152602001846001600160a01b03168152602001836001600160a01b03168152602001828152602001945050505050600060405180830381600087803b1580156119a957600080fd5b505af11580156119bd573d6000803e3d6000fd5b50505050611a90565b600b5487516001600160a01b0390911690631b8278789089906000906119e857fe5b6020908102919091010151600954604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b0393841660048201523360248201529290911660448301526064820189905251608480830192600092919082900301818387803b158015611a6a57600080fd5b505af1158015611a7e573d6000803e3d6000fd5b50505050611a8d87853061295d565b94505b6000611aa03389888a8789612a0b565b9050611acc600960009054906101000a90046001600160a01b0316828a60018c51038151811061173b57fe5b505b611af3338860018a510381518110611ae257fe5b602002602001015188868686612aea565b5050600180555050505050565b6000546001600160a01b03163314611b57576040805162461bcd60e51b815260206004820152601560248201527423b7bb32b93730b136329d103337b93134b23232b760591b604482015290519081900360640190fd5b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60026001541415611bde576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260015533600090815260056020908152604091829020548251808401909352601a83527f506f736974696f6e4d616e616765723a20666f7262696464656e0000000000009183019190915260ff16611c795760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b50600954604080517f12d43a5100000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169160009183916312d43a5191600480820192602092909190829003018186803b158015611cdd57600080fd5b505afa158015611cf1573d6000803e3d6000fd5b505050506040513d6020811015611d0757600080fd5b505160095460408051634a3f088d60e01b81526001600160a01b038b811660048301528a811660248301528981166044830152881515606483015291519394506000939190921691634a3f088d91608480830192610100929190829003018186803b158015611d7557600080fd5b505afa158015611d89573d6000803e3d6000fd5b505050506040513d610100811015611da057600080fd5b50519050600085611e2957836001600160a01b031663e124e6d2886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611df857600080fd5b505afa158015611e0c573d6000803e3d6000fd5b505050506040513d6020811015611e2257600080fd5b5051611ea3565b836001600160a01b03166381a612d6886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611e7657600080fd5b505afa158015611e8a573d6000803e3d6000fd5b505050506040513d6020811015611ea057600080fd5b50515b600a5460408051633cc8e33b60e21b81526001600160a01b038d811660048301528c811660248301528b811660448301528a151560648301526084820187905260a48201859052600060c4830181905292519495509092169263f3238cec9260e480820193929182900301818387803b158015611f1f57600080fd5b505af1158015611f33573d6000803e3d6000fd5b50505050826001600160a01b0316636d63c1d0856040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b158015611f8657600080fd5b505af1158015611f9a573d6000803e3d6000fd5b5050604080517fde2ea9480000000000000000000000000000000000000000000000000000000081526001600160a01b038d811660048301528c811660248301528b811660448301528a1515606483015289811660848301529151918816935063de2ea948925060a48082019260009290919082900301818387803b15801561202257600080fd5b505af1158015612036573d6000803e3d6000fd5b50505050826001600160a01b031663d3c87bbb856040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b15801561208957600080fd5b505af115801561209d573d6000803e3d6000fd5b5050600180555050505050505050505050565b6000546001600160a01b03163314612107576040805162461bcd60e51b815260206004820152601560248201527423b7bb32b93730b136329d103337b93134b23232b760591b604482015290519081900360640190fd5b826001600160a01b031663095ea7b383836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561215e57600080fd5b505af1158015612172573d6000803e3d6000fd5b505050506040513d602081101561218857600080fd5b5050505050565b600260015414156121e7576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001553360009081526004602052604090205460ff168061220c575060025460ff165b6040518060400160405280601a81526020017f506f736974696f6e4d616e616765723a20666f7262696464656e0000000000008152509061228e5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b508851600114806122a0575088516002145b60405180606001604052806025815260200161436860259139906123055760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b5080156123c357600c5489516001600160a01b03909116908a90600019810190811061232d57fe5b60200260200101516001600160a01b0316146040518060400160405280601e81526020017f506f736974696f6e4d616e616765723a20696e76616c6964205f706174680000815250906123c15760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b505b60006123e9338b6000815181106123d657fe5b60200260200101518b8b8b8b308b612f5f565b905080156124535760018a511115612429576009548a5161241b916001600160a01b03169083908d9060009061173b57fe5b6124268a843061295d565b90505b811561243e576124398186613468565b612453565b61245385828c60018e51038151811061173b57fe5b5050600180555050505050505050565b6008546001600160a01b031633146124c2576040805162461bcd60e51b815260206004820152601e60248201527f42617365506f736974696f6e4d616e616765723a20666f7262696464656e0000604482015290519081900360640190fd5b60005b835181101561255d5760008482815181106124dc57fe5b602002602001015190508382815181106124f257fe5b6020026020010151600e6000836001600160a01b03166001600160a01b031681526020019081526020016000208190555082828151811061252f57fe5b6020908102919091018101516001600160a01b039092166000908152600f90915260409020556001016124c5565b507fae32d569b058895b9620d6552b09aaffedc9a6f396be4d595a224ad09f8b213983838360405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156125ca5781810151838201526020016125b2565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156126095781810151838201526020016125f1565b50505050905001848103825285818151815260200191508051906020019060200280838360005b83811015612648578181015183820152602001612630565b50505050905001965050505050505060405180910390a1505050565b6008546001600160a01b031633146126c3576040805162461bcd60e51b815260206004820152601e60248201527f42617365506f736974696f6e4d616e616765723a20666f7262696464656e0000604482015290519081900360640190fd5b6001600160a01b038216600090815260106020526040902054806126e75750611070565b6001600160a01b03831660008181526010602052604081205561270b9083836128dd565b604080516001600160a01b0380861682528416602082015280820183905290517f4f1b51dd7a2fcb861aa2670f668be66835c4ee12b4bbbf037e4d0018f39819e49181900360600190a1505050565b6008546001600160a01b031681565b600b546001600160a01b031681565b6009546001600160a01b031681565b804710156127dc576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d8060008114612827576040519150601f19603f3d011682016040523d82523d6000602084013e61282c565b606091505b505090508061286c5760405162461bcd60e51b815260040180806020018281038252603a8152602001806141e1603a913960400191505060405180910390fd5b505050565b34156128db57600c60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156128c757600080fd5b505af1158015612188573d6000803e3d6000fd5b565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261286c90849061351c565b60008351600214156129a45761299d8460008151811061297957fe5b60200260200101518560018151811061298e57fe5b602002602001015185856135cd565b9050612a04565b6040518060600160405280602981526020016142f26029913960405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b9392505050565b600080612a1c8888888888886136e8565b90508015612adb576000612a53612710612a4d612a466006546127106138c590919063ffffffff16565b8a90613910565b90613969565b90506000612a6188836138c5565b905060008960018b510381518110612a7557fe5b60200260200101519050612ab78260106000846001600160a01b03166001600160a01b03168152602001908152602001600020546139ab90919063ffffffff16565b6001600160a01b03909116600090815260106020526040902055509150612ae09050565b859150505b9695505050505050565b6009546001600160a01b0316600083612b7b57816001600160a01b03166381a612d6876040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612b4a57600080fd5b505afa158015612b5e573d6000803e3d6000fd5b505050506040513d6020811015612b7457600080fd5b5051612bf5565b816001600160a01b031663e124e6d2876040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612bc857600080fd5b505afa158015612bdc573d6000803e3d6000fd5b505050506040513d6020811015612bf257600080fd5b50515b90508315612c6c57828111156040518060600160405280603181526020016142c16031913990612c665760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b50612cd7565b828110156040518060600160405280603081526020016142416030913990612cd55760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b505b612ce2868587613a05565b6000826001600160a01b03166312d43a516040518163ffffffff1660e01b815260040160206040518083038186803b158015612d1d57600080fd5b505afa158015612d31573d6000803e3d6000fd5b505050506040513d6020811015612d4757600080fd5b5051600a5460408051633cc8e33b60e21b81526001600160a01b038d811660048301528c811660248301528b811660448301528915156064830152608482018b905260a48201879052600160c4830152915193945091169163f3238cec9160e48082019260009290919082900301818387803b158015612dc657600080fd5b505af1158015612dda573d6000803e3d6000fd5b50505050806001600160a01b0316636d63c1d0846040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b158015612e2d57600080fd5b505af1158015612e41573d6000803e3d6000fd5b5050600b54604080517f1f1dd1760000000000000000000000000000000000000000000000000000000081526001600160a01b038e811660048301528d811660248301528c81166044830152606482018c90528a151560848301529151919092169350631f1dd176925060a480830192600092919082900301818387803b158015612ecb57600080fd5b505af1158015612edf573d6000803e3d6000fd5b50505050806001600160a01b031663d3c87bbb846040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b158015612f3257600080fd5b505af1158015612f46573d6000803e3d6000fd5b50505050612f548987613c41565b505050505050505050565b6009546000906001600160a01b03168185612ff257816001600160a01b031663e124e6d28a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612fc157600080fd5b505afa158015612fd5573d6000803e3d6000fd5b505050506040513d6020811015612feb57600080fd5b505161306c565b816001600160a01b03166381a612d68a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561303f57600080fd5b505afa158015613053573d6000803e3d6000fd5b505050506040513d602081101561306957600080fd5b50515b905085156130e3578381101560405180606001604052806030815260200161424160309139906130dd5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b5061314e565b838111156040518060600160405280603181526020016142c1603191399061314c5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b505b6000826001600160a01b03166312d43a516040518163ffffffff1660e01b815260040160206040518083038186803b15801561318957600080fd5b505afa15801561319d573d6000803e3d6000fd5b505050506040513d60208110156131b357600080fd5b81019080805190602001909291905050509050600a60009054906101000a90046001600160a01b03166001600160a01b031663f3238cec8d8d8d8b8d8860006040518863ffffffff1660e01b815260040180886001600160a01b03168152602001876001600160a01b03168152602001866001600160a01b0316815260200185151581526020018481526020018381526020018215158152602001975050505050505050600060405180830381600087803b15801561327157600080fd5b505af1158015613285573d6000803e3d6000fd5b50505050806001600160a01b0316636d63c1d0846040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156132d857600080fd5b505af11580156132ec573d6000803e3d6000fd5b505050506000600b60009054906101000a90046001600160a01b03166001600160a01b0316632662166b8e8e8e8e8e8e8e6040518863ffffffff1660e01b815260040180886001600160a01b03168152602001876001600160a01b03168152602001866001600160a01b031681526020018581526020018481526020018315158152602001826001600160a01b03168152602001975050505050505050602060405180830381600087803b1580156133a357600080fd5b505af11580156133b7573d6000803e3d6000fd5b505050506040513d60208110156133cd57600080fd5b5051604080517fd3c87bbb0000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015291519293509084169163d3c87bbb9160248082019260009290919082900301818387803b15801561343657600080fd5b505af115801561344a573d6000803e3d6000fd5b505050506134588d8a613dcd565b9c9b505050505050505050505050565b600c54604080517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526004810185905290516001600160a01b0390921691632e1a7d4d9160248082019260009290919082900301818387803b1580156134ce57600080fd5b505af11580156134e2573d6000803e3d6000fd5b50506040516001600160a01b038416925084156108fc02915084906000818181858888f1935050505015801561286c573d6000803e3d6000fd5b6060613571826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613ee99092919063ffffffff16565b80519091501561286c5780806020019051602081101561359057600080fd5b505161286c5760405162461bcd60e51b815260040180806020018281038252602a81526020018061433e602a913960400191505060405180910390fd5b600954604080517f933162120000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015286811660248301528481166044830152915160009384931691639331621291606480830192602092919082900301818787803b15801561364657600080fd5b505af115801561365a573d6000803e3d6000fd5b505050506040513d602081101561367057600080fd5b50516040805160608101909152602b80825291925085831015916141b66020830139906136de5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b5095945050505050565b6000826136f757506000612ae0565b8161370457506001612ae0565b60008660018851038151811061371657fe5b602090810291909101015160095460408051634a3f088d60e01b81526001600160a01b038c81166004830152808516602483015289811660448301528815156064830152915193945091169160009182918491634a3f088d91608480830192610100929190829003018186803b15801561378f57600080fd5b505afa1580156137a3573d6000803e3d6000fd5b505050506040513d6101008110156137ba57600080fd5b5080516020909101519092509050816137da576000945050505050612ae0565b60006137e683886139ab565b90506000846001600160a01b0316630a48d5a9878d6040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b15801561383f57600080fd5b505afa158015613853573d6000803e3d6000fd5b505050506040513d602081101561386957600080fd5b50519050600061387984836139ab565b9050600061388d85612a4d88612710613910565b905060006138ae83612a4d600754612710018861391090919063ffffffff16565b919091109f9e505050505050505050505050505050565b600061390783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613f00565b90505b92915050565b60008261391f5750600061390a565b8282028284828161392c57fe5b04146139075760405162461bcd60e51b81526004018080602001828103825260218152602001806142a06021913960400191505060405180910390fd5b600061390783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613f5a565b600082820183811015613907576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b80613a0f5761286c565b8115613b44576001600160a01b0383166000908152600e60205260409020548015801590613ad95750600954604080517ff07456ce0000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015291518493613ad793879391169163f07456ce91602480820192602092909190829003018186803b158015613aa557600080fd5b505afa158015613ab9573d6000803e3d6000fd5b505050506040513d6020811015613acf57600080fd5b5051906139ab565b115b15613b3e576040518060600160405280602e8152602001614188602e913960405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b5061286c565b6001600160a01b0383166000908152600f60205260409020548015801590613bd65750600954604080517f8a78daa80000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015291518493613bd4938793911691638a78daa891602480820192602092909190829003018186803b158015613aa557600080fd5b115b15613c3b576040518060600160405280602f8152602001614271602f913960405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b50505050565b600d546001600160a01b031680613c585750611070565b600080826001600160a01b031663534ef883866040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050604080518083038186803b158015613ca757600080fd5b505afa158015613cbb573d6000803e3d6000fd5b505050506040513d6040811015613cd157600080fd5b508051602091820151600954604080517f318bc68900000000000000000000000000000000000000000000000000000000815290519396509194507fc2414023ce7002ee98557d1e7be21e5559073336f2217ee5f9b2e50fd85f71ee93899389936001600160a01b039093169263318bc689926004808301939192829003018186803b158015613d6057600080fd5b505afa158015613d74573d6000803e3d6000fd5b505050506040513d6020811015613d8a57600080fd5b5051604080516001600160a01b03948516815260208101939093528281019190915260608201869052918416608082015290519081900360a00190a15050505050565b600d546001600160a01b031680613de45750611070565b600080826001600160a01b031663534ef883866040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050604080518083038186803b158015613e3357600080fd5b505afa158015613e47573d6000803e3d6000fd5b505050506040513d6040811015613e5d57600080fd5b508051602090910151909250905081613e7857505050611070565b7f474c763ff84bf2c2039a6d9fea955ecd0f724030e3c365b91169c6a16fe751b78585600960009054906101000a90046001600160a01b03166001600160a01b031663318bc6896040518163ffffffff1660e01b815260040160206040518083038186803b158015613d6057600080fd5b6060613ef88484600085613fbf565b949350505050565b60008184841115613f525760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b505050900390565b60008183613fa95760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b506000838581613fb557fe5b0495945050505050565b6060824710156140005760405162461bcd60e51b815260040180806020018281038252602681526020018061421b6026913960400191505060405180910390fd5b6140098561411b565b61405a576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106140995780518252601f19909201916020918201910161407a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146140fb576040519150601f19603f3d011682016040523d82523d6000602084013e614100565b606091505b5091509150614110828286614121565b979650505050505050565b3b151590565b60608315614130575081612a04565b8251156141405782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156102e95781810151838201526020016102d156fe42617365506f736974696f6e4d616e616765723a206d617820676c6f62616c206c6f6e677320657863656564656442617365506f736974696f6e4d616e616765723a20696e73756666696369656e7420616d6f756e744f7574416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c42617365506f736974696f6e4d616e616765723a206d61726b207072696365206c6f776572207468616e206c696d697442617365506f736974696f6e4d616e616765723a206d617820676c6f62616c2073686f727473206578636565646564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7742617365506f736974696f6e4d616e616765723a206d61726b20707269636520686967686572207468616e206c696d697442617365506f736974696f6e4d616e616765723a20696e76616c6964205f706174682e6c656e67746842617365506f736974696f6e4d616e616765723a20696e76616c69642073656e6465725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564506f736974696f6e4d616e616765723a20696e76616c6964205f706174682e6c656e677468a26469706673582212200076238d90e059c3e4e1c3444d04ce94260a00d42897eca7d6d5c38c96297ede64736f6c634300060c0033",
  "deployedBytecode": "0x60806040526004361061026d5760003560e01c806367a5279311610153578063b7ddc992116100cb578063ef12c67e1161007f578063f851a44011610064578063f851a44014610cb5578063f887ea4014610cca578063fbfa77cf14610cdf57610327565b8063ef12c67e14610ac2578063f255527814610c7a57610327565b8063de2ea948116100b0578063de2ea94814610940578063e1f21c6714610995578063e7dae9fe146109d857610327565b8063b7ddc99214610835578063cfad57a21461090d57610327565b80639698d25a116101225780639a0a18bf116101075780639a0a18bf14610711578063ae4d7f9a1461073d578063b32755de1461077057610327565b80639698d25a146106c957806398d1e03a146106fc57610327565b806367a5279314610639578063704b6c021461064e578063776af5ba146106815780638c0f9aac1461069657610327565b806324a084df116101e65780634584bd4b116101b5578063529a356f1161019a578063529a356f146105dc5780635f88eade1461060f578063657bc5d01461062457610327565b80634584bd4b1461059d578063490ae210146105b257610327565b806324a084df146104cd5780633833f5f5146105065780633fc8cef31461054d5780634453a3741461056257610327565b80631b9043591161023d5780631e261538116102225780631e2615381461042d57806321acf65914610468578063233bfe3b146104a357610327565b80631b904359146103cc5780631ce9cb8f146103fa57610327565b80626cc35e1461032c5780631045c74e1461035d578063126082cf146103a257806312d43a51146103b757610327565b3661032757600c54604080516060810190915260238082526001600160a01b0390921633149161431b6020830139906103245760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156102e95781810151838201526020016102d1565b50505050905090810190601f1680156103165780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50005b600080fd5b34801561033857600080fd5b50610341610cf4565b604080516001600160a01b039092168252519081900360200190f35b34801561036957600080fd5b506103906004803603602081101561038057600080fd5b50356001600160a01b0316610d03565b60408051918252519081900360200190f35b3480156103ae57600080fd5b50610390610d15565b3480156103c357600080fd5b50610341610d1b565b3480156103d857600080fd5b506103f8600480360360208110156103ef57600080fd5b50351515610d2a565b005b34801561040657600080fd5b506103906004803603602081101561041d57600080fd5b50356001600160a01b0316610dd8565b34801561043957600080fd5b506103f86004803603604081101561045057600080fd5b506001600160a01b0381351690602001351515610dea565b34801561047457600080fd5b506103f86004803603604081101561048b57600080fd5b506001600160a01b0381351690602001351515610ea9565b3480156104af57600080fd5b506103f8600480360360208110156104c657600080fd5b5035610f6c565b3480156104d957600080fd5b506103f8600480360360408110156104f057600080fd5b506001600160a01b038135169060200135611006565b34801561051257600080fd5b506105396004803603602081101561052957600080fd5b50356001600160a01b0316611074565b604080519115158252519081900360200190f35b34801561055957600080fd5b50610341611089565b34801561056e57600080fd5b506103f86004803603604081101561058557600080fd5b506001600160a01b0381351690602001351515611098565b3480156105a957600080fd5b50610539611157565b3480156105be57600080fd5b506103f8600480360360208110156105d557600080fd5b5035611165565b3480156105e857600080fd5b50610539600480360360208110156105ff57600080fd5b50356001600160a01b03166111ff565b34801561061b57600080fd5b50610539611214565b34801561063057600080fd5b5061034161121d565b34801561064557600080fd5b5061039061122c565b34801561065a57600080fd5b506103f86004803603602081101561067157600080fd5b50356001600160a01b0316611232565b34801561068d57600080fd5b506103416112ea565b3480156106a257600080fd5b50610539600480360360208110156106b957600080fd5b50356001600160a01b03166112ff565b3480156106d557600080fd5b50610390600480360360208110156106ec57600080fd5b50356001600160a01b0316611314565b34801561070857600080fd5b50610390611326565b34801561071d57600080fd5b506103f86004803603602081101561073457600080fd5b5035151561132c565b34801561074957600080fd5b506103f86004803603602081101561076057600080fd5b50356001600160a01b03166113d2565b6103f8600480360360c081101561078657600080fd5b8101906020810181356401000000008111156107a157600080fd5b8201836020820111156107b357600080fd5b803590602001918460208302840111640100000000831117156107d557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550506001600160a01b0383351693505050602081013590604081013590606081013515159060800135611492565b34801561084157600080fd5b506103f8600480360360e081101561085857600080fd5b81019060208101813564010000000081111561087357600080fd5b82018360208201111561088557600080fd5b803590602001918460208302840111640100000000831117156108a757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550506001600160a01b0383351693505050602081013590604081013590606081013590608081013515159060a0013561178f565b34801561091957600080fd5b506103f86004803603602081101561093057600080fd5b50356001600160a01b0316611b00565b34801561094c57600080fd5b506103f8600480360360a081101561096357600080fd5b506001600160a01b03813581169160208101358216916040820135811691606081013515159160809091013516611b86565b3480156109a157600080fd5b506103f8600480360360608110156109b857600080fd5b506001600160a01b038135811691602081013590911690604001356120b0565b3480156109e457600080fd5b506103f860048036036101208110156109fc57600080fd5b810190602081018135640100000000811115610a1757600080fd5b820183602082011115610a2957600080fd5b80359060200191846020830284011164010000000083111715610a4b57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505081356001600160a01b0390811693506020830135926040810135925060608101351515916080820135169060a08101359060c08101359060e00135151561218f565b348015610ace57600080fd5b506103f860048036036060811015610ae557600080fd5b810190602081018135640100000000811115610b0057600080fd5b820183602082011115610b1257600080fd5b80359060200191846020830284011164010000000083111715610b3457600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050640100000000811115610b8457600080fd5b820183602082011115610b9657600080fd5b80359060200191846020830284011164010000000083111715610bb857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050640100000000811115610c0857600080fd5b820183602082011115610c1a57600080fd5b80359060200191846020830284011164010000000083111715610c3c57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550612463945050505050565b348015610c8657600080fd5b506103f860048036036040811015610c9d57600080fd5b506001600160a01b0381358116916020013516612664565b348015610cc157600080fd5b5061034161275a565b348015610cd657600080fd5b50610341612769565b348015610ceb57600080fd5b50610341612778565b600d546001600160a01b031681565b600e6020526000908152604090205481565b61271081565b6000546001600160a01b031681565b6008546001600160a01b03163314610d89576040805162461bcd60e51b815260206004820152601e60248201527f42617365506f736974696f6e4d616e616765723a20666f7262696464656e0000604482015290519081900360640190fd5b60028054821515610100810261ff00199092169190911790915560408051918252517fa956222e37fe025ff51e5440ac729a9bd417ff91e485e14dcffa2c0ba8894f409181900360200190a150565b60106020526000908152604090205481565b6008546001600160a01b03163314610e49576040805162461bcd60e51b815260206004820152601e60248201527f42617365506f736974696f6e4d616e616765723a20666f7262696464656e0000604482015290519081900360640190fd5b6001600160a01b038216600081815260036020908152604091829020805460ff1916851515908117909155825190815291517f1d5bc0255b943d6a5b5279e8a55d74d620baccbceecb25e87a3558f14c4c118e9281900390910190a25050565b6008546001600160a01b03163314610f08576040805162461bcd60e51b815260206004820152601e60248201527f42617365506f736974696f6e4d616e616765723a20666f7262696464656e0000604482015290519081900360640190fd5b6001600160a01b038216600081815260046020908152604091829020805460ff191685151590811790915582519384529083015280517fa4e46c70ff429a91de7d1716d736e877c7cca1c22ac850b23d242530dd95e4749281900390910190a15050565b6008546001600160a01b03163314610fcb576040805162461bcd60e51b815260206004820152601e60248201527f42617365506f736974696f6e4d616e616765723a20666f7262696464656e0000604482015290519081900360640190fd5b60078190556040805182815290517f21167d0d4661af93817ebce920f18986eed3d75d5e1c03f2aed05efcbafbc4529181900360200190a150565b6000546001600160a01b0316331461105d576040805162461bcd60e51b815260206004820152601560248201527423b7bb32b93730b136329d103337b93134b23232b760591b604482015290519081900360640190fd5b6110706001600160a01b03831682612787565b5050565b60036020526000908152604090205460ff1681565b600c546001600160a01b031681565b6008546001600160a01b031633146110f7576040805162461bcd60e51b815260206004820152601e60248201527f42617365506f736974696f6e4d616e616765723a20666f7262696464656e0000604482015290519081900360640190fd5b6001600160a01b038216600081815260056020908152604091829020805460ff1916851515908117909155825190815291517f8c0d56805c3b43d441481229dc64bee168253ffe4305f37ab7cfe63b1c4268c69281900390910190a25050565b600254610100900460ff1681565b6008546001600160a01b031633146111c4576040805162461bcd60e51b815260206004820152601e60248201527f42617365506f736974696f6e4d616e616765723a20666f7262696464656e0000604482015290519081900360640190fd5b60068190556040805182815290517f974fd3c1fcb4653dfc4fb740c4c692cd212d55c28f163f310128cb64d83006759181900360200190a150565b60056020526000908152604090205460ff1681565b60025460ff1681565b600a546001600160a01b031681565b60065481565b6000546001600160a01b03163314611289576040805162461bcd60e51b815260206004820152601560248201527423b7bb32b93730b136329d103337b93134b23232b760591b604482015290519081900360640190fd5b600880546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff19909116811790915560408051918252517f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a19181900360200190a150565b6002546201000090046001600160a01b031681565b60046020526000908152604090205460ff1681565b600f6020526000908152604090205481565b60075481565b6008546001600160a01b0316331461138b576040805162461bcd60e51b815260206004820152601e60248201527f42617365506f736974696f6e4d616e616765723a20666f7262696464656e0000604482015290519081900360640190fd5b6002805482151560ff19909116811790915560408051918252517fb396a770d36909ca07c2b7d7d408f43c9bb74425c5d17caf44336c4f09c420949181900360200190a150565b6008546001600160a01b03163314611431576040805162461bcd60e51b815260206004820152601e60248201527f42617365506f736974696f6e4d616e616765723a20666f7262696464656e0000604482015290519081900360640190fd5b600d80546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff19909116811790915560408051918252517f828abcccea18192c21d645e575652c49e20b986dab777906fc473d056b01b6a89181900360200190a150565b600260015414156114ea576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001553360009081526004602052604090205460ff168061150f575060025460ff165b6040518060400160405280601a81526020017f506f736974696f6e4d616e616765723a20666f7262696464656e000000000000815250906115915760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b508551600114806115a3575085516002145b60405180606001604052806025815260200161436860259139906116085760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b50600c5486516001600160a01b0390911690879060009061162557fe5b60200260200101516001600160a01b0316146040518060400160405280601e81526020017f506f736974696f6e4d616e616765723a20696e76616c6964205f706174680000815250906116b95760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b50341561175e576116c8612871565b85513490600110156116ff57600954600c546116f1916001600160a01b039182169116346128dd565b6116fc87863061295d565b90505b600061170f3389848a888a612a0b565b905061175b600960009054906101000a90046001600160a01b0316828a60018c51038151811061173b57fe5b60200260200101516001600160a01b03166128dd9092919063ffffffff16565b50505b611783338760018951038151811061177257fe5b602002602001015187868686612aea565b50506001805550505050565b600260015414156117e7576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001553360009081526004602052604090205460ff168061180c575060025460ff165b6040518060400160405280601a81526020017f506f736974696f6e4d616e616765723a20666f7262696464656e0000000000008152509061188e5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b508651600114806118a0575086516002145b60405180606001604052806025815260200161436860259139906119055760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b508415611ace578651600114156119c657600b5487516001600160a01b0390911690631b82787890899060009061193857fe5b60200260200101513330896040518563ffffffff1660e01b815260040180856001600160a01b03168152602001846001600160a01b03168152602001836001600160a01b03168152602001828152602001945050505050600060405180830381600087803b1580156119a957600080fd5b505af11580156119bd573d6000803e3d6000fd5b50505050611a90565b600b5487516001600160a01b0390911690631b8278789089906000906119e857fe5b6020908102919091010151600954604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b0393841660048201523360248201529290911660448301526064820189905251608480830192600092919082900301818387803b158015611a6a57600080fd5b505af1158015611a7e573d6000803e3d6000fd5b50505050611a8d87853061295d565b94505b6000611aa03389888a8789612a0b565b9050611acc600960009054906101000a90046001600160a01b0316828a60018c51038151811061173b57fe5b505b611af3338860018a510381518110611ae257fe5b602002602001015188868686612aea565b5050600180555050505050565b6000546001600160a01b03163314611b57576040805162461bcd60e51b815260206004820152601560248201527423b7bb32b93730b136329d103337b93134b23232b760591b604482015290519081900360640190fd5b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60026001541415611bde576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260015533600090815260056020908152604091829020548251808401909352601a83527f506f736974696f6e4d616e616765723a20666f7262696464656e0000000000009183019190915260ff16611c795760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b50600954604080517f12d43a5100000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169160009183916312d43a5191600480820192602092909190829003018186803b158015611cdd57600080fd5b505afa158015611cf1573d6000803e3d6000fd5b505050506040513d6020811015611d0757600080fd5b505160095460408051634a3f088d60e01b81526001600160a01b038b811660048301528a811660248301528981166044830152881515606483015291519394506000939190921691634a3f088d91608480830192610100929190829003018186803b158015611d7557600080fd5b505afa158015611d89573d6000803e3d6000fd5b505050506040513d610100811015611da057600080fd5b50519050600085611e2957836001600160a01b031663e124e6d2886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611df857600080fd5b505afa158015611e0c573d6000803e3d6000fd5b505050506040513d6020811015611e2257600080fd5b5051611ea3565b836001600160a01b03166381a612d6886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611e7657600080fd5b505afa158015611e8a573d6000803e3d6000fd5b505050506040513d6020811015611ea057600080fd5b50515b600a5460408051633cc8e33b60e21b81526001600160a01b038d811660048301528c811660248301528b811660448301528a151560648301526084820187905260a48201859052600060c4830181905292519495509092169263f3238cec9260e480820193929182900301818387803b158015611f1f57600080fd5b505af1158015611f33573d6000803e3d6000fd5b50505050826001600160a01b0316636d63c1d0856040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b158015611f8657600080fd5b505af1158015611f9a573d6000803e3d6000fd5b5050604080517fde2ea9480000000000000000000000000000000000000000000000000000000081526001600160a01b038d811660048301528c811660248301528b811660448301528a1515606483015289811660848301529151918816935063de2ea948925060a48082019260009290919082900301818387803b15801561202257600080fd5b505af1158015612036573d6000803e3d6000fd5b50505050826001600160a01b031663d3c87bbb856040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b15801561208957600080fd5b505af115801561209d573d6000803e3d6000fd5b5050600180555050505050505050505050565b6000546001600160a01b03163314612107576040805162461bcd60e51b815260206004820152601560248201527423b7bb32b93730b136329d103337b93134b23232b760591b604482015290519081900360640190fd5b826001600160a01b031663095ea7b383836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561215e57600080fd5b505af1158015612172573d6000803e3d6000fd5b505050506040513d602081101561218857600080fd5b5050505050565b600260015414156121e7576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001553360009081526004602052604090205460ff168061220c575060025460ff165b6040518060400160405280601a81526020017f506f736974696f6e4d616e616765723a20666f7262696464656e0000000000008152509061228e5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b508851600114806122a0575088516002145b60405180606001604052806025815260200161436860259139906123055760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b5080156123c357600c5489516001600160a01b03909116908a90600019810190811061232d57fe5b60200260200101516001600160a01b0316146040518060400160405280601e81526020017f506f736974696f6e4d616e616765723a20696e76616c6964205f706174680000815250906123c15760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b505b60006123e9338b6000815181106123d657fe5b60200260200101518b8b8b8b308b612f5f565b905080156124535760018a511115612429576009548a5161241b916001600160a01b03169083908d9060009061173b57fe5b6124268a843061295d565b90505b811561243e576124398186613468565b612453565b61245385828c60018e51038151811061173b57fe5b5050600180555050505050505050565b6008546001600160a01b031633146124c2576040805162461bcd60e51b815260206004820152601e60248201527f42617365506f736974696f6e4d616e616765723a20666f7262696464656e0000604482015290519081900360640190fd5b60005b835181101561255d5760008482815181106124dc57fe5b602002602001015190508382815181106124f257fe5b6020026020010151600e6000836001600160a01b03166001600160a01b031681526020019081526020016000208190555082828151811061252f57fe5b6020908102919091018101516001600160a01b039092166000908152600f90915260409020556001016124c5565b507fae32d569b058895b9620d6552b09aaffedc9a6f396be4d595a224ad09f8b213983838360405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156125ca5781810151838201526020016125b2565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156126095781810151838201526020016125f1565b50505050905001848103825285818151815260200191508051906020019060200280838360005b83811015612648578181015183820152602001612630565b50505050905001965050505050505060405180910390a1505050565b6008546001600160a01b031633146126c3576040805162461bcd60e51b815260206004820152601e60248201527f42617365506f736974696f6e4d616e616765723a20666f7262696464656e0000604482015290519081900360640190fd5b6001600160a01b038216600090815260106020526040902054806126e75750611070565b6001600160a01b03831660008181526010602052604081205561270b9083836128dd565b604080516001600160a01b0380861682528416602082015280820183905290517f4f1b51dd7a2fcb861aa2670f668be66835c4ee12b4bbbf037e4d0018f39819e49181900360600190a1505050565b6008546001600160a01b031681565b600b546001600160a01b031681565b6009546001600160a01b031681565b804710156127dc576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d8060008114612827576040519150601f19603f3d011682016040523d82523d6000602084013e61282c565b606091505b505090508061286c5760405162461bcd60e51b815260040180806020018281038252603a8152602001806141e1603a913960400191505060405180910390fd5b505050565b34156128db57600c60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156128c757600080fd5b505af1158015612188573d6000803e3d6000fd5b565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261286c90849061351c565b60008351600214156129a45761299d8460008151811061297957fe5b60200260200101518560018151811061298e57fe5b602002602001015185856135cd565b9050612a04565b6040518060600160405280602981526020016142f26029913960405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b9392505050565b600080612a1c8888888888886136e8565b90508015612adb576000612a53612710612a4d612a466006546127106138c590919063ffffffff16565b8a90613910565b90613969565b90506000612a6188836138c5565b905060008960018b510381518110612a7557fe5b60200260200101519050612ab78260106000846001600160a01b03166001600160a01b03168152602001908152602001600020546139ab90919063ffffffff16565b6001600160a01b03909116600090815260106020526040902055509150612ae09050565b859150505b9695505050505050565b6009546001600160a01b0316600083612b7b57816001600160a01b03166381a612d6876040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612b4a57600080fd5b505afa158015612b5e573d6000803e3d6000fd5b505050506040513d6020811015612b7457600080fd5b5051612bf5565b816001600160a01b031663e124e6d2876040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612bc857600080fd5b505afa158015612bdc573d6000803e3d6000fd5b505050506040513d6020811015612bf257600080fd5b50515b90508315612c6c57828111156040518060600160405280603181526020016142c16031913990612c665760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b50612cd7565b828110156040518060600160405280603081526020016142416030913990612cd55760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b505b612ce2868587613a05565b6000826001600160a01b03166312d43a516040518163ffffffff1660e01b815260040160206040518083038186803b158015612d1d57600080fd5b505afa158015612d31573d6000803e3d6000fd5b505050506040513d6020811015612d4757600080fd5b5051600a5460408051633cc8e33b60e21b81526001600160a01b038d811660048301528c811660248301528b811660448301528915156064830152608482018b905260a48201879052600160c4830152915193945091169163f3238cec9160e48082019260009290919082900301818387803b158015612dc657600080fd5b505af1158015612dda573d6000803e3d6000fd5b50505050806001600160a01b0316636d63c1d0846040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b158015612e2d57600080fd5b505af1158015612e41573d6000803e3d6000fd5b5050600b54604080517f1f1dd1760000000000000000000000000000000000000000000000000000000081526001600160a01b038e811660048301528d811660248301528c81166044830152606482018c90528a151560848301529151919092169350631f1dd176925060a480830192600092919082900301818387803b158015612ecb57600080fd5b505af1158015612edf573d6000803e3d6000fd5b50505050806001600160a01b031663d3c87bbb846040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b158015612f3257600080fd5b505af1158015612f46573d6000803e3d6000fd5b50505050612f548987613c41565b505050505050505050565b6009546000906001600160a01b03168185612ff257816001600160a01b031663e124e6d28a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612fc157600080fd5b505afa158015612fd5573d6000803e3d6000fd5b505050506040513d6020811015612feb57600080fd5b505161306c565b816001600160a01b03166381a612d68a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561303f57600080fd5b505afa158015613053573d6000803e3d6000fd5b505050506040513d602081101561306957600080fd5b50515b905085156130e3578381101560405180606001604052806030815260200161424160309139906130dd5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b5061314e565b838111156040518060600160405280603181526020016142c1603191399061314c5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b505b6000826001600160a01b03166312d43a516040518163ffffffff1660e01b815260040160206040518083038186803b15801561318957600080fd5b505afa15801561319d573d6000803e3d6000fd5b505050506040513d60208110156131b357600080fd5b81019080805190602001909291905050509050600a60009054906101000a90046001600160a01b03166001600160a01b031663f3238cec8d8d8d8b8d8860006040518863ffffffff1660e01b815260040180886001600160a01b03168152602001876001600160a01b03168152602001866001600160a01b0316815260200185151581526020018481526020018381526020018215158152602001975050505050505050600060405180830381600087803b15801561327157600080fd5b505af1158015613285573d6000803e3d6000fd5b50505050806001600160a01b0316636d63c1d0846040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156132d857600080fd5b505af11580156132ec573d6000803e3d6000fd5b505050506000600b60009054906101000a90046001600160a01b03166001600160a01b0316632662166b8e8e8e8e8e8e8e6040518863ffffffff1660e01b815260040180886001600160a01b03168152602001876001600160a01b03168152602001866001600160a01b031681526020018581526020018481526020018315158152602001826001600160a01b03168152602001975050505050505050602060405180830381600087803b1580156133a357600080fd5b505af11580156133b7573d6000803e3d6000fd5b505050506040513d60208110156133cd57600080fd5b5051604080517fd3c87bbb0000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015291519293509084169163d3c87bbb9160248082019260009290919082900301818387803b15801561343657600080fd5b505af115801561344a573d6000803e3d6000fd5b505050506134588d8a613dcd565b9c9b505050505050505050505050565b600c54604080517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526004810185905290516001600160a01b0390921691632e1a7d4d9160248082019260009290919082900301818387803b1580156134ce57600080fd5b505af11580156134e2573d6000803e3d6000fd5b50506040516001600160a01b038416925084156108fc02915084906000818181858888f1935050505015801561286c573d6000803e3d6000fd5b6060613571826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613ee99092919063ffffffff16565b80519091501561286c5780806020019051602081101561359057600080fd5b505161286c5760405162461bcd60e51b815260040180806020018281038252602a81526020018061433e602a913960400191505060405180910390fd5b600954604080517f933162120000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015286811660248301528481166044830152915160009384931691639331621291606480830192602092919082900301818787803b15801561364657600080fd5b505af115801561365a573d6000803e3d6000fd5b505050506040513d602081101561367057600080fd5b50516040805160608101909152602b80825291925085831015916141b66020830139906136de5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b5095945050505050565b6000826136f757506000612ae0565b8161370457506001612ae0565b60008660018851038151811061371657fe5b602090810291909101015160095460408051634a3f088d60e01b81526001600160a01b038c81166004830152808516602483015289811660448301528815156064830152915193945091169160009182918491634a3f088d91608480830192610100929190829003018186803b15801561378f57600080fd5b505afa1580156137a3573d6000803e3d6000fd5b505050506040513d6101008110156137ba57600080fd5b5080516020909101519092509050816137da576000945050505050612ae0565b60006137e683886139ab565b90506000846001600160a01b0316630a48d5a9878d6040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b15801561383f57600080fd5b505afa158015613853573d6000803e3d6000fd5b505050506040513d602081101561386957600080fd5b50519050600061387984836139ab565b9050600061388d85612a4d88612710613910565b905060006138ae83612a4d600754612710018861391090919063ffffffff16565b919091109f9e505050505050505050505050505050565b600061390783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613f00565b90505b92915050565b60008261391f5750600061390a565b8282028284828161392c57fe5b04146139075760405162461bcd60e51b81526004018080602001828103825260218152602001806142a06021913960400191505060405180910390fd5b600061390783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613f5a565b600082820183811015613907576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b80613a0f5761286c565b8115613b44576001600160a01b0383166000908152600e60205260409020548015801590613ad95750600954604080517ff07456ce0000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015291518493613ad793879391169163f07456ce91602480820192602092909190829003018186803b158015613aa557600080fd5b505afa158015613ab9573d6000803e3d6000fd5b505050506040513d6020811015613acf57600080fd5b5051906139ab565b115b15613b3e576040518060600160405280602e8152602001614188602e913960405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b5061286c565b6001600160a01b0383166000908152600f60205260409020548015801590613bd65750600954604080517f8a78daa80000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015291518493613bd4938793911691638a78daa891602480820192602092909190829003018186803b158015613aa557600080fd5b115b15613c3b576040518060600160405280602f8152602001614271602f913960405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b50505050565b600d546001600160a01b031680613c585750611070565b600080826001600160a01b031663534ef883866040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050604080518083038186803b158015613ca757600080fd5b505afa158015613cbb573d6000803e3d6000fd5b505050506040513d6040811015613cd157600080fd5b508051602091820151600954604080517f318bc68900000000000000000000000000000000000000000000000000000000815290519396509194507fc2414023ce7002ee98557d1e7be21e5559073336f2217ee5f9b2e50fd85f71ee93899389936001600160a01b039093169263318bc689926004808301939192829003018186803b158015613d6057600080fd5b505afa158015613d74573d6000803e3d6000fd5b505050506040513d6020811015613d8a57600080fd5b5051604080516001600160a01b03948516815260208101939093528281019190915260608201869052918416608082015290519081900360a00190a15050505050565b600d546001600160a01b031680613de45750611070565b600080826001600160a01b031663534ef883866040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050604080518083038186803b158015613e3357600080fd5b505afa158015613e47573d6000803e3d6000fd5b505050506040513d6040811015613e5d57600080fd5b508051602090910151909250905081613e7857505050611070565b7f474c763ff84bf2c2039a6d9fea955ecd0f724030e3c365b91169c6a16fe751b78585600960009054906101000a90046001600160a01b03166001600160a01b031663318bc6896040518163ffffffff1660e01b815260040160206040518083038186803b158015613d6057600080fd5b6060613ef88484600085613fbf565b949350505050565b60008184841115613f525760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b505050900390565b60008183613fa95760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102e95781810151838201526020016102d1565b506000838581613fb557fe5b0495945050505050565b6060824710156140005760405162461bcd60e51b815260040180806020018281038252602681526020018061421b6026913960400191505060405180910390fd5b6140098561411b565b61405a576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106140995780518252601f19909201916020918201910161407a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146140fb576040519150601f19603f3d011682016040523d82523d6000602084013e614100565b606091505b5091509150614110828286614121565b979650505050505050565b3b151590565b60608315614130575081612a04565b8251156141405782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156102e95781810151838201526020016102d156fe42617365506f736974696f6e4d616e616765723a206d617820676c6f62616c206c6f6e677320657863656564656442617365506f736974696f6e4d616e616765723a20696e73756666696369656e7420616d6f756e744f7574416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c42617365506f736974696f6e4d616e616765723a206d61726b207072696365206c6f776572207468616e206c696d697442617365506f736974696f6e4d616e616765723a206d617820676c6f62616c2073686f727473206578636565646564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7742617365506f736974696f6e4d616e616765723a206d61726b20707269636520686967686572207468616e206c696d697442617365506f736974696f6e4d616e616765723a20696e76616c6964205f706174682e6c656e67746842617365506f736974696f6e4d616e616765723a20696e76616c69642073656e6465725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564506f736974696f6e4d616e616765723a20696e76616c6964205f706174682e6c656e677468a26469706673582212200076238d90e059c3e4e1c3444d04ce94260a00d42897eca7d6d5c38c96297ede64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "gov",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15155,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 12203,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "opened",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 12206,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "shouldValidateIncreaseOrder",
        "offset": 1,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 12208,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "orderBook",
        "offset": 2,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 12212,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "isOrderKeeper",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12216,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "isPartner",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12220,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "isLiquidator",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12006,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "depositFee",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 12009,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "increasePositionBufferBps",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 12011,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "admin",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 12013,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "vault",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 12015,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "shortsTracker",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 12017,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "router",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 12019,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "weth",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 12021,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "referralStorage",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 12026,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "maxGlobalLongSizes",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12031,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "maxGlobalShortSizes",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12035,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "feeReserves",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}