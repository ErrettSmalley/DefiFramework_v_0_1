{
  "address": "0x69DC763488380051BC2B0420c8d15e8B588887dc",
  "abi": [
    {
      "inputs": [],
      "name": "bnMold",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bonusMoldTracker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "esMold",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeMlpTracker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeMoldTracker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mold",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_esMold",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bnMold",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mlp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakedMoldTracker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bonusMoldTracker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeMoldTracker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeMlpTracker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakedMlpTracker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mlpManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_moldVester",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mlpVester",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minUsdm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minMlp",
          "type": "uint256"
        }
      ],
      "name": "mintAndStakeMlp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minUsdm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minMlp",
          "type": "uint256"
        }
      ],
      "name": "mintAndStakeMlpETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mlp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mlpManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mlpVester",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mold",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "moldVester",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pendingReceivers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedMlpTracker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedMoldTracker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_mlpAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "unstakeAndRedeemMlp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mlpAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "unstakeAndRedeemMlpETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3505d67045b7ec45e7d4b572d6d5aeb7ae3ef272869978d2a575ed9f23285b2b",
  "receipt": {
    "to": null,
    "from": "0x9B6B26Db5F9149F0e3f4DAF2Eb98307020236dDB",
    "contractAddress": "0x69DC763488380051BC2B0420c8d15e8B588887dc",
    "transactionIndex": 1,
    "gasUsed": "1150902",
    "logsBloom": "0x
    "blockHash": "0x0e476ed5c7d77392e19ed1766d184b63c03e065a999149a175e78cf5325f4617",
    "transactionHash": "0x3505d67045b7ec45e7d4b572d6d5aeb7ae3ef272869978d2a575ed9f23285b2b",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 33420480,
        "transactionHash": "0x3505d67045b7ec45e7d4b572d6d5aeb7ae3ef272869978d2a575ed9f23285b2b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009b6b26db5f9149f0e3f4daf2eb98307020236ddb",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000a9afae04a459b600000000000000000000000000000000000000000000000086ec22379a0ff0400000000000000000000000000000000000000000000004562f640ad94559e2c100000000000000000000000000000000000000000000000086427289956b968a000000000000000000000000000000000000000000000456300dba8749fe3c77",
        "logIndex": 2,
        "blockHash": "0x0e476ed5c7d77392e19ed1766d184b63c03e065a999149a175e78cf5325f4617"
      }
    ],
    "blockNumber": 33420480,
    "cumulativeGasUsed": "4252798",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "59bf562207d3b98a68d8cbf2ed09b4a8",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"bnMold\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusMoldTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esMold\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMlpTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMoldTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mold\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_esMold\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bnMold\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mlp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakedMoldTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bonusMoldTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeMoldTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeMlpTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakedMlpTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mlpManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_moldVester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mlpVester\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minUsdm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minMlp\",\"type\":\"uint256\"}],\"name\":\"mintAndStakeMlp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minUsdm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minMlp\",\"type\":\"uint256\"}],\"name\":\"mintAndStakeMlpETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mlp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mlpManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mlpVester\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mold\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moldVester\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingReceivers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedMlpTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedMoldTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mlpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"unstakeAndRedeemMlp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mlpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"unstakeAndRedeemMlpETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/RewardRouterV2.sol\":\"RewardRouterV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ncontract Governable {\\n    address public gov;\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"Governable: forbidden\\\");\\n        _;\\n    }\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n}\\n\",\"keccak256\":\"0x369f345bc3ec6caba2e5abb12a3b4255da3c6b96374ffbd0b715e64e6508577f\",\"license\":\"MIT\"},\"contracts/core/interfaces/IMlpManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IMlpManager {\\n    function usdm() external view returns (address);\\n    function cooldownDuration() external returns (uint256);\\n    function getAumInUsdm(bool maximise) external view returns (uint256);\\n    function lastAddedAt(address _account) external returns (uint256);\\n    function addLiquidity(address _token, uint256 _amount, uint256 _minUsdm, uint256 _minMlp) external returns (uint256);\\n    function addLiquidityForAccount(address _fundingAccount, address _account, address _token, uint256 _amount, uint256 _minUsdm, uint256 _minMlp) external returns (uint256);\\n    function removeLiquidity(address _tokenOut, uint256 _mlpAmount, uint256 _minOut, address _receiver) external returns (uint256);\\n    function removeLiquidityForAccount(address _account, address _tokenOut, uint256 _mlpAmount, uint256 _minOut, address _receiver) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xff9955ced22c958d3daedf78bbd2b7ba52ae63d83558e0c978cd9dbcbb31ce6b\",\"license\":\"MIT\"},\"contracts/core/settings/RewardRouterV2Settings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"../storage/RewardRouterV2Storage.sol\\\";\\nabstract contract RewardRouterV2Settings is RewardRouterV2Storage {\\n    function initialize(address _weth, address _mold, address _esMold, address _bnMold, address _mlp, address _stakedMoldTracker, address _bonusMoldTracker, address _feeMoldTracker, address _feeMlpTracker, address _stakedMlpTracker, address _mlpManager, address _moldVester, address _mlpVester) external onlyGov {\\n        require(!isInitialized, Errors.REWARDROUTER_ALREADY_INITIALIZED);\\n        isInitialized = true;\\n        weth = _weth;\\n        mold = _mold;\\n        esMold = _esMold;\\n        bnMold = _bnMold;\\n        mlp = _mlp;\\n        stakedMoldTracker = _stakedMoldTracker;\\n        bonusMoldTracker = _bonusMoldTracker;\\n        feeMoldTracker = _feeMoldTracker;\\n        feeMlpTracker = _feeMlpTracker;\\n        stakedMlpTracker = _stakedMlpTracker;\\n        mlpManager = _mlpManager;\\n        moldVester = _moldVester;\\n        mlpVester = _mlpVester;\\n    }\\n//    function withdrawToken(address _token, address _account, uint256 _amount) external onlyGov {\\n//        IERC20(_token).safeTransfer(_account, _amount);\\n//    }\\n//    function batchStakeMoldForAccount(address[] memory _accounts, uint256[] memory _amounts) external nonReentrant onlyGov {\\n//        address _mold = mold;\\n//        for (uint256 i = 0; i < _accounts.length; i++) {\\n//            _stakeMold(msg.sender, _accounts[i], _mold, _amounts[i]);\\n//        }\\n//    }\\n//    function stakeMoldForAccount(address _account, uint256 _amount) external nonReentrant onlyGov {\\n//        _stakeMold(msg.sender, _account, mold, _amount);\\n//    }\\n//    function stakeMold(uint256 _amount) external nonReentrant {\\n//        _stakeMold(msg.sender, msg.sender, mold, _amount);\\n//    }\\n//    function stakeEsMold(uint256 _amount) external nonReentrant {\\n//        _stakeMold(msg.sender, msg.sender, esMold, _amount);\\n//    }\\n//    function unstakeMold(uint256 _amount) external nonReentrant {\\n//        _unstakeMold(msg.sender, mold, _amount, true);\\n//    }\\n//    function unstakeEsMold(uint256 _amount) external nonReentrant {\\n//        _unstakeMold(msg.sender, esMold, _amount, true);\\n//    }\\n//    function claim() external nonReentrant {\\n//        address account = msg.sender;\\n//        IRewardTracker(feeMoldTracker).claimForAccount(account, account);\\n//        IRewardTracker(feeMlpTracker).claimForAccount(account, account);\\n//        IRewardTracker(stakedMoldTracker).claimForAccount(account, account);\\n//        IRewardTracker(stakedMlpTracker).claimForAccount(account, account);\\n//    }\\n//    function claimEsMold() external nonReentrant {\\n//        address account = msg.sender;\\n//        IRewardTracker(stakedMoldTracker).claimForAccount(account, account);\\n//        IRewardTracker(stakedMlpTracker).claimForAccount(account, account);\\n//    }\\n//    function claimFees() external nonReentrant {\\n//        address account = msg.sender;\\n//\\n//        IRewardTracker(feeMoldTracker).claimForAccount(account, account);\\n//        IRewardTracker(feeMlpTracker).claimForAccount(account, account);\\n//    }\\n//    function compound() external nonReentrant {\\n//        _compound(msg.sender);\\n//    }\\n//    function compoundForAccount(address _account) external nonReentrant onlyGov {\\n//        _compound(_account);\\n//    }\\n//    function handleRewards(bool _shouldClaimMold, bool _shouldStakeMold, bool _shouldClaimEsMold, bool _shouldStakeEsMold, bool _shouldStakeMultiplierPoints, bool _shouldClaimWeth, bool _shouldConvertWethToEth) external nonReentrant {\\n//        address account = msg.sender;\\n//        uint256 moldAmount = 0;\\n//        if (_shouldClaimMold) {\\n//            uint256 moldAmount0 = IVester(moldVester).claimForAccount(account, account);\\n//            uint256 moldAmount1 = IVester(mlpVester).claimForAccount(account, account);\\n//            moldAmount = moldAmount0.add(moldAmount1);\\n//        }\\n//        if (_shouldStakeMold && moldAmount > 0) {\\n//            _stakeMold(account, account, mold, moldAmount);\\n//        }\\n//        uint256 esMoldAmount = 0;\\n//        if (_shouldClaimEsMold) {\\n//            uint256 esMoldAmount0 = IRewardTracker(stakedMoldTracker).claimForAccount(account, account);\\n//            uint256 esMoldAmount1 = IRewardTracker(stakedMlpTracker).claimForAccount(account, account);\\n//            esMoldAmount = esMoldAmount0.add(esMoldAmount1);\\n//        }\\n//        if (_shouldStakeEsMold && esMoldAmount > 0) {\\n//            _stakeMold(account, account, esMold, esMoldAmount);\\n//        }\\n//        if (_shouldStakeMultiplierPoints) {\\n//            uint256 bnMoldAmount = IRewardTracker(bonusMoldTracker).claimForAccount(account, account);\\n//            if (bnMoldAmount > 0) {\\n//                IRewardTracker(feeMoldTracker).stakeForAccount(account, account, bnMold, bnMoldAmount);\\n//            }\\n//        }\\n//        if (_shouldClaimWeth) {\\n//            if (_shouldConvertWethToEth) {\\n//                uint256 weth0 = IRewardTracker(feeMoldTracker).claimForAccount(account, address(this));\\n//                uint256 weth1 = IRewardTracker(feeMlpTracker).claimForAccount(account, address(this));\\n//                uint256 wethAmount = weth0.add(weth1);\\n//                IWETH(weth).withdraw(wethAmount);\\n//                payable(account).sendValue(wethAmount);\\n//            } else {\\n//                IRewardTracker(feeMoldTracker).claimForAccount(account, account);\\n//                IRewardTracker(feeMlpTracker).claimForAccount(account, account);\\n//            }\\n//        }\\n//    }\\n//    function batchCompoundForAccounts(address[] memory _accounts) external nonReentrant onlyGov {\\n//        for (uint256 i = 0; i < _accounts.length; i++) {\\n//            _compound(_accounts[i]);\\n//        }\\n//    }\\n//    function signalTransfer(address _receiver) external nonReentrant {\\n//        require(IERC20(moldVester).balanceOf(msg.sender) == 0, Errors.REWARDROUTER_SENDER_HAS_VESTED_TOKENS);\\n//        require(IERC20(mlpVester).balanceOf(msg.sender) == 0, Errors.REWARDROUTER_SENDER_HAS_VESTED_TOKENS);\\n//        _validateReceiver(_receiver);\\n//        pendingReceivers[msg.sender] = _receiver;\\n//    }\\n//    function acceptTransfer(address _sender) external nonReentrant {\\n//        require(IERC20(moldVester).balanceOf(_sender) == 0, Errors.REWARDROUTER_SENDER_HAS_VESTED_TOKENS);\\n//        require(IERC20(mlpVester).balanceOf(_sender) == 0, Errors.REWARDROUTER_SENDER_HAS_VESTED_TOKENS);\\n//        address receiver = msg.sender;\\n//        require(pendingReceivers[_sender] == receiver, Errors.REWARDROUTER_TRANSFER_NOT_SIGNALLED);\\n//        delete pendingReceivers[_sender];\\n//        _validateReceiver(receiver);\\n//        _compound(_sender);\\n//        uint256 stakedMold = IRewardTracker(stakedMoldTracker).depositBalances(_sender, mold);\\n//        if (stakedMold > 0) {\\n//            _unstakeMold(_sender, mold, stakedMold, false);\\n//            _stakeMold(_sender, receiver, mold, stakedMold);\\n//        }\\n//        uint256 stakedEsMold = IRewardTracker(stakedMoldTracker).depositBalances(_sender, esMold);\\n//        if (stakedEsMold > 0) {\\n//            _unstakeMold(_sender, esMold, stakedEsMold, false);\\n//            _stakeMold(_sender, receiver, esMold, stakedEsMold);\\n//        }\\n//        uint256 stakedBnMold = IRewardTracker(feeMoldTracker).depositBalances(_sender, bnMold);\\n//        if (stakedBnMold > 0) {\\n//            IRewardTracker(feeMoldTracker).unstakeForAccount(_sender, bnMold, stakedBnMold, _sender);\\n//            IRewardTracker(feeMoldTracker).stakeForAccount(_sender, receiver, bnMold, stakedBnMold);\\n//        }\\n//        uint256 esMoldBalance = IERC20(esMold).balanceOf(_sender);\\n//        if (esMoldBalance > 0) {\\n//            IERC20(esMold).transferFrom(_sender, receiver, esMoldBalance);\\n//        }\\n//        uint256 mlpAmount = IRewardTracker(feeMlpTracker).depositBalances(_sender, mlp);\\n//        if (mlpAmount > 0) {\\n//            IRewardTracker(stakedMlpTracker).unstakeForAccount(_sender, feeMlpTracker, mlpAmount, _sender);\\n//            IRewardTracker(feeMlpTracker).unstakeForAccount(_sender, mlp, mlpAmount, _sender);\\n//\\n//            IRewardTracker(feeMlpTracker).stakeForAccount(_sender, receiver, mlp, mlpAmount);\\n//            IRewardTracker(stakedMlpTracker).stakeForAccount(receiver, receiver, feeMlpTracker, mlpAmount);\\n//        }\\n//        IVester(moldVester).transferStakeValues(_sender, receiver);\\n//        IVester(mlpVester).transferStakeValues(_sender, receiver);\\n//    }\\n//    function _validateReceiver(address _receiver) private view {\\n//        require(IRewardTracker(stakedMoldTracker).averageStakedAmounts(_receiver) == 0, Errors.REWARDROUTER_STAKEDMOLDTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0);\\n//        require(IRewardTracker(stakedMoldTracker).cumulativeRewards(_receiver) == 0, Errors.REWARDROUTER_STAKEDMOLDTRACKER_CUMULATIVEREWARDS_GREATER_0);\\n//        require(IRewardTracker(bonusMoldTracker).averageStakedAmounts(_receiver) == 0, Errors.REWARDROUTER_BONUSMOLDTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0);\\n//        require(IRewardTracker(bonusMoldTracker).cumulativeRewards(_receiver) == 0, Errors.REWARDROUTER_BONUSMOLDTRACKER_CUMULATIVEREWARDS_GREATER_0);\\n//        require(IRewardTracker(feeMoldTracker).averageStakedAmounts(_receiver) == 0, Errors.REWARDROUTER_FEEMOLDTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0);\\n//        require(IRewardTracker(feeMoldTracker).cumulativeRewards(_receiver) == 0, Errors.REWARDROUTER_FEEMOLDTRACKER_CUMULATIVEREWARDS_GREATER_0);\\n//        require(IVester(moldVester).transferredAverageStakedAmounts(_receiver) == 0, Errors.REWARDROUTER_MOLDVESTER_TRANSFERREDAVERAGESTAKEDAMOUNTS_GREATER_0);\\n//        require(IVester(moldVester).transferredCumulativeRewards(_receiver) == 0, Errors.REWARDROUTER_MOLDVESTER_TRANSFERREDCUMULATIVEREWARDS_GREATER_0);\\n//        require(IRewardTracker(stakedMlpTracker).averageStakedAmounts(_receiver) == 0, Errors.REWARDROUTER_STAKEDMLPTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0);\\n//        require(IRewardTracker(stakedMlpTracker).cumulativeRewards(_receiver) == 0, Errors.REWARDROUTER_STAKEDMLPTRACKER_CUMULATIVEREWARDS_GREATER_0);\\n//        require(IRewardTracker(feeMlpTracker).averageStakedAmounts(_receiver) == 0, Errors.REWARDROUTER_FEEMLPTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0);\\n//        require(IRewardTracker(feeMlpTracker).cumulativeRewards(_receiver) == 0, Errors.REWARDROUTER_FEEMLPTRACKER_CUMULATIVEREWARDS_GREATER_0);\\n//        require(IVester(mlpVester).transferredAverageStakedAmounts(_receiver) == 0, Errors.REWARDROUTER_MOLDVESTER_TRANSFERREDAVERAGESTAKEDAMOUNTS_GREATER_0);\\n//        require(IVester(mlpVester).transferredCumulativeRewards(_receiver) == 0, Errors.REWARDROUTER_MOLDVESTER_TRANSFERREDCUMULATIVEREWARDS_GREATER_0);\\n//        require(IERC20(moldVester).balanceOf(_receiver) == 0, Errors.REWARDROUTER_MOLDVESTER_BALANCE_GREATER_0);\\n//        require(IERC20(mlpVester).balanceOf(_receiver) == 0, Errors.REWARDROUTER_MLPVESTER_BALANCE_GREATER_0);\\n//    }\\n//    function _compound(address _account) private {\\n//        _compoundMold(_account);\\n//        _compoundMlp(_account);\\n//    }\\n//    function _compoundMold(address _account) private {\\n//        uint256 esMoldAmount = IRewardTracker(stakedMoldTracker).claimForAccount(_account, _account);\\n//        if (esMoldAmount > 0) {\\n//            _stakeMold(_account, _account, esMold, esMoldAmount);\\n//        }\\n//        uint256 bnMoldAmount = IRewardTracker(bonusMoldTracker).claimForAccount(_account, _account);\\n//        if (bnMoldAmount > 0) {\\n//            IRewardTracker(feeMoldTracker).stakeForAccount(_account, _account, bnMold, bnMoldAmount);\\n//        }\\n//    }\\n//    function _compoundMlp(address _account) private {\\n//        uint256 esMoldAmount = IRewardTracker(stakedMlpTracker).claimForAccount(_account, _account);\\n//        if (esMoldAmount > 0) {\\n//            _stakeMold(_account, _account, esMold, esMoldAmount);\\n//        }\\n//    }\\n//    function _stakeMold(address _fundingAccount, address _account, address _token, uint256 _amount) private {\\n//        require(_amount > 0, Errors.REWARDROUTER_INVALID_AMOUNT);\\n//        IRewardTracker(stakedMoldTracker).stakeForAccount(_fundingAccount, _account, _token, _amount);\\n//        IRewardTracker(bonusMoldTracker).stakeForAccount(_account, _account, stakedMoldTracker, _amount);\\n//        IRewardTracker(feeMoldTracker).stakeForAccount(_account, _account, bonusMoldTracker, _amount);\\n//        emit Events.StakeMold(_account, _token, _amount);\\n//    }\\n//    function _unstakeMold(address _account, address _token, uint256 _amount, bool _shouldReduceBnMold) private {\\n//        require(_amount > 0, Errors.REWARDROUTER_INVALID_AMOUNT);\\n//        uint256 balance = IRewardTracker(stakedMoldTracker).stakedAmounts(_account);\\n//        IRewardTracker(feeMoldTracker).unstakeForAccount(_account, bonusMoldTracker, _amount, _account);\\n//        IRewardTracker(bonusMoldTracker).unstakeForAccount(_account, stakedMoldTracker, _amount, _account);\\n//        IRewardTracker(stakedMoldTracker).unstakeForAccount(_account, _token, _amount, _account);\\n//        if (_shouldReduceBnMold) {\\n//            uint256 bnMoldAmount = IRewardTracker(bonusMoldTracker).claimForAccount(_account, _account);\\n//            if (bnMoldAmount > 0) {\\n//                IRewardTracker(feeMoldTracker).stakeForAccount(_account, _account, bnMold, bnMoldAmount);\\n//            }\\n//            uint256 stakedBnMold = IRewardTracker(feeMoldTracker).depositBalances(_account, bnMold);\\n//            if (stakedBnMold > 0) {\\n//                uint256 reductionAmount = stakedBnMold.mul(_amount).div(balance);\\n//                IRewardTracker(feeMoldTracker).unstakeForAccount(_account, bnMold, reductionAmount, _account);\\n//                IMintable(bnMold).burn(_account, reductionAmount);\\n//            }\\n//        }\\n//        emit Events.UnstakeMold(_account, _token, _amount);\\n//    }\\n}\\n\",\"keccak256\":\"0xe1324a43e5690060b8bb1606a9808760d50296f696b25739c78a4dbc636a7d7d\",\"license\":\"MIT\"},\"contracts/core/storage/RewardRouterV2Aggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"../../libraries/math/SafeMath.sol\\\";\\nimport \\\"../../libraries/token/IERC20.sol\\\";\\nimport \\\"../../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../../libraries/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../../libraries/utils/Address.sol\\\";\\nimport \\\"../../staking/interfaces/IRewardTracker.sol\\\";\\nimport \\\"../../staking/interfaces/IVester.sol\\\";\\nimport \\\"../../tokens/interfaces/IMintable.sol\\\";\\nimport \\\"../../tokens/interfaces/IWETH.sol\\\";\\nimport \\\"../interfaces/IMlpManager.sol\\\";\\nimport \\\"../../access/Governable.sol\\\";\\n\\nimport \\\"../../libraries/Events.sol\\\";\\nimport \\\"../../libraries/Errors.sol\\\";\\n\\nabstract contract RewardRouterV2Aggregator is ReentrancyGuard, Governable {\\n\\n}\\n\",\"keccak256\":\"0x0d09448421c7b56372e82e33f6baeea48b52ac55154560acc6dde1add6424f0b\",\"license\":\"MIT\"},\"contracts/core/storage/RewardRouterV2Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"./RewardRouterV2Aggregator.sol\\\";\\nabstract contract RewardRouterV2Storage is RewardRouterV2Aggregator {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n    bool public isInitialized;\\n    address public weth;\\n    address public mold;\\n    address public esMold;\\n    address public bnMold;\\n    address public mlp;\\n    address public stakedMoldTracker;\\n    address public bonusMoldTracker;\\n    address public feeMoldTracker;\\n    address public stakedMlpTracker;\\n    address public feeMlpTracker;\\n    address public mlpManager;\\n    address public mlpVester;\\n    address public moldVester;\\n    mapping (address => address) public pendingReceivers;\\n}\\n\",\"keccak256\":\"0xc81d5cc7431deb9ff0635b30fc9c74d38d54c175b32a89a75b63116ed5bb88f7\",\"license\":\"MIT\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nlibrary Errors {\\n    /* Timelock Error Message*/\\n    string public constant Timelock_Invalid_Target = \\\"Timelock: invalid _target\\\";\\n    string public constant Timelock_Invalid_Buffer = \\\"Timelock: invalid _buffer\\\";\\n    string public constant Timelock_Buffer_Cannot_Be_Decreased = \\\"Timelock: buffer cannot be decreased\\\";\\n    string public constant Timelock_invalid_maxLeverage = \\\"Timelock: invalid _maxLeverage\\\";\\n    string public constant Timelock_invalid_fundingRateFactor = \\\"Timelock: invalid _fundingRateFactor\\\";\\n    string public constant Timelock_invalid_stableFundingRateFactor = \\\"Timelock: invalid _stableFundingRateFactor\\\";\\n    string public constant Timelock_invalid_minProfitBps = \\\"Timelock: invalid _minProfitBps\\\";\\n    string public constant Timelock_token_not_yet_whitelisted = \\\"Timelock: token not yet whitelisted\\\";\\n    string public constant TIMELOCK_INVALID_MAXGASPRICE = \\\"Invalid _maxGasPrice\\\";\\n    string public constant TIMELOCK_INVALID_LENGTHS = \\\"Timelock: invalid lengths\\\";\\n    string public constant TIMELOCK_MAXTOKENSUPPLY_EXCEEDED = \\\"Timelock: maxTokenSupply exceeded\\\";\\n    string public constant TIMELOCK_ACTION_ALREADY_SIGNALLED = \\\"Timelock: action already signalled\\\";\\n    string public constant TIMELOCK_ACTION_NOT_SIGNALLED = \\\"Timelock: action not signalled\\\";\\n    string public constant TIMELOCK_ACTION_TIME_NOT_YET_PASSED = \\\"Timelock: action time not yet passed\\\";\\n    string public constant TIMELOCK_INVALID_ACTION = \\\"Timelock: invalid _action\\\";\\n    string public constant TIMELOCK_INVALID_BUFFER = \\\"Timelock: invalid _buffer\\\";\\n\\n    /* PriceFeed Error Message*/\\n    string public constant PriceFeed_forbidden = \\\"PriceFeed: forbidden\\\";\\n\\n    /* USDM.sol*/\\n    string public constant USDM_FORBIDDEN = \\\"USDM: forbidden\\\";\\n\\n    /* BasePositionManagers.sol */\\n    string public constant BASEPOSITIONMANAGER_MARK_PRICE_LOWER_THAN_LIMIT      = \\\"BasePositionManager: mark price lower than limit\\\";\\n    string public constant BASEPOSITIONMANAGER_MARK_PRICE_HIGHER_THAN_LIMIT     = \\\"BasePositionManager: mark price higher than limit\\\";\\n    string public constant BASEPOSITIONMANAGER_INVALID_PATH_LENGTH              = \\\"BasePositionManager: invalid _path.length\\\";\\n    string public constant BASEPOSITIONMANAGER_INSUFFICIENT_AMOUNTOUT           = \\\"BasePositionManager: insufficient amountOut\\\";\\n    string public constant BASEPOSITIONMANAGER_MAX_GLOBAL_LONGS_EXCEEDED        = \\\"BasePositionManager: max global longs exceeded\\\";\\n    string public constant BASEPOSITIONMANAGER_MAX_GLOBAL_SHORTS_EXCEEDED       = \\\"BasePositionManager: max global shorts exceeded\\\";\\n    string public constant BASEPOSITIONMANAGER_INVALID_SENDER                   = \\\"BasePositionManager: invalid sender\\\";\\n\\n    /* PositionManager.sol */\\n    string public constant POSITIONMANAGER_INVALID_PATH_LENGTH                  = \\\"PositionManager: invalid _path.length\\\";\\n    string public constant POSITIONMANAGER_INVALID_PATH                         = \\\"PositionManager: invalid _path\\\";\\n    string public constant POSITIONMANAGER_LONG_DEPOSIT                         = \\\"PositionManager: long deposit\\\";\\n    string public constant POSITIONMANAGER_LONG_LEVERAGE_DECREASE               = \\\"PositionManager: long leverage decrease\\\";\\n    string public constant POSITIONMANAGER_FORBIDDEN                            = \\\"PositionManager: forbidden\\\";\\n\\n    /* Router.sol*/\\n    string public constant ROUTER_FORBIDDEN                                     = \\\"Router: forbidden\\\";\\n\\n    /* MlpManager.sol */\\n    string public constant MLPMANAGER_ACTION_NOT_ENABLED                        = \\\"MlpManager: action not enabled\\\";\\n    string public constant MLPMANAGER_INVALID_WEIGHT                            = \\\"MlpManager: invalid weight\\\";\\n    string public constant MLPMANAGER_INVALID_COOLDOWNDURATION                  = \\\"MlpManager: invalid _cooldownDuration\\\";\\n    string public constant MLPMANAGER_INVALID_AMOUNT                            = \\\"MlpManager: invalid _amount\\\";\\n    string public constant MLPMANAGER_INSUFFICIENT_USDM_OUTPUT                  = \\\"MlpManager: insufficient USDM output\\\";\\n    string public constant MLPMANAGER_INSUFFICIENT_MLP_OUTPUT                   = \\\"MlpManager: insufficient MLP output\\\";\\n    string public constant MLPMANAGER_INVALID_MLPAMOUNT                         = \\\"MlpManager: invalid _mlpAmount\\\";\\n    string public constant MLPMANAGER_COOLDOWN_DURATION_NOT_YET_PASSED          = \\\"MlpManager: cooldown duration not yet passed\\\";\\n    string public constant MLPMANAGER_INSUFFICIENT_OUTPUT                       = \\\"MlpManager: insufficient output\\\";\\n    string public constant MLPMANAGER_FORBIDDEN                                 = \\\"MlpManager: forbidden\\\";\\n\\n    /* ShortsTrack.sol*/\\n    string public constant SHORTSTRACKER_FORBIDDEN                              = \\\"ShortsTracker: forbidden\\\";\\n    string public constant SHORTSTRACKER_INVALID_HANDLER                        = \\\"ShortsTracker: invalid _handler\\\";\\n    string public constant SHORTSTRACKER_ALREADY_MIGRATED                       = \\\"ShortsTracker: already migrated\\\";\\n    string public constant SHORTSTRACKER_OVERFLOW                               = \\\"ShortsTracker: overflow\\\";\\n\\n    /* VaultUtils.sol*/\\n    string public constant VAULT_LOSSES_EXCEED_COLLATERAL                       = \\\"Vault: losses exceed collateral\\\";\\n    string public constant VAULT_FEES_EXCEED_COLLATERAL                         = \\\"Vault: fees exceed collateral\\\";\\n    string public constant VAULT_LIQUIDATION_FEES_EXCEED_COLLATERAL             = \\\"Vault: liquidation fees exceed collateral\\\";\\n    string public constant VAULT_MAXLEVERAGE_EXCEEDED                           = \\\"Vault: maxLeverage exceeded\\\";\\n\\n    /* VaultPriceFeed.sol*/\\n    string public constant VAULTPRICEFEED_FORBIDDEN                             = \\\"VaultPriceFeed: forbidden\\\";\\n    string public constant VAULTPRICEFEED_ADJUSTMENT_FREQUENCY_EXCEEDED         = \\\"VaultPriceFeed: adjustment frequency exceeded\\\";\\n    string public constant VAULTPRICEFEED_INVALID_ADJUSTMENTBPS                 = \\\"Vaultpricefeed: invalid _adjustmentBps\\\";\\n    string public constant VAULTPRICEFEED_INVALID_SPREADBASISPOINTS             = \\\"VaultPriceFeed: invalid _spreadBasisPoints\\\";\\n    string public constant VAULTPRICEFEED_INVALID_PRICESAMPLESPACE              = \\\"VaultPriceFeed: invalid _priceSampleSpace\\\";\\n    string internal constant VAULTPRICEFEED_INVALID_PRICE_FEED                  = \\\"VaultPriceFeed: invalid price feed\\\";\\n    string internal constant VAULTPRICEFEED_INVALID_PRICE                       = \\\"VaultPriceFeed: invalid price\\\";\\n    string internal constant CHAINLINK_FEEDS_ARE_NOT_BEING_UPDATED              = \\\"Chainlink feeds are not being updated\\\";\\n    string internal constant VAULTPRICEFEED_COULD_NOT_FETCH_PRICE               = \\\"VaultPriceFeed: could not fetch price\\\";\\n\\n    /* VaultInternal.sol*/\\n    string internal constant VAULT_POOLAMOUNT_EXCEEDED                          = \\\"Vault: poolAmount exceeded\\\";\\n    string internal constant VAULT_INSUFFICIENT_RESERVE                         = \\\"Vault: insufficient reserve\\\";\\n    string internal constant VAULT_MAX_SHORTS_EXCEEDED                          = \\\"Vault: max shorts exceeded\\\";\\n    string internal constant VAULT_POOLAMOUNT_BUFFER                            = \\\"Vault: poolAmount < buffer\\\";\\n    string internal constant VAULT_INVALID_ERRORCONTROLLER                      = \\\"Vault: invalid errorController\\\";\\n\\n    /* Router.sol */\\n    string internal constant ROUTER_INVALID_SENDER                              = \\\"Router: invalid sender\\\";\\n    string internal constant ROUTER_INVALID_PATH                                = \\\"Router: invalid _path\\\";\\n    string internal constant ROUTER_MARK_PRICE_HIGHER_THAN_LIMIT                = \\\"Router: mark price higher than limit\\\";\\n    string internal constant ROUTER_MARK_PRICE_LOWER_THAN_LIMIT                 = \\\"Router: mark price lower than limit\\\";\\n    string internal constant ROUTER_INVALID_PATH_LENGTH                         = \\\"Router: invalid _path.length\\\";\\n    string internal constant ROUTER_INSUFFICIENT_AMOUNTOUT                      = \\\"Router: insufficient amountOut\\\";\\n    string internal constant ROUTER_INVALID_PLUGIN                              = \\\"Router: invalid plugin\\\";\\n    string internal constant ROUTER_PLUGIN_NOT_APPROVED                         = \\\"Router: plugin not approved\\\";\\n\\n    /* OrderBook.sol*/\\n    string internal constant ORDERBOOK_FORBIDDEN                                = \\\"OrderBook: forbidden\\\";\\n    string internal constant ORDERBOOK_ALREADY_INITIALIZED                      = \\\"OrderBook: already initialized\\\";\\n    string internal constant ORDERBOOK_INVALID_SENDER                           = \\\"OrderBook: invalid sender\\\";\\n    string internal constant ORDERBOOK_INVALID_PATH_LENGTH                      = \\\"OrderBook: invalid _path.length\\\";\\n    string internal constant ORDERBOOK_INVALID_PATH                             = \\\"OrderBook: invalid _path\\\";\\n    string internal constant ORDERBOOK_INVALID_AMOUNTIN                         = \\\"OrderBook: invalid _amountIn\\\";\\n    string internal constant ORDERBOOK_INSUFFICIENT_EXECUTION_FEE               = \\\"OrderBook: insufficient execution fee\\\";\\n    string internal constant ORDERBOOK_ONLY_WETH_COULD_BE_WRAPPED               = \\\"OrderBook: only weth could be wrapped\\\";\\n    string internal constant ORDERBOOK_INCORRECT_VALUE_TRANSFERRED              = \\\"OrderBook: incorrect value transferred\\\";\\n    string internal constant ORDERBOOK_INCORRECT_EXECUTION_FEE_TRANSFERRED      = \\\"OrderBook: incorrect execution fee transferred\\\";\\n    string internal constant ORDERBOOK_NON_EXISTENT_ORDER                       = \\\"OrderBook: non-existent order\\\";\\n    string internal constant ORDERBOOK_INVALID_PRICE_FOR_EXECUTION              = \\\"OrderBook: invalid price for execution\\\";\\n    string internal constant ORDERBOOK_INSUFFICIENT_COLLATERAL                  = \\\"OrderBook: insufficient collateral\\\";\\n    string internal constant ORDERBOOK_INSUFFICIENT_AMOUNTOUT                   = \\\"OrderBook: insufficient amountOut\\\";\\n\\n    /* RewardRouterV2.sol */\\n    string internal constant REWARDROUTER_INVALID_AMOUNT                        = \\\"RewardRouter: invalid _amount\\\";\\n    string internal constant REWARDROUTER_INVALID_MSG_VALUE                     = \\\"RewardRouter: invalid msg.value\\\";\\n    string internal constant REWARDROUTER_ALREADY_INITIALIZED                   = \\\"RewardRouter: already initialized\\\";\\n    string internal constant REWARDROUTER_INVALID_MLPAMOUNT                     = \\\"RewardRouter: invalid _mlpAmount\\\";\\n    string internal constant REWARDROUTER_SENDER_HAS_VESTED_TOKENS              = \\\"RewardRouter: sender has vested tokens\\\";\\n    string internal constant REWARDROUTER_TRANSFER_NOT_SIGNALLED                = \\\"RewardRouter: transfer not signalled\\\";\\n    string internal constant REWARDROUTER_STAKEDMOLDTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0                      = \\\"RewardRouter: stakedMoldTracker.averageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_STAKEDMOLDTRACKER_CUMULATIVEREWARDS_GREATER_0                         = \\\"RewardRouter: stakedMoldTracker.cumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_BONUSMOLDTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0                       = \\\"RewardRouter: bonusMoldTracker.averageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_BONUSMOLDTRACKER_CUMULATIVEREWARDS_GREATER_0                          = \\\"RewardRouter: bonusMoldTracker.cumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_FEEMOLDTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0                         = \\\"RewardRouter: feeMoldTracker.averageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_FEEMOLDTRACKER_CUMULATIVEREWARDS_GREATER_0                            = \\\"RewardRouter: feeMoldTracker.cumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_MOLDVESTER_TRANSFERREDAVERAGESTAKEDAMOUNTS_GREATER_0                  = \\\"RewardRouter: MoldVester.transferredAverageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_MOLDVESTER_TRANSFERREDCUMULATIVEREWARDS_GREATER_0                     = \\\"RewardRouter: MoldVester.transferredCumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_STAKEDMLPTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0                       = \\\"RewardRouter: stakedMlpTracker.averageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_STAKEDMLPTRACKER_CUMULATIVEREWARDS_GREATER_0                          = \\\"RewardRouter: stakedMlpTracker.cumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_FEEMLPTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0                          = \\\"RewardRouter: feeMlpTracker.averageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_FEEMLPTRACKER_CUMULATIVEREWARDS_GREATER_0                             = \\\"RewardRouter: feeMlpTracker.cumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_MOLDVESTER_BALANCE_GREATER_0          = \\\"RewardRouter: MoldVester.balance > 0\\\";\\n    string internal constant REWARDROUTER_MLPVESTER_BALANCE_GREATER_0           = \\\"RewardRouter: MlpVester.balance > 0\\\";\\n\\n}\\n\",\"keccak256\":\"0x2d6c5a1032ea8a6b12bcb7fde4f03a3519d67086d21a2a9bf4ea541db73bdbc5\",\"license\":\"MIT\"},\"contracts/libraries/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nlibrary Events {\\n    /* BasePositionManager Events */\\n    event SetDepositFee(uint256 depositFee);\\n    event SetIncreasePositionBufferBps(uint256 increasePositionBufferBps);\\n    event SetReferralStorage(address referralStorage);\\n    event SetAdmin(address admin);\\n    event WithdrawFees(address token, address receiver, uint256 amount);\\n    event SetMaxGlobalSizes(address[] tokens, uint256[] longSizes, uint256[] shortSizes);\\n    event IncreasePositionReferral(address account, uint256 sizeDelta, uint256 marginFeeBasisPoints, bytes32 referralCode, address referrer);\\n    event DecreasePositionReferral(address account, uint256 sizeDelta, uint256 marginFeeBasisPoints, bytes32 referralCode, address referrer);\\n\\n    /*Position Manager Events*/\\n    event SetOrderKeeper(address indexed account, bool isActive);\\n    event SetLiquidator(address indexed account, bool isActive);\\n    event SetPartner(address account, bool isActive);\\n    event SetOpened(bool opened);\\n    event SetShouldValidateIncreaseOrder(bool shouldValidateIncreaseOrder);\\n\\n\\n    /* Orderbook.sol events */\\n    event CreateIncreaseOrder(address indexed account, uint256 orderIndex, address purchaseToken, uint256 purchaseTokenAmount, address collateralToken, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee);\\n    event CancelIncreaseOrder(address indexed account, uint256 orderIndex, address purchaseToken, uint256 purchaseTokenAmount, address collateralToken, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee);\\n    event ExecuteIncreaseOrder(address indexed account, uint256 orderIndex, address purchaseToken, uint256 purchaseTokenAmount, address collateralToken, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee, uint256 executionPrice);\\n    event UpdateIncreaseOrder(address indexed account, uint256 orderIndex, address collateralToken, address indexToken, bool isLong, uint256 sizeDelta, uint256 triggerPrice, bool triggerAboveThreshold);\\n    event CreateDecreaseOrder(address indexed account, uint256 orderIndex, address collateralToken, uint256 collateralDelta, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee);\\n    event CancelDecreaseOrder(address indexed account, uint256 orderIndex, address collateralToken, uint256 collateralDelta, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee);\\n    event ExecuteDecreaseOrder(address indexed account, uint256 orderIndex, address collateralToken, uint256 collateralDelta, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee, uint256 executionPrice);\\n    event UpdateDecreaseOrder(address indexed account, uint256 orderIndex, address collateralToken, uint256 collateralDelta, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold);\\n    event CreateSwapOrder(address indexed account, uint256 orderIndex, address[] path, uint256 amountIn, uint256 minOut, uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event CancelSwapOrder(address indexed account, uint256 orderIndex, address[] path, uint256 amountIn, uint256 minOut, uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event UpdateSwapOrder(address indexed account, uint256 ordexIndex, address[] path, uint256 amountIn, uint256 minOut, uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event ExecuteSwapOrder(address indexed account, uint256 orderIndex, address[] path, uint256 amountIn, uint256 minOut, uint256 amountOut, uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event Initialize(address router, address vault, address weth, address usdm, uint256 minExecutionFee, uint256 minPurchaseTokenAmountUsd);\\n    event UpdateMinExecutionFee(uint256 minExecutionFee);\\n    event UpdateMinPurchaseTokenAmountUsd(uint256 minPurchaseTokenAmountUsd);\\n    event UpdateGov(address gov);\\n\\n    /* Router.sol events*/\\n    event Swap(address account, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);\\n\\n    /* ShortsTracker.sol events*/\\n    event GlobalShortDataUpdated(address indexed token, uint256 globalShortSize, uint256 globalShortAveragePrice);\\n\\n    /* Vault.sol events */\\n    event BuyUSDM(address account, address token, uint256 tokenAmount, uint256 usdmAmount, uint256 feeBasisPoints);\\n    event SellUSDM(address account, address token, uint256 usdmAmount, uint256 tokenAmount, uint256 feeBasisPoints);\\n    event Swap(address account, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut, uint256 amountOutAfterFees, uint256 feeBasisPoints);\\n    event IncreasePosition(bytes32 key, address account, address collateralToken, address indexToken, uint256 collateralDelta, uint256 sizeDelta, bool isLong, uint256 price, uint256 fee);\\n    event DecreasePosition(bytes32 key, address account, address collateralToken, address indexToken, uint256 collateralDelta, uint256 sizeDelta, bool isLong, uint256 price, uint256 fee);\\n    event LiquidatePosition(bytes32 key, address account, address collateralToken, address indexToken, bool isLong, uint256 size, uint256 collateral, uint256 reserveAmount, int256 realisedPnl, uint256 markPrice);\\n    event UpdatePosition(bytes32 key, uint256 size, uint256 collateral, uint256 averagePrice, uint256 entryFundingRate, uint256 reserveAmount, int256 realisedPnl, uint256 markPrice);\\n    event ClosePosition(bytes32 key, uint256 size, uint256 collateral, uint256 averagePrice, uint256 entryFundingRate, uint256 reserveAmount, int256 realisedPnl);\\n    event UpdateFundingRate(address token, uint256 fundingRate);\\n    event UpdatePnl(bytes32 key, bool hasProfit, uint256 delta);\\n    event CollectSwapFees(address token, uint256 feeUsd, uint256 feeTokens);\\n    event CollectMarginFees(address token, uint256 feeUsd, uint256 feeTokens);\\n    event DirectPoolDeposit(address token, uint256 amount);\\n    event IncreasePoolAmount(address token, uint256 amount);\\n    event DecreasePoolAmount(address token, uint256 amount);\\n    event IncreaseUsdmAmount(address token, uint256 amount);\\n    event DecreaseUsdmAmount(address token, uint256 amount);\\n    event IncreaseReservedAmount(address token, uint256 amount);\\n    event DecreaseReservedAmount(address token, uint256 amount);\\n    event IncreaseGuaranteedUsd(address token, uint256 amount);\\n    event DecreaseGuaranteedUsd(address token, uint256 amount);\\n\\n    /* Timelock.sol events */\\n    event SignalPendingAction(bytes32 action);\\n    event SignalApprove(address token, address spender, uint256 amount, bytes32 action);\\n    event SignalWithdrawToken(address target, address token, address receiver, uint256 amount, bytes32 action);\\n    event SignalMint(address token, address receiver, uint256 amount, bytes32 action);\\n    event SignalSetGov(address target, address gov, bytes32 action);\\n    event SignalSetHandler(address target, address handler, bool isActive, bytes32 action);\\n    event SignalSetPriceFeed(address vault, address priceFeed, bytes32 action);\\n    event SignalRedeemUsdm(address vault, address token, uint256 amount);\\n    event SignalVaultSetTokenConfig(address vault, address token, uint256 tokenDecimals, uint256 tokenWeight, uint256 minProfitBps, uint256 maxUsdmAmount, bool isStable, bool isShortable);\\n    event ClearAction(bytes32 action);\\n\\n    /* MlpManager.sol */\\n    event AddLiquidity(address account, address token, uint256 amount, uint256 aumInUsdm, uint256 mlpSupply, uint256 usdmAmount, uint256 mintAmount);\\n    event RemoveLiquidity(address account, address token, uint256 mlpAmount, uint256 aumInUsdm, uint256 mlpSupply, uint256 usdmAmount, uint256 amountOut);\\n\\n    /* RewardRouterV2 */\\n    event StakeMold(address account, address token, uint256 amount);\\n    event UnstakeMold(address account, address token, uint256 amount);\\n    event StakeMlp(address account, uint256 amount);\\n    event UnstakeMlp(address account, uint256 amount);\\n}\\n\",\"keccak256\":\"0x555bd8706eac18f05cbc296299b1379465408d2040130886612e55bbddbb7179\",\"license\":\"MIT\"},\"contracts/libraries/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x41b0da7db3e1f79b338824fed2bc4732430b78002a9d51c2cfa86ad5a12c2763\",\"license\":\"MIT\"},\"contracts/libraries/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa3ce253082421a9e79d2b884ae6f60507b0cc73ea356674072091454c44cc556\",\"license\":\"MIT\"},\"contracts/libraries/token/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../math/SafeMath.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf80766b21ea67a73c81e0dea4543375243938c8b223e29c5d783be61ab3f424c\",\"license\":\"MIT\"},\"contracts/libraries/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1845481964ebacf35afe1a006fa574793b52e698eba0a8db6e3d30202bc45429\",\"license\":\"MIT\"},\"contracts/libraries/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xae7a1e407ed171ecd3a0d3976875d6c58eefdccf831ebce6314ec94892dffc03\",\"license\":\"MIT\"},\"contracts/staking/RewardRouterV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"../core/settings/RewardRouterV2Settings.sol\\\";\\n\\ncontract RewardRouterV2 is RewardRouterV2Settings {\\n    \\n    receive() external payable {\\n        require(msg.sender == weth, Errors.ROUTER_INVALID_SENDER);\\n    }\\n\\n    function mintAndStakeMlp(address _token, uint256 _amount, uint256 _minUsdm, uint256 _minMlp) external nonReentrant returns (uint256) {\\n        require(_amount > 0, Errors.REWARDROUTER_INVALID_AMOUNT);\\n        address account = msg.sender;\\n        uint256 mlpAmount = IMlpManager(mlpManager).addLiquidityForAccount(account, account, _token, _amount, _minUsdm, _minMlp);\\n        return mlpAmount;\\n    }\\n\\n    function mintAndStakeMlpETH(uint256 _minUsdm, uint256 _minMlp) external payable nonReentrant returns (uint256) {\\n        require(msg.value > 0, Errors.REWARDROUTER_INVALID_MSG_VALUE);\\n        IWETH(weth).deposit{value : msg.value}();\\n        IERC20(weth).approve(mlpManager, msg.value);\\n        address account = msg.sender;\\n        uint256 mlpAmount = IMlpManager(mlpManager).addLiquidityForAccount(address(this), account, weth, msg.value, _minUsdm, _minMlp);\\n        return mlpAmount;\\n    }\\n\\n    function unstakeAndRedeemMlp(address _tokenOut, uint256 _mlpAmount, uint256 _minOut, address _receiver) external nonReentrant returns (uint256) {\\n        require(_mlpAmount > 0, Errors.REWARDROUTER_INVALID_MLPAMOUNT);\\n        address account = msg.sender;\\n//        IRewardTracker(stakedMlpTracker).unstakeForAccount(account, feeMlpTracker, _mlpAmount, account);\\n//        IRewardTracker(feeMlpTracker).unstakeForAccount(account, mlp, _mlpAmount, account);\\n        uint256 amountOut = IMlpManager(mlpManager).removeLiquidityForAccount(account, _tokenOut, _mlpAmount, _minOut, _receiver);\\n        emit Events.UnstakeMlp(account, _mlpAmount);\\n        return amountOut;\\n    }\\n\\n    function unstakeAndRedeemMlpETH(uint256 _mlpAmount, uint256 _minOut, address payable _receiver) external nonReentrant returns (uint256) {\\n        require(_mlpAmount > 0, Errors.REWARDROUTER_INVALID_MLPAMOUNT);\\n        address account = msg.sender;\\n//        IRewardTracker(stakedMlpTracker).unstakeForAccount(account, feeMlpTracker, _mlpAmount, account);\\n//        IRewardTracker(feeMlpTracker).unstakeForAccount(account, mlp, _mlpAmount, account);\\n        uint256 amountOut = IMlpManager(mlpManager).removeLiquidityForAccount(account, weth, _mlpAmount, _minOut, address(this));\\n        IWETH(weth).withdraw(amountOut);\\n        _receiver.sendValue(amountOut);\\n        emit Events.UnstakeMlp(account, _mlpAmount);\\n        return amountOut;\\n    }\\n}\\n\",\"keccak256\":\"0x72dcdb290a21343defec0537f552b1e633bc023a85885c61e882945ec5cd35a8\",\"license\":\"MIT\"},\"contracts/staking/interfaces/IRewardTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IRewardTracker {\\n    function depositBalances(address _account, address _depositToken) external view returns (uint256);\\n    function stakedAmounts(address _account) external view returns (uint256);\\n    function updateRewards() external;\\n    function stake(address _depositToken, uint256 _amount) external;\\n    function stakeForAccount(address _fundingAccount, address _account, address _depositToken, uint256 _amount) external;\\n    function unstake(address _depositToken, uint256 _amount) external;\\n    function unstakeForAccount(address _account, address _depositToken, uint256 _amount, address _receiver) external;\\n    function tokensPerInterval() external view returns (uint256);\\n    function claim(address _receiver) external returns (uint256);\\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\\n    function claimable(address _account) external view returns (uint256);\\n    function averageStakedAmounts(address _account) external view returns (uint256);\\n    function cumulativeRewards(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaaacb5c485b9aaf2a290489fe212471580e5a7ba8ac022fe6d7fdd1e864a5330\",\"license\":\"MIT\"},\"contracts/staking/interfaces/IVester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IVester {\\n    function rewardTracker() external view returns (address);\\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\\n    function claimable(address _account) external view returns (uint256);\\n    function cumulativeClaimAmounts(address _account) external view returns (uint256);\\n    function claimedAmounts(address _account) external view returns (uint256);\\n    function pairAmounts(address _account) external view returns (uint256);\\n    function getVestedAmount(address _account) external view returns (uint256);\\n    function transferredAverageStakedAmounts(address _account) external view returns (uint256);\\n    function transferredCumulativeRewards(address _account) external view returns (uint256);\\n    function cumulativeRewardDeductions(address _account) external view returns (uint256);\\n    function bonusRewards(address _account) external view returns (uint256);\\n    function transferStakeValues(address _sender, address _receiver) external;\\n    function setTransferredAverageStakedAmounts(address _account, uint256 _amount) external;\\n    function setTransferredCumulativeRewards(address _account, uint256 _amount) external;\\n    function setCumulativeRewardDeductions(address _account, uint256 _amount) external;\\n    function setBonusRewards(address _account, uint256 _amount) external;\\n    function getMaxVestableAmount(address _account) external view returns (uint256);\\n    function getCombinedAverageStakedAmount(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcc7c9d439980a893faf454c2aa0ffe52149fb01682fa431006d0725582a58d1f\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IMintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IMintable {\\n    function isMinter(address _account) external returns (bool);\\n    function setMinter(address _minter, bool _isActive) external;\\n    function mint(address _account, uint256 _amount) external;\\n    function burn(address _account, uint256 _amount) external;\\n}\",\"keccak256\":\"0x1cb14f340029d7d16406d49987335f073a0c4006cff2c46fd66b3d2c8717e2f8\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IWETH.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\",\"keccak256\":\"0x9322725581103de3f494f25318f2ebaf50100d57c2631a26d4c253833bc6bc23\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600081905580546001600160a01b03191633179055611311806100376000396000f3fe6080604052600436106101795760003560e01c8063944b4e5f116100cb578063cbb91c5e1161007f578063e1b9db8911610059578063e1b9db8914610532578063f5e3587914610565578063fc8b6fc1146105aa5761024c565b8063cbb91c5e146104d5578063cfad57a2146104ea578063d4d933f01461051d5761024c565b8063b2a39a2a116100b0578063b2a39a2a14610496578063b77aae8f146104ab578063bf23e32f146104c05761024c565b8063944b4e5f1461045e578063aec61443146104815761024c565b80633e49e2131161012d57806353f33a551161010757806353f33a55146103ed5780635e39e99614610434578063882acc1c146104495761024c565b80633e49e213146103725780633fc8cef3146103875780635387701e1461039c5761024c565b80632ce73b681161015e5780632ce73b68146102975780632fdd983d146102ac578063392e53cd146103495761024c565b806312d43a51146102515780632456d3df146102825761024c565b3661024c5760025460408051808201909152601681527f526f757465723a20696e76616c69642073656e646572000000000000000000006020820152906001600160a01b031633146102495760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561020e5781810151838201526020016101f6565b50505050905090810190601f16801561023b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50005b600080fd5b34801561025d57600080fd5b506102666105bf565b604080516001600160a01b039092168252519081900360200190f35b34801561028e57600080fd5b506102666105ce565b3480156102a357600080fd5b506102666105dd565b3480156102b857600080fd5b5061034760048036036101a08110156102d057600080fd5b506001600160a01b038135811691602081013582169160408201358116916060810135821691608082013581169160a081013582169160c082013581169160e081013582169161010082013581169161012081013582169161014082013581169161016081013582169161018090910135166105ec565b005b34801561035557600080fd5b5061035e6107e1565b604080519115158252519081900360200190f35b34801561037e57600080fd5b506102666107f1565b34801561039357600080fd5b50610266610800565b3480156103a857600080fd5b506103db600480360360608110156103bf57600080fd5b50803590602081013590604001356001600160a01b031661080f565b60408051918252519081900360200190f35b3480156103f957600080fd5b506103db6004803603608081101561041057600080fd5b506001600160a01b0381358116916020810135916040820135916060013516610a72565b34801561044057600080fd5b50610266610c42565b34801561045557600080fd5b50610266610c51565b6103db6004803603604081101561047457600080fd5b5080359060200135610c60565b34801561048d57600080fd5b50610266610ef4565b3480156104a257600080fd5b50610266610f03565b3480156104b757600080fd5b50610266610f12565b3480156104cc57600080fd5b50610266610f21565b3480156104e157600080fd5b50610266610f30565b3480156104f657600080fd5b506103476004803603602081101561050d57600080fd5b50356001600160a01b0316610f3f565b34801561052957600080fd5b50610266610fcd565b34801561053e57600080fd5b506102666004803603602081101561055557600080fd5b50356001600160a01b0316610fdc565b34801561057157600080fd5b506103db6004803603608081101561058857600080fd5b506001600160a01b038135169060208101359060408101359060600135610ff7565b3480156105b657600080fd5b50610266611187565b6001546001600160a01b031681565b6005546001600160a01b031681565b600e546001600160a01b031681565b6001546001600160a01b0316331461064b576040805162461bcd60e51b815260206004820152601560248201527f476f7665726e61626c653a20666f7262696464656e0000000000000000000000604482015290519081900360640190fd5b600160149054906101000a900460ff16156040518060600160405280602181526020016112bb60219139906106c15760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561020e5781810151838201526020016101f6565b50600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b179055600280546001600160a01b039e8f1673ffffffffffffffffffffffffffffffffffffffff1991821617909155600380549d8f169d82169d909d17909c55600480549b8e169b8d169b909b17909a5560058054998d16998c169990991790985560068054978c16978b169790971790965560078054958b16958a169590951790945560088054938a169389169390931790925560098054918916918816919091179055600b8054918816918716919091179055600a8054918716918616919091179055600c8054918616918516919091179055600e8054918516918416919091179055600d8054919093169116179055565b600154600160a01b900460ff1681565b6006546001600160a01b031681565b6002546001600160a01b031681565b600060026000541415610869576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000556040805180820190915260208082527f526577617264526f757465723a20696e76616c6964205f6d6c70416d6f756e7490820152846108ee5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561020e5781810151838201526020016101f6565b50600c54600254604080516371d597ad60e01b815233600482018190526001600160a01b03938416602483015260448201899052606482018890523060848301529151919360009316916371d597ad9160a48082019260209290919082900301818787803b15801561095f57600080fd5b505af1158015610973573d6000803e3d6000fd5b505050506040513d602081101561098957600080fd5b5051600254604080517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526004810184905290519293506001600160a01b0390911691632e1a7d4d9160248082019260009290919082900301818387803b1580156109f457600080fd5b505af1158015610a08573d6000803e3d6000fd5b50610a20925050506001600160a01b03851682611196565b604080516001600160a01b03841681526020810188905281517fcc7cb940d1fa10f6c95397bd7355aef0bad1b89bfc9cd922162720bff9110094929181900390910190a1600160005595945050505050565b600060026000541415610acc576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000556040805180820190915260208082527f526577617264526f757465723a20696e76616c6964205f6d6c70416d6f756e749082015284610b515760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561020e5781810151838201526020016101f6565b50600c54604080516371d597ad60e01b815233600482018190526001600160a01b038981166024840152604483018990526064830188905286811660848401529251909360009316916371d597ad9160a480830192602092919082900301818787803b158015610bc057600080fd5b505af1158015610bd4573d6000803e3d6000fd5b505050506040513d6020811015610bea57600080fd5b5051604080516001600160a01b03851681526020810189905281519293507fcc7cb940d1fa10f6c95397bd7355aef0bad1b89bfc9cd922162720bff9110094929081900390910190a160016000559695505050505050565b6009546001600160a01b031681565b6008546001600160a01b031681565b600060026000541415610cba576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260005560408051808201909152601f81527f526577617264526f757465723a20696e76616c6964206d73672e76616c756500602082015234610d3f5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561020e5781810151838201526020016101f6565b50600260009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610d9057600080fd5b505af1158015610da4573d6000803e3d6000fd5b5050600254600c54604080517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152346024820152905191909216945063095ea7b39350604480830193506020928290030181600087803b158015610e1857600080fd5b505af1158015610e2c573d6000803e3d6000fd5b505050506040513d6020811015610e4257600080fd5b5050600c54600254604080516317eb2a1560e01b815230600482015233602482018190526001600160a01b0393841660448301523460648301526084820188905260a482018790529151919360009316916317eb2a159160c48082019260209290919082900301818787803b158015610eba57600080fd5b505af1158015610ece573d6000803e3d6000fd5b505050506040513d6020811015610ee457600080fd5b5051600160005595945050505050565b6004546001600160a01b031681565b600d546001600160a01b031681565b6003546001600160a01b031681565b6007546001600160a01b031681565b600c546001600160a01b031681565b6001546001600160a01b03163314610f9e576040805162461bcd60e51b815260206004820152601560248201527f476f7665726e61626c653a20666f7262696464656e0000000000000000000000604482015290519081900360640190fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600a546001600160a01b031681565b600f602052600090815260409020546001600160a01b031681565b600060026000541415611051576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260005560408051808201909152601d81527f526577617264526f757465723a20696e76616c6964205f616d6f756e740000006020820152846110d65760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561020e5781810151838201526020016101f6565b50600c54604080516317eb2a1560e01b81523360048201819052602482018190526001600160a01b038981166044840152606483018990526084830188905260a483018790529251909360009316916317eb2a159160c480830192602092919082900301818787803b15801561114b57600080fd5b505af115801561115f573d6000803e3d6000fd5b505050506040513d602081101561117557600080fd5b50516001600055979650505050505050565b600b546001600160a01b031681565b804710156111eb576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d8060008114611236576040519150601f19603f3d011682016040523d82523d6000602084013e61123b565b606091505b505090508061127b5760405162461bcd60e51b815260040180806020018281038252603a815260200180611281603a913960400191505060405180910390fd5b50505056fe416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564526577617264526f757465723a20616c726561647920696e697469616c697a6564a2646970667358221220a94930a1ca9cb86be9dbaa9fc3e0289b3c1155984915974dee60ee015dc4853f64736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106101795760003560e01c8063944b4e5f116100cb578063cbb91c5e1161007f578063e1b9db8911610059578063e1b9db8914610532578063f5e3587914610565578063fc8b6fc1146105aa5761024c565b8063cbb91c5e146104d5578063cfad57a2146104ea578063d4d933f01461051d5761024c565b8063b2a39a2a116100b0578063b2a39a2a14610496578063b77aae8f146104ab578063bf23e32f146104c05761024c565b8063944b4e5f1461045e578063aec61443146104815761024c565b80633e49e2131161012d57806353f33a551161010757806353f33a55146103ed5780635e39e99614610434578063882acc1c146104495761024c565b80633e49e213146103725780633fc8cef3146103875780635387701e1461039c5761024c565b80632ce73b681161015e5780632ce73b68146102975780632fdd983d146102ac578063392e53cd146103495761024c565b806312d43a51146102515780632456d3df146102825761024c565b3661024c5760025460408051808201909152601681527f526f757465723a20696e76616c69642073656e646572000000000000000000006020820152906001600160a01b031633146102495760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561020e5781810151838201526020016101f6565b50505050905090810190601f16801561023b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50005b600080fd5b34801561025d57600080fd5b506102666105bf565b604080516001600160a01b039092168252519081900360200190f35b34801561028e57600080fd5b506102666105ce565b3480156102a357600080fd5b506102666105dd565b3480156102b857600080fd5b5061034760048036036101a08110156102d057600080fd5b506001600160a01b038135811691602081013582169160408201358116916060810135821691608082013581169160a081013582169160c082013581169160e081013582169161010082013581169161012081013582169161014082013581169161016081013582169161018090910135166105ec565b005b34801561035557600080fd5b5061035e6107e1565b604080519115158252519081900360200190f35b34801561037e57600080fd5b506102666107f1565b34801561039357600080fd5b50610266610800565b3480156103a857600080fd5b506103db600480360360608110156103bf57600080fd5b50803590602081013590604001356001600160a01b031661080f565b60408051918252519081900360200190f35b3480156103f957600080fd5b506103db6004803603608081101561041057600080fd5b506001600160a01b0381358116916020810135916040820135916060013516610a72565b34801561044057600080fd5b50610266610c42565b34801561045557600080fd5b50610266610c51565b6103db6004803603604081101561047457600080fd5b5080359060200135610c60565b34801561048d57600080fd5b50610266610ef4565b3480156104a257600080fd5b50610266610f03565b3480156104b757600080fd5b50610266610f12565b3480156104cc57600080fd5b50610266610f21565b3480156104e157600080fd5b50610266610f30565b3480156104f657600080fd5b506103476004803603602081101561050d57600080fd5b50356001600160a01b0316610f3f565b34801561052957600080fd5b50610266610fcd565b34801561053e57600080fd5b506102666004803603602081101561055557600080fd5b50356001600160a01b0316610fdc565b34801561057157600080fd5b506103db6004803603608081101561058857600080fd5b506001600160a01b038135169060208101359060408101359060600135610ff7565b3480156105b657600080fd5b50610266611187565b6001546001600160a01b031681565b6005546001600160a01b031681565b600e546001600160a01b031681565b6001546001600160a01b0316331461064b576040805162461bcd60e51b815260206004820152601560248201527f476f7665726e61626c653a20666f7262696464656e0000000000000000000000604482015290519081900360640190fd5b600160149054906101000a900460ff16156040518060600160405280602181526020016112bb60219139906106c15760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561020e5781810151838201526020016101f6565b50600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b179055600280546001600160a01b039e8f1673ffffffffffffffffffffffffffffffffffffffff1991821617909155600380549d8f169d82169d909d17909c55600480549b8e169b8d169b909b17909a5560058054998d16998c169990991790985560068054978c16978b169790971790965560078054958b16958a169590951790945560088054938a169389169390931790925560098054918916918816919091179055600b8054918816918716919091179055600a8054918716918616919091179055600c8054918616918516919091179055600e8054918516918416919091179055600d8054919093169116179055565b600154600160a01b900460ff1681565b6006546001600160a01b031681565b6002546001600160a01b031681565b600060026000541415610869576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000556040805180820190915260208082527f526577617264526f757465723a20696e76616c6964205f6d6c70416d6f756e7490820152846108ee5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561020e5781810151838201526020016101f6565b50600c54600254604080516371d597ad60e01b815233600482018190526001600160a01b03938416602483015260448201899052606482018890523060848301529151919360009316916371d597ad9160a48082019260209290919082900301818787803b15801561095f57600080fd5b505af1158015610973573d6000803e3d6000fd5b505050506040513d602081101561098957600080fd5b5051600254604080517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526004810184905290519293506001600160a01b0390911691632e1a7d4d9160248082019260009290919082900301818387803b1580156109f457600080fd5b505af1158015610a08573d6000803e3d6000fd5b50610a20925050506001600160a01b03851682611196565b604080516001600160a01b03841681526020810188905281517fcc7cb940d1fa10f6c95397bd7355aef0bad1b89bfc9cd922162720bff9110094929181900390910190a1600160005595945050505050565b600060026000541415610acc576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000556040805180820190915260208082527f526577617264526f757465723a20696e76616c6964205f6d6c70416d6f756e749082015284610b515760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561020e5781810151838201526020016101f6565b50600c54604080516371d597ad60e01b815233600482018190526001600160a01b038981166024840152604483018990526064830188905286811660848401529251909360009316916371d597ad9160a480830192602092919082900301818787803b158015610bc057600080fd5b505af1158015610bd4573d6000803e3d6000fd5b505050506040513d6020811015610bea57600080fd5b5051604080516001600160a01b03851681526020810189905281519293507fcc7cb940d1fa10f6c95397bd7355aef0bad1b89bfc9cd922162720bff9110094929081900390910190a160016000559695505050505050565b6009546001600160a01b031681565b6008546001600160a01b031681565b600060026000541415610cba576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260005560408051808201909152601f81527f526577617264526f757465723a20696e76616c6964206d73672e76616c756500602082015234610d3f5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561020e5781810151838201526020016101f6565b50600260009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610d9057600080fd5b505af1158015610da4573d6000803e3d6000fd5b5050600254600c54604080517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152346024820152905191909216945063095ea7b39350604480830193506020928290030181600087803b158015610e1857600080fd5b505af1158015610e2c573d6000803e3d6000fd5b505050506040513d6020811015610e4257600080fd5b5050600c54600254604080516317eb2a1560e01b815230600482015233602482018190526001600160a01b0393841660448301523460648301526084820188905260a482018790529151919360009316916317eb2a159160c48082019260209290919082900301818787803b158015610eba57600080fd5b505af1158015610ece573d6000803e3d6000fd5b505050506040513d6020811015610ee457600080fd5b5051600160005595945050505050565b6004546001600160a01b031681565b600d546001600160a01b031681565b6003546001600160a01b031681565b6007546001600160a01b031681565b600c546001600160a01b031681565b6001546001600160a01b03163314610f9e576040805162461bcd60e51b815260206004820152601560248201527f476f7665726e61626c653a20666f7262696464656e0000000000000000000000604482015290519081900360640190fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600a546001600160a01b031681565b600f602052600090815260409020546001600160a01b031681565b600060026000541415611051576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260005560408051808201909152601d81527f526577617264526f757465723a20696e76616c6964205f616d6f756e740000006020820152846110d65760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561020e5781810151838201526020016101f6565b50600c54604080516317eb2a1560e01b81523360048201819052602482018190526001600160a01b038981166044840152606483018990526084830188905260a483018790529251909360009316916317eb2a159160c480830192602092919082900301818787803b15801561114b57600080fd5b505af115801561115f573d6000803e3d6000fd5b505050506040513d602081101561117557600080fd5b50516001600055979650505050505050565b600b546001600160a01b031681565b804710156111eb576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d8060008114611236576040519150601f19603f3d011682016040523d82523d6000602084013e61123b565b606091505b505090508061127b5760405162461bcd60e51b815260040180806020018281038252603a815260200180611281603a913960400191505060405180910390fd5b50505056fe416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564526577617264526f757465723a20616c726561647920696e697469616c697a6564a2646970667358221220a94930a1ca9cb86be9dbaa9fc3e0289b3c1155984915974dee60ee015dc4853f64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15155,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "gov",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 12328,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "isInitialized",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 12330,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "weth",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 12332,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "mold",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 12334,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "esMold",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 12336,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "bnMold",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 12338,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "mlp",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 12340,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "stakedMoldTracker",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 12342,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "bonusMoldTracker",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 12344,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "feeMoldTracker",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 12346,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "stakedMlpTracker",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 12348,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "feeMlpTracker",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 12350,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "mlpManager",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 12352,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "mlpVester",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 12354,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "moldVester",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 12358,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "pendingReceivers",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}