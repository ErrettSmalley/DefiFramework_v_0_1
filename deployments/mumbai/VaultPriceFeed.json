{
  "address": "0x621Fc00Dd6Fc50204dcCaF84b03Cc991D5a2A218",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "adjustmentBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bnb",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bnbBusd",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "btc",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "btcBnb",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainlinkFlags",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethBnb",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "favorPrimaryPrice",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getAmmPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_maximise",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_primaryPrice",
          "type": "uint256"
        }
      ],
      "name": "getAmmPriceV2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getLatestPrimaryPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_divByReserve0",
          "type": "bool"
        }
      ],
      "name": "getPairPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_maximise",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_includeAmmPrice",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_maximise",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_includeAmmPrice",
          "type": "bool"
        }
      ],
      "name": "getPriceV1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_maximise",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_includeAmmPrice",
          "type": "bool"
        }
      ],
      "name": "getPriceV2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_maximise",
          "type": "bool"
        }
      ],
      "name": "getPrimaryPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_referencePrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_maximise",
          "type": "bool"
        }
      ],
      "name": "getSecondaryPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isAdjustmentAdditive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAmmEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSecondaryPriceEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastAdjustmentTimings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxStrictPriceDeviation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "priceDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "priceFeeds",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceSampleSpace",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "secondaryPriceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isAdditive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_adjustmentBps",
          "type": "uint256"
        }
      ],
      "name": "setAdjustment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_chainlinkFlags",
          "type": "address"
        }
      ],
      "name": "setChainlinkFlags",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_favorPrimaryPrice",
          "type": "bool"
        }
      ],
      "name": "setFavorPrimaryPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isEnabled",
          "type": "bool"
        }
      ],
      "name": "setIsAmmEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isEnabled",
          "type": "bool"
        }
      ],
      "name": "setIsSecondaryPriceEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxStrictPriceDeviation",
          "type": "uint256"
        }
      ],
      "name": "setMaxStrictPriceDeviation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bnbBusd",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ethBnb",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_btcBnb",
          "type": "address"
        }
      ],
      "name": "setPairs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_priceSampleSpace",
          "type": "uint256"
        }
      ],
      "name": "setPriceSampleSpace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_secondaryPriceFeed",
          "type": "address"
        }
      ],
      "name": "setSecondaryPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_spreadBasisPoints",
          "type": "uint256"
        }
      ],
      "name": "setSpreadBasisPoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_spreadThresholdBasisPoints",
          "type": "uint256"
        }
      ],
      "name": "setSpreadThresholdBasisPoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_priceDecimals",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isStrictStable",
          "type": "bool"
        }
      ],
      "name": "setTokenConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_btc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_eth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bnb",
          "type": "address"
        }
      ],
      "name": "setTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_useV2Pricing",
          "type": "bool"
        }
      ],
      "name": "setUseV2Pricing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "spreadBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spreadThresholdBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "strictStableTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useV2Pricing",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x738ad4a58f62f73d6181f39437a9c53f9c8d7b6573cad7cbc86bbe2846ed28a8",
  "receipt": {
    "to": null,
    "from": "0x9B6B26Db5F9149F0e3f4DAF2Eb98307020236dDB",
    "contractAddress": "0x621Fc00Dd6Fc50204dcCaF84b03Cc991D5a2A218",
    "transactionIndex": 1,
    "gasUsed": "2283948",
    "logsBloom": "0x
    "blockHash": "0xc7bf21135ad9052e9441633c166261d2a857a1f4541f108c03023ff4ab6b32f4",
    "transactionHash": "0x738ad4a58f62f73d6181f39437a9c53f9c8d7b6573cad7cbc86bbe2846ed28a8",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 33420386,
        "transactionHash": "0x738ad4a58f62f73d6181f39437a9c53f9c8d7b6573cad7cbc86bbe2846ed28a8",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009b6b26db5f9149f0e3f4daf2eb98307020236ddb",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000030af6e7f5a50000000000000000000000000000000000000000000000000008be588e73ce996350000000000000000000000000000000000000000000004561b211c0ffea81b080000000000000000000000000000000000000000000000008bb4d978bd8f46350000000000000000000000000000000000000000000004561b51cb7e7e026b08",
        "logIndex": 3,
        "blockHash": "0xc7bf21135ad9052e9441633c166261d2a857a1f4541f108c03023ff4ab6b32f4"
      }
    ],
    "blockNumber": 33420386,
    "cumulativeGasUsed": "2360861",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "59bf562207d3b98a68d8cbf2ed09b4a8",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adjustmentBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbBusd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"btc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"btcBnb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlinkFlags\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBnb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"favorPrimaryPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getAmmPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_maximise\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_primaryPrice\",\"type\":\"uint256\"}],\"name\":\"getAmmPriceV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getLatestPrimaryPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_divByReserve0\",\"type\":\"bool\"}],\"name\":\"getPairPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_maximise\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_includeAmmPrice\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_maximise\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_includeAmmPrice\",\"type\":\"bool\"}],\"name\":\"getPriceV1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_maximise\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_includeAmmPrice\",\"type\":\"bool\"}],\"name\":\"getPriceV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_maximise\",\"type\":\"bool\"}],\"name\":\"getPrimaryPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referencePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_maximise\",\"type\":\"bool\"}],\"name\":\"getSecondaryPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdjustmentAdditive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAmmEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSecondaryPriceEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastAdjustmentTimings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStrictPriceDeviation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"priceDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"priceFeeds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceSampleSpace\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondaryPriceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAdditive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_adjustmentBps\",\"type\":\"uint256\"}],\"name\":\"setAdjustment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_chainlinkFlags\",\"type\":\"address\"}],\"name\":\"setChainlinkFlags\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_favorPrimaryPrice\",\"type\":\"bool\"}],\"name\":\"setFavorPrimaryPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isEnabled\",\"type\":\"bool\"}],\"name\":\"setIsAmmEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isEnabled\",\"type\":\"bool\"}],\"name\":\"setIsSecondaryPriceEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxStrictPriceDeviation\",\"type\":\"uint256\"}],\"name\":\"setMaxStrictPriceDeviation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bnbBusd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethBnb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_btcBnb\",\"type\":\"address\"}],\"name\":\"setPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceSampleSpace\",\"type\":\"uint256\"}],\"name\":\"setPriceSampleSpace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_secondaryPriceFeed\",\"type\":\"address\"}],\"name\":\"setSecondaryPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_spreadBasisPoints\",\"type\":\"uint256\"}],\"name\":\"setSpreadBasisPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_spreadThresholdBasisPoints\",\"type\":\"uint256\"}],\"name\":\"setSpreadThresholdBasisPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_priceDecimals\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isStrictStable\",\"type\":\"bool\"}],\"name\":\"setTokenConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_btc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_eth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bnb\",\"type\":\"address\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useV2Pricing\",\"type\":\"bool\"}],\"name\":\"setUseV2Pricing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"spreadBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spreadThresholdBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strictStableTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useV2Pricing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/VaultPriceFeed.sol\":\"VaultPriceFeed\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/amm/interfaces/IPancakePair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface IPancakePair {\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n}\\n\",\"keccak256\":\"0x3dcc81f2681ce8d6231acd3d0c5e173068c27a15c2cf4a796d54cffd28fe1c75\",\"license\":\"MIT\"},\"contracts/core/VaultPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"./settings/VaultPriceFeedSettings.sol\\\";\\ncontract VaultPriceFeed is VaultPriceFeedSettings {\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n    function getPrice(\\n        address _token,\\n        bool _maximise,\\n        bool _includeAmmPrice, bool) public override view returns (uint256) {\\n        uint256 price = useV2Pricing ? getPriceV2(_token, _maximise, _includeAmmPrice) : getPriceV1(_token, _maximise, _includeAmmPrice);\\n        uint256 adjustmentBps = adjustmentBasisPoints[_token];\\n        if (adjustmentBps > 0) {\\n            bool isAdditive = isAdjustmentAdditive[_token];\\n            if (isAdditive) {\\n                price = price.mul(Constants.BASIS_POINTS_DIVISOR.add(adjustmentBps)).div(Constants.BASIS_POINTS_DIVISOR);\\n            } else {\\n                price = price.mul(Constants.BASIS_POINTS_DIVISOR.sub(adjustmentBps)).div(Constants.BASIS_POINTS_DIVISOR);\\n            }\\n        }\\n        return price;\\n    }\\n    function getPriceV1(\\n        address _token,\\n        bool _maximise,\\n        bool _includeAmmPrice) public view returns (uint256) {\\n        uint256 price = getPrimaryPrice(_token, _maximise);\\n        if (_includeAmmPrice && isAmmEnabled) {\\n            uint256 ammPrice = getAmmPrice(_token);\\n            if (ammPrice > 0) {\\n                if (_maximise && ammPrice > price) {\\n                    price = ammPrice;\\n                }\\n                if (!_maximise && ammPrice < price) {\\n                    price = ammPrice;\\n                }\\n            }\\n        }\\n        if (isSecondaryPriceEnabled) {\\n            price = getSecondaryPrice(_token, price, _maximise);\\n        }\\n        if (strictStableTokens[_token]) {\\n            uint256 delta = price > Constants.ONE_USD ? price.sub(Constants.ONE_USD) : Constants.ONE_USD.sub(price);\\n            if (delta <= maxStrictPriceDeviation) {\\n                return Constants.ONE_USD;\\n            }\\n            if (_maximise && price > Constants.ONE_USD) {\\n                return price;\\n            }\\n            if (!_maximise && price < Constants.ONE_USD) {\\n                return price;\\n            }\\n            return Constants.ONE_USD;\\n        }\\n        uint256 _spreadBasisPoints = spreadBasisPoints[_token];\\n        if (_maximise) {\\n            return price.mul(Constants.BASIS_POINTS_DIVISOR.add(_spreadBasisPoints)).div(Constants.BASIS_POINTS_DIVISOR);\\n        }\\n        return price.mul(Constants.BASIS_POINTS_DIVISOR.sub(_spreadBasisPoints)).div(Constants.BASIS_POINTS_DIVISOR);\\n    }\\n    function getPriceV2(\\n        address _token,\\n        bool _maximise,\\n        bool _includeAmmPrice) public view returns (uint256) {\\n        uint256 price = getPrimaryPrice(_token, _maximise);\\n        if (_includeAmmPrice && isAmmEnabled) {\\n            price = getAmmPriceV2(_token, _maximise, price);\\n        }\\n        if (isSecondaryPriceEnabled) {\\n            price = getSecondaryPrice(_token, price, _maximise);\\n        }\\n        if (strictStableTokens[_token]) {\\n            uint256 delta = price > Constants.ONE_USD ? price.sub(Constants.ONE_USD) : Constants.ONE_USD.sub(price);\\n            if (delta <= maxStrictPriceDeviation) {\\n                return Constants.ONE_USD;\\n            }\\n            if (_maximise && price > Constants.ONE_USD) {\\n                return price;\\n            }\\n            if (!_maximise && price < Constants.ONE_USD) {\\n                return price;\\n            }\\n            return Constants.ONE_USD;\\n        }\\n        uint256 _spreadBasisPoints = spreadBasisPoints[_token];\\n        if (_maximise) {\\n            return price.mul(Constants.BASIS_POINTS_DIVISOR.add(_spreadBasisPoints)).div(Constants.BASIS_POINTS_DIVISOR);\\n        }\\n        return price.mul(Constants.BASIS_POINTS_DIVISOR.sub(_spreadBasisPoints)).div(Constants.BASIS_POINTS_DIVISOR);\\n    }\\n    function getAmmPriceV2(\\n        address _token,\\n        bool _maximise,\\n        uint256 _primaryPrice) public view returns (uint256) {\\n        uint256 ammPrice = getAmmPrice(_token);\\n        if (ammPrice == 0) {\\n            return _primaryPrice;\\n        }\\n        uint256 diff = ammPrice > _primaryPrice ? ammPrice.sub(_primaryPrice) : _primaryPrice.sub(ammPrice);\\n        if (diff.mul(Constants.BASIS_POINTS_DIVISOR) < _primaryPrice.mul(spreadThresholdBasisPoints)) {\\n            if (favorPrimaryPrice) {\\n                return _primaryPrice;\\n            }\\n            return ammPrice;\\n        }\\n        if (_maximise && ammPrice > _primaryPrice) {\\n            return ammPrice;\\n        }\\n        if (!_maximise && ammPrice < _primaryPrice) {\\n            return ammPrice;\\n        }\\n        return _primaryPrice;\\n    }\\n    function getLatestPrimaryPrice(address _token) public override view returns (uint256) {\\n        address priceFeedAddress = priceFeeds[_token];\\n        require(priceFeedAddress != address(0), Errors.VAULTPRICEFEED_INVALID_PRICE_FEED);\\n        IPriceFeed priceFeed = IPriceFeed(priceFeedAddress);\\n        int256 price = priceFeed.latestAnswer();\\n        require(price > 0, Errors.VAULTPRICEFEED_INVALID_PRICE);\\n        return uint256(price);\\n    }\\n    function getPrimaryPrice(\\n        address _token,\\n        bool _maximise) public override view returns (uint256) {\\n        address priceFeedAddress = priceFeeds[_token];\\n        require(priceFeedAddress != address(0), Errors.VAULTPRICEFEED_INVALID_PRICE_FEED);\\n        if (chainlinkFlags != address(0)) {\\n            bool isRaised = IChainlinkFlags(chainlinkFlags).getFlag(Constants.FLAG_ARBITRUM_SEQ_OFFLINE);\\n            if (isRaised) {\\n                revert(Errors.CHAINLINK_FEEDS_ARE_NOT_BEING_UPDATED);\\n            }\\n        }\\n        IPriceFeed priceFeed = IPriceFeed(priceFeedAddress);\\n        uint256 price = 0;\\n        uint80 roundId = priceFeed.latestRound();\\n        for (uint80 i = 0; i < priceSampleSpace; i++) {\\n            if (roundId <= i) { break; }\\n            uint256 p;\\n            if (i == 0) {\\n                int256 _p = priceFeed.latestAnswer();\\n                require(_p > 0, Errors.VAULTPRICEFEED_INVALID_PRICE);\\n                p = uint256(_p);\\n            } else {\\n                (, int256 _p, , ,) = priceFeed.getRoundData(roundId - i);\\n                require(_p > 0, Errors.VAULTPRICEFEED_INVALID_PRICE);\\n                p = uint256(_p);\\n            }\\n            if (price == 0) {\\n                price = p;\\n                continue;\\n            }\\n            if (_maximise && p > price) {\\n                price = p;\\n                continue;\\n            }\\n            if (!_maximise && p < price) {\\n                price = p;\\n            }\\n        }\\n        require(price > 0, Errors.VAULTPRICEFEED_COULD_NOT_FETCH_PRICE);\\n        uint256 _priceDecimals = priceDecimals[_token];\\n        return price.mul(Constants.PRICE_PRECISION).div(10 ** _priceDecimals);\\n    }\\n    function getSecondaryPrice(\\n        address _token,\\n        uint256 _referencePrice,\\n        bool _maximise) public view returns (uint256) {\\n        if (secondaryPriceFeed == address(0)) { return _referencePrice; }\\n        return ISecondaryPriceFeed(secondaryPriceFeed).getPrice(_token, _referencePrice, _maximise);\\n    }\\n    function getAmmPrice(address _token) public override view returns (uint256) {\\n        if (_token == bnb) {\\n            return getPairPrice(bnbBusd, true);\\n        }\\n        if (_token == eth) {\\n            uint256 price0 = getPairPrice(bnbBusd, true);\\n            uint256 price1 = getPairPrice(ethBnb, true);\\n            return price0.mul(price1).div(Constants.PRICE_PRECISION);\\n        }\\n        if (_token == btc) {\\n            uint256 price0 = getPairPrice(bnbBusd, true);\\n            uint256 price1 = getPairPrice(btcBnb, true);\\n            return price0.mul(price1).div(Constants.PRICE_PRECISION);\\n        }\\n        return 0;\\n    }\\n    function getPairPrice(address _pair, bool _divByReserve0) public view returns (uint256) {\\n        (uint256 reserve0, uint256 reserve1, ) = IPancakePair(_pair).getReserves();\\n        if (_divByReserve0) {\\n            if (reserve0 == 0) { return 0; }\\n            return reserve1.mul(Constants.PRICE_PRECISION).div(reserve0);\\n        }\\n        if (reserve1 == 0) { return 0; }\\n        return reserve0.mul(Constants.PRICE_PRECISION).div(reserve1);\\n    }\\n}\\n\",\"keccak256\":\"0x7e9baf63aefb359b818d70072f6a47a2f22c3b4c6b0723f2691483638d53f402\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IVaultPriceFeed {\\n    function adjustmentBasisPoints(address _token) external view returns (uint256);\\n    function isAdjustmentAdditive(address _token) external view returns (bool);\\n    function setAdjustment(address _token, bool _isAdditive, uint256 _adjustmentBps) external;\\n    function setUseV2Pricing(bool _useV2Pricing) external;\\n    function setIsAmmEnabled(bool _isEnabled) external;\\n    function setIsSecondaryPriceEnabled(bool _isEnabled) external;\\n    function setSpreadBasisPoints(address _token, uint256 _spreadBasisPoints) external;\\n    function setSpreadThresholdBasisPoints(uint256 _spreadThresholdBasisPoints) external;\\n    function setFavorPrimaryPrice(bool _favorPrimaryPrice) external;\\n    function setPriceSampleSpace(uint256 _priceSampleSpace) external;\\n    function setMaxStrictPriceDeviation(uint256 _maxStrictPriceDeviation) external;\\n    function getPrice(address _token, bool _maximise, bool _includeAmmPrice, bool _useSwapPricing) external view returns (uint256);\\n    function getAmmPrice(address _token) external view returns (uint256);\\n    function getLatestPrimaryPrice(address _token) external view returns (uint256);\\n    function getPrimaryPrice(address _token, bool _maximise) external view returns (uint256);\\n    function setTokenConfig(address _token, address _priceFeed, uint256 _priceDecimals, bool _isStrictStable) external;\\n}\\n\",\"keccak256\":\"0xa2ed7073305dff5e748522f8279f0690fd51bfeaa3e432b3e1e10de175e4be69\",\"license\":\"MIT\"},\"contracts/core/settings/VaultPriceFeedSettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"../storage/VaultPriceFeedStorage.sol\\\";\\nabstract contract VaultPriceFeedSettings is VaultPriceFeedStorage {\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n    function setChainlinkFlags(address _chainlinkFlags) external onlyGov {\\n        chainlinkFlags = _chainlinkFlags;\\n    }\\n    function setAdjustment(address _token, bool _isAdditive, uint256 _adjustmentBps) external override onlyGov {\\n        require(\\n            lastAdjustmentTimings[_token].add(Constants.MAX_ADJUSTMENT_INTERVAL) < block.timestamp,\\n            Errors.VAULTPRICEFEED_ADJUSTMENT_FREQUENCY_EXCEEDED\\n        );\\n        require(_adjustmentBps <= Constants.MAX_ADJUSTMENT_BASIS_POINTS, Errors.VAULTPRICEFEED_INVALID_ADJUSTMENTBPS);\\n        isAdjustmentAdditive[_token] = _isAdditive;\\n        adjustmentBasisPoints[_token] = _adjustmentBps;\\n        lastAdjustmentTimings[_token] = block.timestamp;\\n    }\\n    function setUseV2Pricing(bool _useV2Pricing) external override onlyGov {\\n        useV2Pricing = _useV2Pricing;\\n    }\\n    function setIsAmmEnabled(bool _isEnabled) external override onlyGov {\\n        isAmmEnabled = _isEnabled;\\n    }\\n\\n    function setIsSecondaryPriceEnabled(bool _isEnabled) external override onlyGov {\\n        isSecondaryPriceEnabled = _isEnabled;\\n    }\\n    function setSecondaryPriceFeed(address _secondaryPriceFeed) external onlyGov {\\n        secondaryPriceFeed = _secondaryPriceFeed;\\n    }\\n    function setTokens(address _btc, address _eth, address _bnb) external onlyGov {\\n        btc = _btc;\\n        eth = _eth;\\n        bnb = _bnb;\\n    }\\n    function setPairs(address _bnbBusd, address _ethBnb, address _btcBnb) external onlyGov {\\n        bnbBusd = _bnbBusd;\\n        ethBnb = _ethBnb;\\n        btcBnb = _btcBnb;\\n    }\\n    function setSpreadBasisPoints(address _token, uint256 _spreadBasisPoints) external override onlyGov {\\n        require(_spreadBasisPoints <= Constants.MAX_SPREAD_BASIS_POINTS, Errors.VAULTPRICEFEED_INVALID_SPREADBASISPOINTS);\\n        spreadBasisPoints[_token] = _spreadBasisPoints;\\n    }\\n\\n    function setSpreadThresholdBasisPoints(uint256 _spreadThresholdBasisPoints) external override onlyGov {\\n        spreadThresholdBasisPoints = _spreadThresholdBasisPoints;\\n    }\\n    function setFavorPrimaryPrice(bool _favorPrimaryPrice) external override onlyGov {\\n        favorPrimaryPrice = _favorPrimaryPrice;\\n    }\\n    function setPriceSampleSpace(uint256 _priceSampleSpace) external override onlyGov {\\n        require(_priceSampleSpace > 0, Errors.VAULTPRICEFEED_INVALID_PRICESAMPLESPACE);\\n        priceSampleSpace = _priceSampleSpace;\\n    }\\n    function setMaxStrictPriceDeviation(uint256 _maxStrictPriceDeviation) external override onlyGov {\\n        maxStrictPriceDeviation = _maxStrictPriceDeviation;\\n    }\\n    function setTokenConfig(address _token, address _priceFeed, uint256 _priceDecimals, bool _isStrictStable) external override onlyGov {\\n        priceFeeds[_token] = _priceFeed;\\n        priceDecimals[_token] = _priceDecimals;\\n        strictStableTokens[_token] = _isStrictStable;\\n    }\\n}\\n\",\"keccak256\":\"0xaa7b45ebfe20a41a530a37c0c26dde8aeec7a3583c578001b8b50dd8a6984397\",\"license\":\"MIT\"},\"contracts/core/storage/VaultPriceFeedStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"../../oracle/interfaces/IPriceFeed.sol\\\";\\nimport \\\"../../oracle/interfaces/ISecondaryPriceFeed.sol\\\";\\nimport \\\"../../oracle/interfaces/IChainlinkFlags.sol\\\";\\nimport \\\"../../amm/interfaces/IPancakePair.sol\\\";\\nimport \\\"../interfaces/IVaultPriceFeed.sol\\\";\\nimport \\\"../../libraries/math/SafeMath.sol\\\";\\nimport \\\"../../libraries/Errors.sol\\\";\\nimport \\\"../../libraries/Constants.sol\\\";\\nabstract contract VaultPriceFeedStorage is IVaultPriceFeed  {\\n    uint256 public spreadThresholdBasisPoints = 30;\\n    uint256 public priceSampleSpace = 3;\\n    uint256 public maxStrictPriceDeviation = 0;\\n    bool public isAmmEnabled = true;\\n    bool public isSecondaryPriceEnabled = true;\\n    bool public useV2Pricing = false;\\n    bool public favorPrimaryPrice = false;\\n    address public gov;\\n    address public chainlinkFlags;\\n    address public secondaryPriceFeed;\\n    address public btc;\\n    address public eth;\\n    address public bnb;\\n    address public bnbBusd;\\n    address public ethBnb;\\n    address public btcBnb;\\n    mapping (address => address) public priceFeeds;\\n    mapping (address => uint256) public priceDecimals;\\n    mapping (address => uint256) public spreadBasisPoints;\\n    mapping (address => bool) public strictStableTokens;\\n    mapping (address => uint256) public override adjustmentBasisPoints;\\n    mapping (address => bool) public override isAdjustmentAdditive;\\n    mapping (address => uint256) public lastAdjustmentTimings;\\n    using SafeMath for uint256;\\n    modifier onlyGov() {\\n        require(msg.sender == gov, Errors.VAULTPRICEFEED_FORBIDDEN);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xb31d0a6bbc860f644f6d3ac0008e6268bca0e1a2bb0ec03433f0cc30e83e7329\",\"license\":\"MIT\"},\"contracts/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nlibrary Constants {\\n    string public constant USDM_TOKEN_NAME = \\\"USD Mold\\\";\\n    string public constant USDM_TOKEN_SYMBOL = \\\"USDM\\\";\\n    /* VaultPriceFeed.sol */\\n    uint256 public constant PRICE_PRECISION = 10 ** 30;\\n    uint256 public constant ONE_USD = PRICE_PRECISION;\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n    uint256 public constant MAX_SPREAD_BASIS_POINTS = 50;\\n    uint256 public constant MAX_ADJUSTMENT_INTERVAL = 2 hours;\\n    uint256 public constant MAX_ADJUSTMENT_BASIS_POINTS = 20;\\n    address constant internal FLAG_ARBITRUM_SEQ_OFFLINE = address(bytes20(bytes32(uint256(keccak256(\\\"chainlink.flags.arbitrum-seq-offline\\\")) - 1)));\\n    /* VaultUtils.sol */\\n    uint256 public constant FUNDING_RATE_PRECISION = 1000000;\\n\\n    /* Vault.sol*/\\n    uint256 public constant MIN_LEVERAGE = 10000; // 1x\\n    uint256 public constant USDM_DECIMALS = 18;\\n    uint256 public constant MAX_FEE_BASIS_POINTS = 500; // 5%\\n    uint256 public constant MAX_LIQUIDATION_FEE_USD = 100 * PRICE_PRECISION; // 100 USD\\n    uint256 public constant MIN_FUNDING_RATE_INTERVAL = 1 hours;\\n    uint256 public constant MAX_FUNDING_RATE_FACTOR = 10000; // 1%\\n\\n    /* OrderBook.sol */\\n    uint256 public constant USDM_PRECISION = 1e18;\\n\\n    /* MLP.sol */\\n    uint256 public constant MLP_PRECISION = 10 ** 18;\\n    uint256 public constant MAX_COOLDOWN_DURATION = 48 hours;\\n\\n    /* ShortsTracker */\\n    uint256 public constant MAX_INT256 = uint256(type(int256).max);\\n}\\n\",\"keccak256\":\"0x7b8317c87bc0c15a28f7278ac379ad9f81398acc1a7e22bf33bb9b286ec9c84b\",\"license\":\"MIT\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nlibrary Errors {\\n    /* Timelock Error Message*/\\n    string public constant Timelock_Invalid_Target = \\\"Timelock: invalid _target\\\";\\n    string public constant Timelock_Invalid_Buffer = \\\"Timelock: invalid _buffer\\\";\\n    string public constant Timelock_Buffer_Cannot_Be_Decreased = \\\"Timelock: buffer cannot be decreased\\\";\\n    string public constant Timelock_invalid_maxLeverage = \\\"Timelock: invalid _maxLeverage\\\";\\n    string public constant Timelock_invalid_fundingRateFactor = \\\"Timelock: invalid _fundingRateFactor\\\";\\n    string public constant Timelock_invalid_stableFundingRateFactor = \\\"Timelock: invalid _stableFundingRateFactor\\\";\\n    string public constant Timelock_invalid_minProfitBps = \\\"Timelock: invalid _minProfitBps\\\";\\n    string public constant Timelock_token_not_yet_whitelisted = \\\"Timelock: token not yet whitelisted\\\";\\n    string public constant TIMELOCK_INVALID_MAXGASPRICE = \\\"Invalid _maxGasPrice\\\";\\n    string public constant TIMELOCK_INVALID_LENGTHS = \\\"Timelock: invalid lengths\\\";\\n    string public constant TIMELOCK_MAXTOKENSUPPLY_EXCEEDED = \\\"Timelock: maxTokenSupply exceeded\\\";\\n    string public constant TIMELOCK_ACTION_ALREADY_SIGNALLED = \\\"Timelock: action already signalled\\\";\\n    string public constant TIMELOCK_ACTION_NOT_SIGNALLED = \\\"Timelock: action not signalled\\\";\\n    string public constant TIMELOCK_ACTION_TIME_NOT_YET_PASSED = \\\"Timelock: action time not yet passed\\\";\\n    string public constant TIMELOCK_INVALID_ACTION = \\\"Timelock: invalid _action\\\";\\n    string public constant TIMELOCK_INVALID_BUFFER = \\\"Timelock: invalid _buffer\\\";\\n\\n    /* PriceFeed Error Message*/\\n    string public constant PriceFeed_forbidden = \\\"PriceFeed: forbidden\\\";\\n\\n    /* USDM.sol*/\\n    string public constant USDM_FORBIDDEN = \\\"USDM: forbidden\\\";\\n\\n    /* BasePositionManagers.sol */\\n    string public constant BASEPOSITIONMANAGER_MARK_PRICE_LOWER_THAN_LIMIT      = \\\"BasePositionManager: mark price lower than limit\\\";\\n    string public constant BASEPOSITIONMANAGER_MARK_PRICE_HIGHER_THAN_LIMIT     = \\\"BasePositionManager: mark price higher than limit\\\";\\n    string public constant BASEPOSITIONMANAGER_INVALID_PATH_LENGTH              = \\\"BasePositionManager: invalid _path.length\\\";\\n    string public constant BASEPOSITIONMANAGER_INSUFFICIENT_AMOUNTOUT           = \\\"BasePositionManager: insufficient amountOut\\\";\\n    string public constant BASEPOSITIONMANAGER_MAX_GLOBAL_LONGS_EXCEEDED        = \\\"BasePositionManager: max global longs exceeded\\\";\\n    string public constant BASEPOSITIONMANAGER_MAX_GLOBAL_SHORTS_EXCEEDED       = \\\"BasePositionManager: max global shorts exceeded\\\";\\n    string public constant BASEPOSITIONMANAGER_INVALID_SENDER                   = \\\"BasePositionManager: invalid sender\\\";\\n\\n    /* PositionManager.sol */\\n    string public constant POSITIONMANAGER_INVALID_PATH_LENGTH                  = \\\"PositionManager: invalid _path.length\\\";\\n    string public constant POSITIONMANAGER_INVALID_PATH                         = \\\"PositionManager: invalid _path\\\";\\n    string public constant POSITIONMANAGER_LONG_DEPOSIT                         = \\\"PositionManager: long deposit\\\";\\n    string public constant POSITIONMANAGER_LONG_LEVERAGE_DECREASE               = \\\"PositionManager: long leverage decrease\\\";\\n    string public constant POSITIONMANAGER_FORBIDDEN                            = \\\"PositionManager: forbidden\\\";\\n\\n    /* Router.sol*/\\n    string public constant ROUTER_FORBIDDEN                                     = \\\"Router: forbidden\\\";\\n\\n    /* MlpManager.sol */\\n    string public constant MLPMANAGER_ACTION_NOT_ENABLED                        = \\\"MlpManager: action not enabled\\\";\\n    string public constant MLPMANAGER_INVALID_WEIGHT                            = \\\"MlpManager: invalid weight\\\";\\n    string public constant MLPMANAGER_INVALID_COOLDOWNDURATION                  = \\\"MlpManager: invalid _cooldownDuration\\\";\\n    string public constant MLPMANAGER_INVALID_AMOUNT                            = \\\"MlpManager: invalid _amount\\\";\\n    string public constant MLPMANAGER_INSUFFICIENT_USDM_OUTPUT                  = \\\"MlpManager: insufficient USDM output\\\";\\n    string public constant MLPMANAGER_INSUFFICIENT_MLP_OUTPUT                   = \\\"MlpManager: insufficient MLP output\\\";\\n    string public constant MLPMANAGER_INVALID_MLPAMOUNT                         = \\\"MlpManager: invalid _mlpAmount\\\";\\n    string public constant MLPMANAGER_COOLDOWN_DURATION_NOT_YET_PASSED          = \\\"MlpManager: cooldown duration not yet passed\\\";\\n    string public constant MLPMANAGER_INSUFFICIENT_OUTPUT                       = \\\"MlpManager: insufficient output\\\";\\n    string public constant MLPMANAGER_FORBIDDEN                                 = \\\"MlpManager: forbidden\\\";\\n\\n    /* ShortsTrack.sol*/\\n    string public constant SHORTSTRACKER_FORBIDDEN                              = \\\"ShortsTracker: forbidden\\\";\\n    string public constant SHORTSTRACKER_INVALID_HANDLER                        = \\\"ShortsTracker: invalid _handler\\\";\\n    string public constant SHORTSTRACKER_ALREADY_MIGRATED                       = \\\"ShortsTracker: already migrated\\\";\\n    string public constant SHORTSTRACKER_OVERFLOW                               = \\\"ShortsTracker: overflow\\\";\\n\\n    /* VaultUtils.sol*/\\n    string public constant VAULT_LOSSES_EXCEED_COLLATERAL                       = \\\"Vault: losses exceed collateral\\\";\\n    string public constant VAULT_FEES_EXCEED_COLLATERAL                         = \\\"Vault: fees exceed collateral\\\";\\n    string public constant VAULT_LIQUIDATION_FEES_EXCEED_COLLATERAL             = \\\"Vault: liquidation fees exceed collateral\\\";\\n    string public constant VAULT_MAXLEVERAGE_EXCEEDED                           = \\\"Vault: maxLeverage exceeded\\\";\\n\\n    /* VaultPriceFeed.sol*/\\n    string public constant VAULTPRICEFEED_FORBIDDEN                             = \\\"VaultPriceFeed: forbidden\\\";\\n    string public constant VAULTPRICEFEED_ADJUSTMENT_FREQUENCY_EXCEEDED         = \\\"VaultPriceFeed: adjustment frequency exceeded\\\";\\n    string public constant VAULTPRICEFEED_INVALID_ADJUSTMENTBPS                 = \\\"Vaultpricefeed: invalid _adjustmentBps\\\";\\n    string public constant VAULTPRICEFEED_INVALID_SPREADBASISPOINTS             = \\\"VaultPriceFeed: invalid _spreadBasisPoints\\\";\\n    string public constant VAULTPRICEFEED_INVALID_PRICESAMPLESPACE              = \\\"VaultPriceFeed: invalid _priceSampleSpace\\\";\\n    string internal constant VAULTPRICEFEED_INVALID_PRICE_FEED                  = \\\"VaultPriceFeed: invalid price feed\\\";\\n    string internal constant VAULTPRICEFEED_INVALID_PRICE                       = \\\"VaultPriceFeed: invalid price\\\";\\n    string internal constant CHAINLINK_FEEDS_ARE_NOT_BEING_UPDATED              = \\\"Chainlink feeds are not being updated\\\";\\n    string internal constant VAULTPRICEFEED_COULD_NOT_FETCH_PRICE               = \\\"VaultPriceFeed: could not fetch price\\\";\\n\\n    /* VaultInternal.sol*/\\n    string internal constant VAULT_POOLAMOUNT_EXCEEDED                          = \\\"Vault: poolAmount exceeded\\\";\\n    string internal constant VAULT_INSUFFICIENT_RESERVE                         = \\\"Vault: insufficient reserve\\\";\\n    string internal constant VAULT_MAX_SHORTS_EXCEEDED                          = \\\"Vault: max shorts exceeded\\\";\\n    string internal constant VAULT_POOLAMOUNT_BUFFER                            = \\\"Vault: poolAmount < buffer\\\";\\n    string internal constant VAULT_INVALID_ERRORCONTROLLER                      = \\\"Vault: invalid errorController\\\";\\n\\n    /* Router.sol */\\n    string internal constant ROUTER_INVALID_SENDER                              = \\\"Router: invalid sender\\\";\\n    string internal constant ROUTER_INVALID_PATH                                = \\\"Router: invalid _path\\\";\\n    string internal constant ROUTER_MARK_PRICE_HIGHER_THAN_LIMIT                = \\\"Router: mark price higher than limit\\\";\\n    string internal constant ROUTER_MARK_PRICE_LOWER_THAN_LIMIT                 = \\\"Router: mark price lower than limit\\\";\\n    string internal constant ROUTER_INVALID_PATH_LENGTH                         = \\\"Router: invalid _path.length\\\";\\n    string internal constant ROUTER_INSUFFICIENT_AMOUNTOUT                      = \\\"Router: insufficient amountOut\\\";\\n    string internal constant ROUTER_INVALID_PLUGIN                              = \\\"Router: invalid plugin\\\";\\n    string internal constant ROUTER_PLUGIN_NOT_APPROVED                         = \\\"Router: plugin not approved\\\";\\n\\n    /* OrderBook.sol*/\\n    string internal constant ORDERBOOK_FORBIDDEN                                = \\\"OrderBook: forbidden\\\";\\n    string internal constant ORDERBOOK_ALREADY_INITIALIZED                      = \\\"OrderBook: already initialized\\\";\\n    string internal constant ORDERBOOK_INVALID_SENDER                           = \\\"OrderBook: invalid sender\\\";\\n    string internal constant ORDERBOOK_INVALID_PATH_LENGTH                      = \\\"OrderBook: invalid _path.length\\\";\\n    string internal constant ORDERBOOK_INVALID_PATH                             = \\\"OrderBook: invalid _path\\\";\\n    string internal constant ORDERBOOK_INVALID_AMOUNTIN                         = \\\"OrderBook: invalid _amountIn\\\";\\n    string internal constant ORDERBOOK_INSUFFICIENT_EXECUTION_FEE               = \\\"OrderBook: insufficient execution fee\\\";\\n    string internal constant ORDERBOOK_ONLY_WETH_COULD_BE_WRAPPED               = \\\"OrderBook: only weth could be wrapped\\\";\\n    string internal constant ORDERBOOK_INCORRECT_VALUE_TRANSFERRED              = \\\"OrderBook: incorrect value transferred\\\";\\n    string internal constant ORDERBOOK_INCORRECT_EXECUTION_FEE_TRANSFERRED      = \\\"OrderBook: incorrect execution fee transferred\\\";\\n    string internal constant ORDERBOOK_NON_EXISTENT_ORDER                       = \\\"OrderBook: non-existent order\\\";\\n    string internal constant ORDERBOOK_INVALID_PRICE_FOR_EXECUTION              = \\\"OrderBook: invalid price for execution\\\";\\n    string internal constant ORDERBOOK_INSUFFICIENT_COLLATERAL                  = \\\"OrderBook: insufficient collateral\\\";\\n    string internal constant ORDERBOOK_INSUFFICIENT_AMOUNTOUT                   = \\\"OrderBook: insufficient amountOut\\\";\\n\\n    /* RewardRouterV2.sol */\\n    string internal constant REWARDROUTER_INVALID_AMOUNT                        = \\\"RewardRouter: invalid _amount\\\";\\n    string internal constant REWARDROUTER_INVALID_MSG_VALUE                     = \\\"RewardRouter: invalid msg.value\\\";\\n    string internal constant REWARDROUTER_ALREADY_INITIALIZED                   = \\\"RewardRouter: already initialized\\\";\\n    string internal constant REWARDROUTER_INVALID_MLPAMOUNT                     = \\\"RewardRouter: invalid _mlpAmount\\\";\\n    string internal constant REWARDROUTER_SENDER_HAS_VESTED_TOKENS              = \\\"RewardRouter: sender has vested tokens\\\";\\n    string internal constant REWARDROUTER_TRANSFER_NOT_SIGNALLED                = \\\"RewardRouter: transfer not signalled\\\";\\n    string internal constant REWARDROUTER_STAKEDMOLDTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0                      = \\\"RewardRouter: stakedMoldTracker.averageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_STAKEDMOLDTRACKER_CUMULATIVEREWARDS_GREATER_0                         = \\\"RewardRouter: stakedMoldTracker.cumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_BONUSMOLDTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0                       = \\\"RewardRouter: bonusMoldTracker.averageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_BONUSMOLDTRACKER_CUMULATIVEREWARDS_GREATER_0                          = \\\"RewardRouter: bonusMoldTracker.cumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_FEEMOLDTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0                         = \\\"RewardRouter: feeMoldTracker.averageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_FEEMOLDTRACKER_CUMULATIVEREWARDS_GREATER_0                            = \\\"RewardRouter: feeMoldTracker.cumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_MOLDVESTER_TRANSFERREDAVERAGESTAKEDAMOUNTS_GREATER_0                  = \\\"RewardRouter: MoldVester.transferredAverageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_MOLDVESTER_TRANSFERREDCUMULATIVEREWARDS_GREATER_0                     = \\\"RewardRouter: MoldVester.transferredCumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_STAKEDMLPTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0                       = \\\"RewardRouter: stakedMlpTracker.averageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_STAKEDMLPTRACKER_CUMULATIVEREWARDS_GREATER_0                          = \\\"RewardRouter: stakedMlpTracker.cumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_FEEMLPTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0                          = \\\"RewardRouter: feeMlpTracker.averageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_FEEMLPTRACKER_CUMULATIVEREWARDS_GREATER_0                             = \\\"RewardRouter: feeMlpTracker.cumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_MOLDVESTER_BALANCE_GREATER_0          = \\\"RewardRouter: MoldVester.balance > 0\\\";\\n    string internal constant REWARDROUTER_MLPVESTER_BALANCE_GREATER_0           = \\\"RewardRouter: MlpVester.balance > 0\\\";\\n\\n}\\n\",\"keccak256\":\"0x2d6c5a1032ea8a6b12bcb7fde4f03a3519d67086d21a2a9bf4ea541db73bdbc5\",\"license\":\"MIT\"},\"contracts/libraries/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x41b0da7db3e1f79b338824fed2bc4732430b78002a9d51c2cfa86ad5a12c2763\",\"license\":\"MIT\"},\"contracts/oracle/interfaces/IChainlinkFlags.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IChainlinkFlags {\\n  function getFlag(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x75d6391fbe9eea61b589f08b73b313e16f5f44cc881f1fa24e1819c20731c2bc\",\"license\":\"MIT\"},\"contracts/oracle/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IPriceFeed {\\n    function description() external view returns (string memory);\\n    function aggregator() external view returns (address);\\n    function latestAnswer() external view returns (int256);\\n    function latestRound() external view returns (uint80);\\n    function getRoundData(uint80 roundId) external view returns (uint80, int256, uint256, uint256, uint80);\\n}\\n\",\"keccak256\":\"0x58fb383854864da2632ac16487f4edf0c60f202733d3b640047d1022663c367e\",\"license\":\"MIT\"},\"contracts/oracle/interfaces/ISecondaryPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface ISecondaryPriceFeed {\\n    function getPrice(address _token, uint256 _referencePrice, bool _maximise) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x21d401a521eb021fa848c2284ada1d78f7930158c37368d3248f30df4267aa16\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052601e600090815560036001818155600292909255805463ffff00001961ff001960ff19909216909317166101001791909116905534801561004457600080fd5b5060038054600160201b600160c01b031916336401000000000217905561271f806100706000396000f3fe608060405234801561001057600080fd5b50600436106103155760003560e01c8063826e055f116101a7578063a2ad7b93116100ee578063cefe0f2111610097578063e4440e0211610071578063e4440e02146108af578063eb1c92a9146108b7578063fd34ec40146108d657610315565b8063cefe0f211461082f578063cfad57a214610855578063d694376c1461087b57610315565b8063b731dd87116100c8578063b731dd87146107c6578063b8f61105146107e3578063c2138d8c1461080957610315565b8063a2ad7b931461075c578063a39c73a31461078a578063b02a2de41461079257610315565b80639917dc74116101505780639dcb511a1161012a5780639dcb511a14610708578063a27ea3861461072e578063a28d57d81461075457610315565b80639917dc74146106975780639a0a6635146106b65780639b889380146106dc57610315565b806393f690741161018157806393f690741461064f578063971bd3961461068757806397dfade71461068f57610315565b8063826e055f146106195780638b86616c1461063f5780638c7c9e0c1461064757610315565b8063443be2091161026b578063593d9e80116102145780636fc80708116101ee5780636fc80708146105b5578063717cfe7a146105bd578063732391b4146105e357610315565b8063593d9e8014610568578063604f37e9146105705780636ce8a44b1461058f57610315565b80634b9ade47116102455780634b9ade47146104d657806356bf9de41461051457806356c8c2c11461053a57610315565b8063443be2091461047057806348cac277146104a857806349a876e4146104ce57610315565b806330536ee5116102cd5780633eba8d36116102a75780633eba8d361461042c5780633ebbc601146104605780633f0c3bb71461046857610315565b806330536ee5146103d2578063378e7bf7146103ee5780633d949c5f146103f657610315565b80632fa03b8f116102fe5780632fa03b8f146103465780632fbfe3d3146103655780632fc3a70a1461038257610315565b80631193c8091461031a57806312d43a511461033e575b600080fd5b6103226108f5565b604080516001600160a01b039092168252519081900360200190f35b610322610904565b6103636004803603602081101561035c57600080fd5b503561091b565b005b6103636004803603602081101561037b57600080fd5b5035610a4c565b6103c06004803603608081101561039857600080fd5b506001600160a01b038135169060208101351515906040810135151590606001351515610ad6565b60408051918252519081900360200190f35b6103da610b93565b604080519115158252519081900360200190f35b6103c0610ba2565b6103c06004803603606081101561040c57600080fd5b506001600160a01b03813516906020810135151590604001351515610ba8565b6103c06004803603606081101561044257600080fd5b506001600160a01b0381351690602081013590604001351515610d7a565b6103da610e3d565b6103da610e4b565b6103636004803603606081101561048657600080fd5b506001600160a01b038135811691602081013582169160409091013516610e54565b6103c0600480360360208110156104be57600080fd5b50356001600160a01b0316610f18565b610322610f2a565b610363600480360360808110156104ec57600080fd5b506001600160a01b038135811691602081013590911690604081013590606001351515610f39565b6103c06004803603602081101561052a57600080fd5b50356001600160a01b0316611013565b6103c06004803603604081101561055057600080fd5b506001600160a01b0381351690602001351515611197565b6103da6116fa565b6103636004803603602081101561058657600080fd5b5035151561170a565b6103da600480360360208110156105a557600080fd5b50356001600160a01b03166117ad565b6103c06117c2565b6103c0600480360360208110156105d357600080fd5b50356001600160a01b03166117c8565b6103c0600480360360608110156105f957600080fd5b506001600160a01b038135169060208101351515906040013515156117da565b6103636004803603602081101561062f57600080fd5b50356001600160a01b0316611826565b6103226118cd565b6103226118dc565b6103636004803603606081101561066557600080fd5b506001600160a01b0381358116916020810135821691604090910135166118eb565b6103226119af565b6103226119be565b610363600480360360208110156106ad57600080fd5b503515156119cd565b610363600480360360208110156106cc57600080fd5b50356001600160a01b0316611a65565b610363600480360360408110156106f257600080fd5b506001600160a01b038135169060200135611b0c565b6103226004803603602081101561071e57600080fd5b50356001600160a01b0316611c18565b6103c06004803603602081101561074457600080fd5b50356001600160a01b0316611c33565b610322611c45565b6103c06004803603604081101561077257600080fd5b506001600160a01b0381351690602001351515611c54565b6103c0611d4a565b6103c0600480360360608110156107a857600080fd5b506001600160a01b0381351690602081013515159060400135611d50565b610363600480360360208110156107dc57600080fd5b5035611e18565b6103da600480360360208110156107f957600080fd5b50356001600160a01b0316611ea2565b6103c06004803603602081101561081f57600080fd5b50356001600160a01b0316611eb7565b6103c06004803603602081101561084557600080fd5b50356001600160a01b0316611fb6565b6103636004803603602081101561086b57600080fd5b50356001600160a01b0316611fc8565b6103636004803603606081101561089157600080fd5b506001600160a01b038135169060208101351515906040013561208f565b610322612251565b610363600480360360208110156108cd57600080fd5b50351515612260565b610363600480360360208110156108ec57600080fd5b503515156122ff565b600a546001600160a01b031681565b60035464010000000090046001600160a01b031681565b600354604080518082019091526019815260008051602061265983398151915260208201529064010000000090046001600160a01b031633146109dc5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156109a1578181015183820152602001610989565b50505050905090810190601f1680156109ce5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600081116040518060600160405280602981526020016125976029913990610a465760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b50600155565b600354604080518082019091526019815260008051602061265983398151915260208201529064010000000090046001600160a01b03163314610ad05760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b50600255565b600354600090819062010000900460ff16610afb57610af6868686610ba8565b610b06565b610b068686866117da565b6001600160a01b0387166000908152601060205260409020549091508015610b89576001600160a01b03871660009081526011602052604090205460ff168015610b7157610b6a612710610b64610b5d82866123a0565b86906123fa565b90612453565b9250610b87565b610b84612710610b64610b5d8286612495565b92505b505b5095945050505050565b60035462010000900460ff1681565b60025481565b600080610bb58585611197565b9050828015610bc6575060035460ff165b15610c0b576000610bd686611eb7565b90508015610c0957848015610bea57508181115b15610bf3578091505b84158015610c0057508181105b15610c09578091505b505b600354610100900460ff1615610c2957610c26858286610d7a565b90505b6001600160a01b0385166000908152600f602052604090205460ff1615610d195760006c0c9f2c9cd04674edea400000008211610c7c57610c776c0c9f2c9cd04674edea4000000083612495565b610c93565b610c93826c0c9f2c9cd04674edea40000000612495565b90506002548111610cb5576c0c9f2c9cd04674edea4000000092505050610d73565b848015610cce57506c0c9f2c9cd04674edea4000000082115b15610cdb57509050610d73565b84158015610cf557506c0c9f2c9cd04674edea4000000082105b15610d0257509050610d73565b6c0c9f2c9cd04674edea4000000092505050610d73565b6001600160a01b0385166000908152600e60205260409020548415610d5b57610d52612710610b64610d4b82856123a0565b85906123fa565b92505050610d73565b610d6e612710610b64610d4b8285612495565b925050505b9392505050565b6005546000906001600160a01b0316610d94575081610d73565b600554604080517f7fece3680000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015260248201879052851515604483015291519190921691637fece368916064808301926020929190829003018186803b158015610e0957600080fd5b505afa158015610e1d573d6000803e3d6000fd5b505050506040513d6020811015610e3357600080fd5b5051949350505050565b600354610100900460ff1681565b60035460ff1681565b600354604080518082019091526019815260008051602061265983398151915260208201529064010000000090046001600160a01b03163314610ed85760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b50600680546001600160a01b039485166001600160a01b031991821617909155600780549385169382169390931790925560088054919093169116179055565b60106020526000908152604090205481565b6008546001600160a01b031681565b600354604080518082019091526019815260008051602061265983398151915260208201529064010000000090046001600160a01b03163314610fbd5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b506001600160a01b039384166000908152600c6020908152604080832080546001600160a01b0319169690971695909517909555600d855283812092909255600f90935220805460ff1916911515919091179055565b6001600160a01b038082166000908152600c6020908152604080832054815160608101909252602280835293941692831515926126c890830139906110995760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b5060008190506000816001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110da57600080fd5b505afa1580156110ee573d6000803e3d6000fd5b505050506040513d602081101561110457600080fd5b505160408051808201909152601d81527f5661756c745072696365466565643a20696e76616c696420707269636500000060208201529091506000821361118c5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b50925050505b919050565b6001600160a01b038083166000908152600c6020908152604080832054815160608101909252602280835293941692831515926126c8908301399061121d5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b506004546001600160a01b0316156113415760048054604080517f357e47fe00000000000000000000000000000000000000000000000000000000815273a438451d6458044c3c8cd2f6f31c91ac882a6d9193810193909352516000926001600160a01b039092169163357e47fe916024808301926020929190829003018186803b1580156112ab57600080fd5b505afa1580156112bf573d6000803e3d6000fd5b505050506040513d60208110156112d557600080fd5b50519050801561133f576040518060600160405280602581526020016126796025913960405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b505b6000819050600080826001600160a01b031663668a0f026040518163ffffffff1660e01b815260040160206040518083038186803b15801561138257600080fd5b505afa158015611396573d6000803e3d6000fd5b505050506040513d60208110156113ac57600080fd5b5051905060005b6001548169ffffffffffffffffffff161015611649578069ffffffffffffffffffff168269ffffffffffffffffffff16116113ed57611649565b600069ffffffffffffffffffff82166114f5576000856001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561143b57600080fd5b505afa15801561144f573d6000803e3d6000fd5b505050506040513d602081101561146557600080fd5b505160408051808201909152601d81527f5661756c745072696365466565643a20696e76616c69642070726963650000006020820152909150600082136114ed5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b509050611605565b6000856001600160a01b0316639a6fc8f58486036040518263ffffffff1660e01b8152600401808269ffffffffffffffffffff16815260200191505060a06040518083038186803b15801561154957600080fd5b505afa15801561155d573d6000803e3d6000fd5b505050506040513d60a081101561157357600080fd5b5060209081015160408051808201909152601d81527f5661756c745072696365466565643a20696e76616c6964207072696365000000928101929092529150600082136116015760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b5090505b83611611579250611641565b87801561161d57508381115b15611629579250611641565b8715801561163657508381105b1561163f578093505b505b6001016113b3565b50600082116040518060600160405280602581526020016125c060259139906116b35760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b506001600160a01b0387166000908152600d60205260409020546116ec600a82900a610b64856c0c9f2c9cd04674edea400000006123fa565b955050505050505b92915050565b6003546301000000900460ff1681565b600354604080518082019091526019815260008051602061265983398151915260208201529064010000000090046001600160a01b0316331461178e5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b506003805491151563010000000263ff00000019909216919091179055565b60116020526000908152604090205460ff1681565b60015481565b60126020526000908152604090205481565b6000806117e78585611197565b90508280156117f8575060035460ff165b15610c0b57611808858583611d50565b905060035460ff6101009091041615610c2957610c26858286610d7a565b600354604080518082019091526019815260008051602061265983398151915260208201529064010000000090046001600160a01b031633146118aa5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b50600480546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b031681565b6007546001600160a01b031681565b600354604080518082019091526019815260008051602061265983398151915260208201529064010000000090046001600160a01b0316331461196f5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b50600980546001600160a01b039485166001600160a01b031991821617909155600a805493851693821693909317909255600b8054919093169116179055565b600b546001600160a01b031681565b6009546001600160a01b031681565b600354604080518082019091526019815260008051602061265983398151915260208201529064010000000090046001600160a01b03163314611a515760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b506003805460ff1916911515919091179055565b600354604080518082019091526019815260008051602061265983398151915260208201529064010000000090046001600160a01b03163314611ae95760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b50600580546001600160a01b0319166001600160a01b0392909216919091179055565b600354604080518082019091526019815260008051602061265983398151915260208201529064010000000090046001600160a01b03163314611b905760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b5060328111156040518060600160405280602a815260200161269e602a913990611bfb5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b506001600160a01b039091166000908152600e6020526040902055565b600c602052600090815260409020546001600160a01b031681565b600e6020526000908152604090205481565b6006546001600160a01b031681565b6000806000846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015611c9257600080fd5b505afa158015611ca6573d6000803e3d6000fd5b505050506040513d6060811015611cbc57600080fd5b5080516020909101516dffffffffffffffffffffffffffff91821693501690508315611d165781611cf2576000925050506116f4565b611d0d82610b64836c0c9f2c9cd04674edea400000006123fa565b925050506116f4565b80611d26576000925050506116f4565b611d4181610b64846c0c9f2c9cd04674edea400000006123fa565b95945050505050565b60005481565b600080611d5c85611eb7565b905080611d6c5782915050610d73565b6000838211611d8457611d7f8483612495565b611d8e565b611d8e8285612495565b9050611da5600054856123fa90919063ffffffff16565b611db1826127106123fa565b1015611ddb576003546301000000900460ff1615611dd3578392505050610d73565b509050610d73565b848015611de757508382115b15611df457509050610d73565b84158015611e0157508382105b15611e0e57509050610d73565b5091949350505050565b600354604080518082019091526019815260008051602061265983398151915260208201529064010000000090046001600160a01b03163314611e9c5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b50600055565b600f6020526000908152604090205460ff1681565b6008546000906001600160a01b0383811691161415611eee57600954611ee7906001600160a01b03166001611c54565b9050611192565b6007546001600160a01b0383811691161415611f6157600954600090611f1e906001600160a01b03166001611c54565b600a54909150600090611f3b906001600160a01b03166001611c54565b9050611f586c0c9f2c9cd04674edea40000000610b6484846123fa565b92505050611192565b6006546001600160a01b0383811691161415611fae57600954600090611f91906001600160a01b03166001611c54565b600b54909150600090611f3b906001600160a01b03166001611c54565b506000919050565b600d6020526000908152604090205481565b600354604080518082019091526019815260008051602061265983398151915260208201529064010000000090046001600160a01b0316331461204c5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b50600380546001600160a01b03909216640100000000027fffffffffffffffff0000000000000000000000000000000000000000ffffffff909216919091179055565b600354604080518082019091526019815260008051602061265983398151915260208201529064010000000090046001600160a01b031633146121135760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b506001600160a01b038316600090815260126020526040902054429061213b90611c206123a0565b106040518060600160405280602d815260200161262c602d9139906121a15760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b5060148111156040518060600160405280602681526020016125e5602691399061220c5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b506001600160a01b03929092166000908152601160209081526040808320805460ff191694151594909417909355601081528282209390935560129092529020429055565b6004546001600160a01b031681565b600354604080518082019091526019815260008051602061265983398151915260208201529064010000000090046001600160a01b031633146122e45760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b50600380549115156101000261ff0019909216919091179055565b600354604080518082019091526019815260008051602061265983398151915260208201529064010000000090046001600160a01b031633146123835760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b5060038054911515620100000262ff000019909216919091179055565b600082820183811015610d73576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082612409575060006116f4565b8282028284828161241657fe5b0414610d735760405162461bcd60e51b815260040180806020018281038252602181526020018061260b6021913960400191505060405180910390fd5b6000610d7383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506124d7565b6000610d7383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061253c565b600081836125265760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b50600083858161253257fe5b0495945050505050565b6000818484111561258e5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b50505090039056fe5661756c745072696365466565643a20696e76616c6964205f707269636553616d706c6553706163655661756c745072696365466565643a20636f756c64206e6f742066657463682070726963655661756c747072696365666565643a20696e76616c6964205f61646a7573746d656e74427073536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775661756c745072696365466565643a2061646a7573746d656e74206672657175656e63792065786365656465645661756c745072696365466565643a20666f7262696464656e00000000000000436861696e6c696e6b20666565647320617265206e6f74206265696e6720757064617465645661756c745072696365466565643a20696e76616c6964205f7370726561644261736973506f696e74735661756c745072696365466565643a20696e76616c69642070726963652066656564a26469706673582212204731910159a5e84a533f58c149cfa9adb119a71afc036cd574fddd9d464df4ee64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103155760003560e01c8063826e055f116101a7578063a2ad7b93116100ee578063cefe0f2111610097578063e4440e0211610071578063e4440e02146108af578063eb1c92a9146108b7578063fd34ec40146108d657610315565b8063cefe0f211461082f578063cfad57a214610855578063d694376c1461087b57610315565b8063b731dd87116100c8578063b731dd87146107c6578063b8f61105146107e3578063c2138d8c1461080957610315565b8063a2ad7b931461075c578063a39c73a31461078a578063b02a2de41461079257610315565b80639917dc74116101505780639dcb511a1161012a5780639dcb511a14610708578063a27ea3861461072e578063a28d57d81461075457610315565b80639917dc74146106975780639a0a6635146106b65780639b889380146106dc57610315565b806393f690741161018157806393f690741461064f578063971bd3961461068757806397dfade71461068f57610315565b8063826e055f146106195780638b86616c1461063f5780638c7c9e0c1461064757610315565b8063443be2091161026b578063593d9e80116102145780636fc80708116101ee5780636fc80708146105b5578063717cfe7a146105bd578063732391b4146105e357610315565b8063593d9e8014610568578063604f37e9146105705780636ce8a44b1461058f57610315565b80634b9ade47116102455780634b9ade47146104d657806356bf9de41461051457806356c8c2c11461053a57610315565b8063443be2091461047057806348cac277146104a857806349a876e4146104ce57610315565b806330536ee5116102cd5780633eba8d36116102a75780633eba8d361461042c5780633ebbc601146104605780633f0c3bb71461046857610315565b806330536ee5146103d2578063378e7bf7146103ee5780633d949c5f146103f657610315565b80632fa03b8f116102fe5780632fa03b8f146103465780632fbfe3d3146103655780632fc3a70a1461038257610315565b80631193c8091461031a57806312d43a511461033e575b600080fd5b6103226108f5565b604080516001600160a01b039092168252519081900360200190f35b610322610904565b6103636004803603602081101561035c57600080fd5b503561091b565b005b6103636004803603602081101561037b57600080fd5b5035610a4c565b6103c06004803603608081101561039857600080fd5b506001600160a01b038135169060208101351515906040810135151590606001351515610ad6565b60408051918252519081900360200190f35b6103da610b93565b604080519115158252519081900360200190f35b6103c0610ba2565b6103c06004803603606081101561040c57600080fd5b506001600160a01b03813516906020810135151590604001351515610ba8565b6103c06004803603606081101561044257600080fd5b506001600160a01b0381351690602081013590604001351515610d7a565b6103da610e3d565b6103da610e4b565b6103636004803603606081101561048657600080fd5b506001600160a01b038135811691602081013582169160409091013516610e54565b6103c0600480360360208110156104be57600080fd5b50356001600160a01b0316610f18565b610322610f2a565b610363600480360360808110156104ec57600080fd5b506001600160a01b038135811691602081013590911690604081013590606001351515610f39565b6103c06004803603602081101561052a57600080fd5b50356001600160a01b0316611013565b6103c06004803603604081101561055057600080fd5b506001600160a01b0381351690602001351515611197565b6103da6116fa565b6103636004803603602081101561058657600080fd5b5035151561170a565b6103da600480360360208110156105a557600080fd5b50356001600160a01b03166117ad565b6103c06117c2565b6103c0600480360360208110156105d357600080fd5b50356001600160a01b03166117c8565b6103c0600480360360608110156105f957600080fd5b506001600160a01b038135169060208101351515906040013515156117da565b6103636004803603602081101561062f57600080fd5b50356001600160a01b0316611826565b6103226118cd565b6103226118dc565b6103636004803603606081101561066557600080fd5b506001600160a01b0381358116916020810135821691604090910135166118eb565b6103226119af565b6103226119be565b610363600480360360208110156106ad57600080fd5b503515156119cd565b610363600480360360208110156106cc57600080fd5b50356001600160a01b0316611a65565b610363600480360360408110156106f257600080fd5b506001600160a01b038135169060200135611b0c565b6103226004803603602081101561071e57600080fd5b50356001600160a01b0316611c18565b6103c06004803603602081101561074457600080fd5b50356001600160a01b0316611c33565b610322611c45565b6103c06004803603604081101561077257600080fd5b506001600160a01b0381351690602001351515611c54565b6103c0611d4a565b6103c0600480360360608110156107a857600080fd5b506001600160a01b0381351690602081013515159060400135611d50565b610363600480360360208110156107dc57600080fd5b5035611e18565b6103da600480360360208110156107f957600080fd5b50356001600160a01b0316611ea2565b6103c06004803603602081101561081f57600080fd5b50356001600160a01b0316611eb7565b6103c06004803603602081101561084557600080fd5b50356001600160a01b0316611fb6565b6103636004803603602081101561086b57600080fd5b50356001600160a01b0316611fc8565b6103636004803603606081101561089157600080fd5b506001600160a01b038135169060208101351515906040013561208f565b610322612251565b610363600480360360208110156108cd57600080fd5b50351515612260565b610363600480360360208110156108ec57600080fd5b503515156122ff565b600a546001600160a01b031681565b60035464010000000090046001600160a01b031681565b600354604080518082019091526019815260008051602061265983398151915260208201529064010000000090046001600160a01b031633146109dc5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156109a1578181015183820152602001610989565b50505050905090810190601f1680156109ce5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600081116040518060600160405280602981526020016125976029913990610a465760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b50600155565b600354604080518082019091526019815260008051602061265983398151915260208201529064010000000090046001600160a01b03163314610ad05760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b50600255565b600354600090819062010000900460ff16610afb57610af6868686610ba8565b610b06565b610b068686866117da565b6001600160a01b0387166000908152601060205260409020549091508015610b89576001600160a01b03871660009081526011602052604090205460ff168015610b7157610b6a612710610b64610b5d82866123a0565b86906123fa565b90612453565b9250610b87565b610b84612710610b64610b5d8286612495565b92505b505b5095945050505050565b60035462010000900460ff1681565b60025481565b600080610bb58585611197565b9050828015610bc6575060035460ff165b15610c0b576000610bd686611eb7565b90508015610c0957848015610bea57508181115b15610bf3578091505b84158015610c0057508181105b15610c09578091505b505b600354610100900460ff1615610c2957610c26858286610d7a565b90505b6001600160a01b0385166000908152600f602052604090205460ff1615610d195760006c0c9f2c9cd04674edea400000008211610c7c57610c776c0c9f2c9cd04674edea4000000083612495565b610c93565b610c93826c0c9f2c9cd04674edea40000000612495565b90506002548111610cb5576c0c9f2c9cd04674edea4000000092505050610d73565b848015610cce57506c0c9f2c9cd04674edea4000000082115b15610cdb57509050610d73565b84158015610cf557506c0c9f2c9cd04674edea4000000082105b15610d0257509050610d73565b6c0c9f2c9cd04674edea4000000092505050610d73565b6001600160a01b0385166000908152600e60205260409020548415610d5b57610d52612710610b64610d4b82856123a0565b85906123fa565b92505050610d73565b610d6e612710610b64610d4b8285612495565b925050505b9392505050565b6005546000906001600160a01b0316610d94575081610d73565b600554604080517f7fece3680000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015260248201879052851515604483015291519190921691637fece368916064808301926020929190829003018186803b158015610e0957600080fd5b505afa158015610e1d573d6000803e3d6000fd5b505050506040513d6020811015610e3357600080fd5b5051949350505050565b600354610100900460ff1681565b60035460ff1681565b600354604080518082019091526019815260008051602061265983398151915260208201529064010000000090046001600160a01b03163314610ed85760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b50600680546001600160a01b039485166001600160a01b031991821617909155600780549385169382169390931790925560088054919093169116179055565b60106020526000908152604090205481565b6008546001600160a01b031681565b600354604080518082019091526019815260008051602061265983398151915260208201529064010000000090046001600160a01b03163314610fbd5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b506001600160a01b039384166000908152600c6020908152604080832080546001600160a01b0319169690971695909517909555600d855283812092909255600f90935220805460ff1916911515919091179055565b6001600160a01b038082166000908152600c6020908152604080832054815160608101909252602280835293941692831515926126c890830139906110995760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b5060008190506000816001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110da57600080fd5b505afa1580156110ee573d6000803e3d6000fd5b505050506040513d602081101561110457600080fd5b505160408051808201909152601d81527f5661756c745072696365466565643a20696e76616c696420707269636500000060208201529091506000821361118c5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b50925050505b919050565b6001600160a01b038083166000908152600c6020908152604080832054815160608101909252602280835293941692831515926126c8908301399061121d5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b506004546001600160a01b0316156113415760048054604080517f357e47fe00000000000000000000000000000000000000000000000000000000815273a438451d6458044c3c8cd2f6f31c91ac882a6d9193810193909352516000926001600160a01b039092169163357e47fe916024808301926020929190829003018186803b1580156112ab57600080fd5b505afa1580156112bf573d6000803e3d6000fd5b505050506040513d60208110156112d557600080fd5b50519050801561133f576040518060600160405280602581526020016126796025913960405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b505b6000819050600080826001600160a01b031663668a0f026040518163ffffffff1660e01b815260040160206040518083038186803b15801561138257600080fd5b505afa158015611396573d6000803e3d6000fd5b505050506040513d60208110156113ac57600080fd5b5051905060005b6001548169ffffffffffffffffffff161015611649578069ffffffffffffffffffff168269ffffffffffffffffffff16116113ed57611649565b600069ffffffffffffffffffff82166114f5576000856001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561143b57600080fd5b505afa15801561144f573d6000803e3d6000fd5b505050506040513d602081101561146557600080fd5b505160408051808201909152601d81527f5661756c745072696365466565643a20696e76616c69642070726963650000006020820152909150600082136114ed5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b509050611605565b6000856001600160a01b0316639a6fc8f58486036040518263ffffffff1660e01b8152600401808269ffffffffffffffffffff16815260200191505060a06040518083038186803b15801561154957600080fd5b505afa15801561155d573d6000803e3d6000fd5b505050506040513d60a081101561157357600080fd5b5060209081015160408051808201909152601d81527f5661756c745072696365466565643a20696e76616c6964207072696365000000928101929092529150600082136116015760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b5090505b83611611579250611641565b87801561161d57508381115b15611629579250611641565b8715801561163657508381105b1561163f578093505b505b6001016113b3565b50600082116040518060600160405280602581526020016125c060259139906116b35760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b506001600160a01b0387166000908152600d60205260409020546116ec600a82900a610b64856c0c9f2c9cd04674edea400000006123fa565b955050505050505b92915050565b6003546301000000900460ff1681565b600354604080518082019091526019815260008051602061265983398151915260208201529064010000000090046001600160a01b0316331461178e5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b506003805491151563010000000263ff00000019909216919091179055565b60116020526000908152604090205460ff1681565b60015481565b60126020526000908152604090205481565b6000806117e78585611197565b90508280156117f8575060035460ff165b15610c0b57611808858583611d50565b905060035460ff6101009091041615610c2957610c26858286610d7a565b600354604080518082019091526019815260008051602061265983398151915260208201529064010000000090046001600160a01b031633146118aa5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b50600480546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b031681565b6007546001600160a01b031681565b600354604080518082019091526019815260008051602061265983398151915260208201529064010000000090046001600160a01b0316331461196f5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b50600980546001600160a01b039485166001600160a01b031991821617909155600a805493851693821693909317909255600b8054919093169116179055565b600b546001600160a01b031681565b6009546001600160a01b031681565b600354604080518082019091526019815260008051602061265983398151915260208201529064010000000090046001600160a01b03163314611a515760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b506003805460ff1916911515919091179055565b600354604080518082019091526019815260008051602061265983398151915260208201529064010000000090046001600160a01b03163314611ae95760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b50600580546001600160a01b0319166001600160a01b0392909216919091179055565b600354604080518082019091526019815260008051602061265983398151915260208201529064010000000090046001600160a01b03163314611b905760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b5060328111156040518060600160405280602a815260200161269e602a913990611bfb5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b506001600160a01b039091166000908152600e6020526040902055565b600c602052600090815260409020546001600160a01b031681565b600e6020526000908152604090205481565b6006546001600160a01b031681565b6000806000846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015611c9257600080fd5b505afa158015611ca6573d6000803e3d6000fd5b505050506040513d6060811015611cbc57600080fd5b5080516020909101516dffffffffffffffffffffffffffff91821693501690508315611d165781611cf2576000925050506116f4565b611d0d82610b64836c0c9f2c9cd04674edea400000006123fa565b925050506116f4565b80611d26576000925050506116f4565b611d4181610b64846c0c9f2c9cd04674edea400000006123fa565b95945050505050565b60005481565b600080611d5c85611eb7565b905080611d6c5782915050610d73565b6000838211611d8457611d7f8483612495565b611d8e565b611d8e8285612495565b9050611da5600054856123fa90919063ffffffff16565b611db1826127106123fa565b1015611ddb576003546301000000900460ff1615611dd3578392505050610d73565b509050610d73565b848015611de757508382115b15611df457509050610d73565b84158015611e0157508382105b15611e0e57509050610d73565b5091949350505050565b600354604080518082019091526019815260008051602061265983398151915260208201529064010000000090046001600160a01b03163314611e9c5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b50600055565b600f6020526000908152604090205460ff1681565b6008546000906001600160a01b0383811691161415611eee57600954611ee7906001600160a01b03166001611c54565b9050611192565b6007546001600160a01b0383811691161415611f6157600954600090611f1e906001600160a01b03166001611c54565b600a54909150600090611f3b906001600160a01b03166001611c54565b9050611f586c0c9f2c9cd04674edea40000000610b6484846123fa565b92505050611192565b6006546001600160a01b0383811691161415611fae57600954600090611f91906001600160a01b03166001611c54565b600b54909150600090611f3b906001600160a01b03166001611c54565b506000919050565b600d6020526000908152604090205481565b600354604080518082019091526019815260008051602061265983398151915260208201529064010000000090046001600160a01b0316331461204c5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b50600380546001600160a01b03909216640100000000027fffffffffffffffff0000000000000000000000000000000000000000ffffffff909216919091179055565b600354604080518082019091526019815260008051602061265983398151915260208201529064010000000090046001600160a01b031633146121135760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b506001600160a01b038316600090815260126020526040902054429061213b90611c206123a0565b106040518060600160405280602d815260200161262c602d9139906121a15760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b5060148111156040518060600160405280602681526020016125e5602691399061220c5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b506001600160a01b03929092166000908152601160209081526040808320805460ff191694151594909417909355601081528282209390935560129092529020429055565b6004546001600160a01b031681565b600354604080518082019091526019815260008051602061265983398151915260208201529064010000000090046001600160a01b031633146122e45760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b50600380549115156101000261ff0019909216919091179055565b600354604080518082019091526019815260008051602061265983398151915260208201529064010000000090046001600160a01b031633146123835760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b5060038054911515620100000262ff000019909216919091179055565b600082820183811015610d73576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082612409575060006116f4565b8282028284828161241657fe5b0414610d735760405162461bcd60e51b815260040180806020018281038252602181526020018061260b6021913960400191505060405180910390fd5b6000610d7383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506124d7565b6000610d7383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061253c565b600081836125265760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b50600083858161253257fe5b0495945050505050565b6000818484111561258e5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a1578181015183820152602001610989565b50505090039056fe5661756c745072696365466565643a20696e76616c6964205f707269636553616d706c6553706163655661756c745072696365466565643a20636f756c64206e6f742066657463682070726963655661756c747072696365666565643a20696e76616c6964205f61646a7573746d656e74427073536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775661756c745072696365466565643a2061646a7573746d656e74206672657175656e63792065786365656465645661756c745072696365466565643a20666f7262696464656e00000000000000436861696e6c696e6b20666565647320617265206e6f74206265696e6720757064617465645661756c745072696365466565643a20696e76616c6964205f7370726561644261736973506f696e74735661756c745072696365466565643a20696e76616c69642070726963652066656564a26469706673582212204731910159a5e84a533f58c149cfa9adb119a71afc036cd574fddd9d464df4ee64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12634,
        "contract": "contracts/core/VaultPriceFeed.sol:VaultPriceFeed",
        "label": "spreadThresholdBasisPoints",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 12637,
        "contract": "contracts/core/VaultPriceFeed.sol:VaultPriceFeed",
        "label": "priceSampleSpace",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 12640,
        "contract": "contracts/core/VaultPriceFeed.sol:VaultPriceFeed",
        "label": "maxStrictPriceDeviation",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 12643,
        "contract": "contracts/core/VaultPriceFeed.sol:VaultPriceFeed",
        "label": "isAmmEnabled",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 12646,
        "contract": "contracts/core/VaultPriceFeed.sol:VaultPriceFeed",
        "label": "isSecondaryPriceEnabled",
        "offset": 1,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 12649,
        "contract": "contracts/core/VaultPriceFeed.sol:VaultPriceFeed",
        "label": "useV2Pricing",
        "offset": 2,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 12652,
        "contract": "contracts/core/VaultPriceFeed.sol:VaultPriceFeed",
        "label": "favorPrimaryPrice",
        "offset": 3,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 12654,
        "contract": "contracts/core/VaultPriceFeed.sol:VaultPriceFeed",
        "label": "gov",
        "offset": 4,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 12656,
        "contract": "contracts/core/VaultPriceFeed.sol:VaultPriceFeed",
        "label": "chainlinkFlags",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 12658,
        "contract": "contracts/core/VaultPriceFeed.sol:VaultPriceFeed",
        "label": "secondaryPriceFeed",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 12660,
        "contract": "contracts/core/VaultPriceFeed.sol:VaultPriceFeed",
        "label": "btc",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 12662,
        "contract": "contracts/core/VaultPriceFeed.sol:VaultPriceFeed",
        "label": "eth",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 12664,
        "contract": "contracts/core/VaultPriceFeed.sol:VaultPriceFeed",
        "label": "bnb",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 12666,
        "contract": "contracts/core/VaultPriceFeed.sol:VaultPriceFeed",
        "label": "bnbBusd",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 12668,
        "contract": "contracts/core/VaultPriceFeed.sol:VaultPriceFeed",
        "label": "ethBnb",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 12670,
        "contract": "contracts/core/VaultPriceFeed.sol:VaultPriceFeed",
        "label": "btcBnb",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 12674,
        "contract": "contracts/core/VaultPriceFeed.sol:VaultPriceFeed",
        "label": "priceFeeds",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 12678,
        "contract": "contracts/core/VaultPriceFeed.sol:VaultPriceFeed",
        "label": "priceDecimals",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12682,
        "contract": "contracts/core/VaultPriceFeed.sol:VaultPriceFeed",
        "label": "spreadBasisPoints",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12686,
        "contract": "contracts/core/VaultPriceFeed.sol:VaultPriceFeed",
        "label": "strictStableTokens",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12691,
        "contract": "contracts/core/VaultPriceFeed.sol:VaultPriceFeed",
        "label": "adjustmentBasisPoints",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12696,
        "contract": "contracts/core/VaultPriceFeed.sol:VaultPriceFeed",
        "label": "isAdjustmentAdditive",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12700,
        "contract": "contracts/core/VaultPriceFeed.sol:VaultPriceFeed",
        "label": "lastAdjustmentTimings",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}