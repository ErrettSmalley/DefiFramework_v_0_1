{
  "address": "0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdm",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minExecutionFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minPurchaseTokenAmountUsd",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minExecutionFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minPurchaseTokenAmountUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minExecutionFee",
          "type": "uint256"
        }
      ],
      "name": "setMinExecutionFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minPurchaseTokenAmountUsd",
          "type": "uint256"
        }
      ],
      "name": "setMinPurchaseTokenAmountUsd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdm",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1a625ac0c8e8abd19aee16c8ec2036361c3dcce5cfec23f2a89fa5b2da955f3d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82",
    "transactionIndex": 0,
    "gasUsed": "545416",
    "logsBloom": "0x
    "blockHash": "0xa157a860b7441fbbe571be2890b202e98ee599f8e973bf7efb81d95d8f157a45",
    "transactionHash": "0x1a625ac0c8e8abd19aee16c8ec2036361c3dcce5cfec23f2a89fa5b2da955f3d",
    "logs": [],
    "blockNumber": 15,
    "cumulativeGasUsed": "545416",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1fb095c2a8736afe292bad1aa4a33281",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minExecutionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPurchaseTokenAmountUsd\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minExecutionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPurchaseTokenAmountUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minExecutionFee\",\"type\":\"uint256\"}],\"name\":\"setMinExecutionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPurchaseTokenAmountUsd\",\"type\":\"uint256\"}],\"name\":\"setMinPurchaseTokenAmountUsd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/OrderBook.sol\":\"OrderBook\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/core/OrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"./settings/OrderBookSettings.sol\\\";\\ncontract OrderBook is OrderBookSettings {\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n    function initialize(address _router, address _vault, address _weth, address _usdm, uint256 _minExecutionFee, uint256 _minPurchaseTokenAmountUsd) external onlyGov {\\n        require(!isInitialized, Errors.ORDERBOOK_ALREADY_INITIALIZED);\\n        isInitialized = true;\\n        router = _router;\\n        vault = _vault;\\n        weth = _weth;\\n        usdm = _usdm;\\n        minExecutionFee = _minExecutionFee;\\n        minPurchaseTokenAmountUsd = _minPurchaseTokenAmountUsd;\\n        emit Events.Initialize(_router, _vault, _weth, _usdm, _minExecutionFee, _minPurchaseTokenAmountUsd);\\n    }\\n    receive() external payable {\\n        require(msg.sender == weth, Errors.ORDERBOOK_INVALID_SENDER);\\n    }\\n}\\n\",\"keccak256\":\"0x4d31b0cf7caa77cbbde164e4228c3fd8385828921e5b853671aa3deb0657d558\",\"license\":\"MIT\"},\"contracts/core/interfaces/IOrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IOrderBook {\\n//\\tfunction getSwapOrder(address _account, uint256 _orderIndex) external view returns (address path0, address path1, address path2, uint256 amountIn, uint256 minOut, uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n//  function getIncreaseOrder(address _account, uint256 _orderIndex) external view returns (address purchaseToken, uint256 purchaseTokenAmount, address collateralToken, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee);\\n//  function getDecreaseOrder(address _account, uint256 _orderIndex) external view returns (address collateralToken, uint256 collateralDelta, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee);\\n//    function executeSwapOrder(address, uint256, address payable) external;\\n//    function executeDecreaseOrder(address, uint256, address payable) external;\\n//    function executeIncreaseOrder(address, uint256, address payable) external;\\n}\\n\",\"keccak256\":\"0x51cc5f804b35961b1ddd0e0909a90eab34c523f6ec56b56e84ab51203c8bd28c\",\"license\":\"MIT\"},\"contracts/core/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IRouter {\\n    function addPlugin(address _plugin) external;\\n    function pluginTransfer(address _token, address _account, address _receiver, uint256 _amount) external;\\n    function pluginIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function pluginDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n    function swap(address[] memory _path, uint256 _amountIn, uint256 _minOut, address _receiver) external;\\n}\\n\",\"keccak256\":\"0x68ee3ea5df5884cf76de6c0bbbf463926ffc511658a81ef6f467482300d2977a\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"./IVaultUtils.sol\\\";\\ninterface IVault {\\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\\n    function directPoolDeposit(address _token) external;\\n    function buyUSDM(address _token, address _receiver) external returns (uint256);\\n    function sellUSDM(address _token, address _receiver) external returns (uint256);\\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external returns (uint256);\\n    function increasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function liquidatePosition(address _account, address _collateralToken, address _indexToken, bool _isLong, address _feeReceiver) external;\\n\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\\n    function priceFeed() external view returns (address);\\n    function fundingRateFactor() external view returns (uint256);\\n    function stableFundingRateFactor() external view returns (uint256);\\n    function cumulativeFundingRates(address _token) external view returns (uint256);\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdmDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n    function liquidationFeeUsd() external view returns (uint256);\\n    function taxBasisPoints() external view returns (uint256);\\n    function stableTaxBasisPoints() external view returns (uint256);\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n    function swapFeeBasisPoints() external view returns (uint256);\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n    function marginFeeBasisPoints() external view returns (uint256);\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n    function whitelistedTokens(address _token) external view returns (bool);\\n    function stableTokens(address _token) external view returns (bool);\\n    function shortableTokens(address _token) external view returns (bool);\\n    function feeReserves(address _token) external view returns (uint256);\\n    function globalShortSizes(address _token) external view returns (uint256);\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\\n    function tokenDecimals(address _token) external view returns (uint256);\\n    function tokenWeights(address _token) external view returns (uint256);\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n    function poolAmounts(address _token) external view returns (uint256);\\n    function bufferAmounts(address _token) external view returns (uint256);\\n    function reservedAmounts(address _token) external view returns (uint256);\\n    function usdmAmounts(address _token) external view returns (uint256);\\n    function maxUsdmAmounts(address _token) external view returns (uint256);\\n    function getRedemptionAmount(address _token, uint256 _usdmAmount) external view returns (uint256);\\n    function getMaxPrice(address _token) external view returns (uint256);\\n    function getMinPrice(address _token) external view returns (uint256);\\n    function getDelta(address _indexToken, uint256 _size, uint256 _averagePrice, bool _isLong, uint256 _lastIncreasedTime) external view returns (bool, uint256);\\n    function getPosition(address _account, address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256);\\n    function isInitialized() external view returns (bool);\\n    function isSwapEnabled() external view returns (bool);\\n    function isLeverageEnabled() external view returns (bool);\\n    function router() external view returns (address);\\n    function usdm() external view returns (address);\\n    function gov() external view returns (address);\\n    function whitelistedTokenCount() external view returns (uint256);\\n    function maxLeverage() external view returns (uint256);\\n    function minProfitTime() external view returns (uint256);\\n    function hasDynamicFees() external view returns (bool);\\n    function fundingInterval() external view returns (uint256);\\n    function totalTokenWeights() external view returns (uint256);\\n    function getTargetUsdmAmount(address _token) external view returns (uint256);\\n    function inManagerMode() external view returns (bool);\\n    function inPrivateLiquidationMode() external view returns (bool);\\n    function maxGasPrice() external view returns (uint256);\\n    function approvedRouters(address _account, address _router) external view returns (bool);\\n    function isLiquidator(address _account) external view returns (bool);\\n    function isManager(address _account) external view returns (bool);\\n    function minProfitBasisPoints(address _token) external view returns (uint256);\\n    function tokenBalances(address _token) external view returns (uint256);\\n    function lastFundingTimes(address _token) external view returns (uint256);\\n\\n    function setMaxLeverage(uint256 _maxLeverage) external;\\n    function setInManagerMode(bool _inManagerMode) external;\\n    function setManager(address _manager, bool _isManager) external;\\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\\n    function setUsdmAmount(address _token, uint256 _amount) external;\\n    function setBufferAmount(address _token, uint256 _amount) external;\\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external;\\n    function setLiquidator(address _liquidator, bool _isActive) external;\\n    function setFundingRate(uint256 _fundingInterval, uint256 _fundingRateFactor, uint256 _stableFundingRateFactor) external;\\n    function setFees(uint256 _taxBasisPoints, uint256 _stableTaxBasisPoints, uint256 _mintBurnFeeBasisPoints, uint256 _swapFeeBasisPoints, uint256 _stableSwapFeeBasisPoints, uint256 _marginFeeBasisPoints, uint256 _liquidationFeeUsd, uint256 _minProfitTime, bool _hasDynamicFees) external;\\n    function setTokenConfig(address _token, uint256 _tokenDecimals, uint256 _redemptionBps, uint256 _minProfitBps, uint256 _maxUsdmAmount, bool _isStable, bool _isShortable) external;\\n    function setPriceFeed(address _priceFeed) external;\\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\\n    function setError(uint256 _errorCode, string calldata _error) external;\\n}\\n\",\"keccak256\":\"0x6865fea6348cbcd8eb8c91bbf6fe38d9c7128778ed80b97e6a407f55bf0fbe81\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IVaultUtils {\\n    function updateCumulativeFundingRate(address _collateralToken, address _indexToken) external returns (bool);\\n    function validateIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external view;\\n    function validateDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external view;\\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function getEntryFundingRate(address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256);\\n    function getPositionFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta) external view returns (uint256);\\n    function getFundingFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _size, uint256 _entryFundingRate) external view returns (uint256);\\n    function getBuyUsdmFeeBasisPoints(address _token, uint256 _usdmAmount) external view returns (uint256);\\n    function getSellUsdmFeeBasisPoints(address _token, uint256 _usdmAmount) external view returns (uint256);\\n    function getSwapFeeBasisPoints(address _tokenIn, address _tokenOut, uint256 _usdmAmount) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdmDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x938c049c684992effbeeb9aa3b069331224e0cfdf95e97d4aaf3d8fbd99b51b8\",\"license\":\"MIT\"},\"contracts/core/settings/OrderBookSettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"../storage/OrderBookStorage.sol\\\";\\nabstract contract OrderBookSettings is OrderBookStorage {\\n    function setMinExecutionFee(uint256 _minExecutionFee) external onlyGov {\\n        minExecutionFee = _minExecutionFee;\\n        emit Events.UpdateMinExecutionFee(_minExecutionFee);\\n    }\\n    function setMinPurchaseTokenAmountUsd(uint256 _minPurchaseTokenAmountUsd) external onlyGov {\\n        minPurchaseTokenAmountUsd = _minPurchaseTokenAmountUsd;\\n        emit Events.UpdateMinPurchaseTokenAmountUsd(_minPurchaseTokenAmountUsd);\\n    }\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n        emit Events.UpdateGov(_gov);\\n    }\\n\\n//    function createSwapOrder(address[] memory _path, uint256 _amountIn, uint256 _minOut, uint256 _triggerRatio, bool _triggerAboveThreshold, uint256 _executionFee, bool _shouldWrap, bool _shouldUnwrap) external payable nonReentrant {\\n//        require(_path.length == 2 || _path.length == 3, Errors.ORDERBOOK_INVALID_PATH_LENGTH);\\n//        require(_path[0] != _path[_path.length - 1], Errors.ORDERBOOK_INVALID_PATH);\\n//        require(_amountIn > 0, Errors.ORDERBOOK_INVALID_AMOUNTIN);\\n//        require(_executionFee >= minExecutionFee, Errors.ORDERBOOK_INSUFFICIENT_EXECUTION_FEE);\\n//        _transferInETH();\\n//        if (_shouldWrap) {\\n//            require(_path[0] == weth, Errors.ORDERBOOK_ONLY_WETH_COULD_BE_WRAPPED);\\n//            require(msg.value == _executionFee.add(_amountIn), Errors.ORDERBOOK_INCORRECT_VALUE_TRANSFERRED);\\n//        } else {\\n//            require(msg.value == _executionFee, Errors.ORDERBOOK_INCORRECT_EXECUTION_FEE_TRANSFERRED);\\n//            IRouter(router).pluginTransfer(_path[0], msg.sender, address(this), _amountIn);\\n//        }\\n//        _createSwapOrder(msg.sender, _path, _amountIn, _minOut, _triggerRatio, _triggerAboveThreshold, _shouldUnwrap, _executionFee);\\n//    }\\n//    function executeSwapOrder(address _account, uint256 _orderIndex, address payable _feeReceiver) override external nonReentrant {\\n//        DataTypes.SwapOrder memory order = swapOrders[_account][_orderIndex];\\n//        require(order.account != address(0), Errors.ORDERBOOK_NON_EXISTENT_ORDER);\\n//        if (order.triggerAboveThreshold) {\\n//            require(\\n//                validateSwapOrderPriceWithTriggerAboveThreshold(order.path, order.triggerRatio),\\n//                Errors.ORDERBOOK_INVALID_PRICE_FOR_EXECUTION\\n//            );\\n//        }\\n//        delete swapOrders[_account][_orderIndex];\\n//        IERC20(order.path[0]).safeTransfer(vault, order.amountIn);\\n//        uint256 _amountOut;\\n//        if (order.path[order.path.length - 1] == weth && order.shouldUnwrap) {\\n//            _amountOut = _swap(order.path, order.minOut, address(this));\\n//            _transferOutETH(_amountOut, payable(order.account));\\n//        } else {\\n//            _amountOut = _swap(order.path, order.minOut, order.account);\\n//        }\\n//        _transferOutETH(order.executionFee, _feeReceiver);\\n//        emit Events.ExecuteSwapOrder(_account, _orderIndex, order.path, order.amountIn, order.minOut, _amountOut, order.triggerRatio, order.triggerAboveThreshold, order.shouldUnwrap, order.executionFee);\\n//    }\\n//    function updateSwapOrder(uint256 _orderIndex, uint256 _minOut, uint256 _triggerRatio, bool _triggerAboveThreshold) external nonReentrant {\\n//        DataTypes.SwapOrder storage order = swapOrders[msg.sender][_orderIndex];\\n//        require(order.account != address(0), Errors.ORDERBOOK_NON_EXISTENT_ORDER);\\n//        order.minOut = _minOut;\\n//        order.triggerRatio = _triggerRatio;\\n//        order.triggerAboveThreshold = _triggerAboveThreshold;\\n//        emit Events.UpdateSwapOrder(msg.sender, _orderIndex, order.path, order.amountIn, _minOut, _triggerRatio, _triggerAboveThreshold, order.shouldUnwrap, order.executionFee);\\n//    }\\n//    function cancelSwapOrder(uint256 _orderIndex) public nonReentrant {\\n//        DataTypes.SwapOrder memory order = swapOrders[msg.sender][_orderIndex];\\n//        require(order.account != address(0), Errors.ORDERBOOK_NON_EXISTENT_ORDER);\\n//        delete swapOrders[msg.sender][_orderIndex];\\n//        if (order.path[0] == weth) {\\n//            _transferOutETH(order.executionFee.add(order.amountIn), msg.sender);\\n//        } else {\\n//            IERC20(order.path[0]).safeTransfer(msg.sender, order.amountIn);\\n//            _transferOutETH(order.executionFee, msg.sender);\\n//        }\\n//        emit Events.CancelSwapOrder(msg.sender, _orderIndex, order.path, order.amountIn, order.minOut, order.triggerRatio, order.triggerAboveThreshold, order.shouldUnwrap, order.executionFee);\\n//    }\\n//\\n//    function createIncreaseOrder(address[] memory _path, uint256 _amountIn, address _indexToken, uint256 _minOut, uint256 _sizeDelta, address _collateralToken, bool _isLong, uint256 _triggerPrice, bool _triggerAboveThreshold, uint256 _executionFee, bool _shouldWrap) external payable nonReentrant {\\n//        _transferInETH();\\n//        require(_executionFee >= minExecutionFee, Errors.ORDERBOOK_INSUFFICIENT_EXECUTION_FEE);\\n//        if (_shouldWrap) {\\n//            require(_path[0] == weth, Errors.ORDERBOOK_ONLY_WETH_COULD_BE_WRAPPED);\\n//            require(msg.value == _executionFee.add(_amountIn), Errors.ORDERBOOK_INCORRECT_VALUE_TRANSFERRED);\\n//        } else {\\n//            require(msg.value == _executionFee, Errors.ORDERBOOK_INCORRECT_EXECUTION_FEE_TRANSFERRED);\\n//            IRouter(router).pluginTransfer(_path[0], msg.sender, address(this), _amountIn);\\n//        }\\n//        address _purchaseToken = _path[_path.length - 1];\\n//        uint256 _purchaseTokenAmount;\\n//        if (_path.length > 1) {\\n//            require(_path[0] != _purchaseToken, Errors.ORDERBOOK_INVALID_PATH);\\n//            IERC20(_path[0]).safeTransfer(vault, _amountIn);\\n//            _purchaseTokenAmount = _swap(_path, _minOut, address(this));\\n//        } else {\\n//            _purchaseTokenAmount = _amountIn;\\n//        }\\n//        {\\n//            uint256 _purchaseTokenAmountUsd = IVault(vault).tokenToUsdMin(_purchaseToken, _purchaseTokenAmount);\\n//            require(_purchaseTokenAmountUsd >= minPurchaseTokenAmountUsd, Errors.ORDERBOOK_INSUFFICIENT_COLLATERAL);\\n//        }\\n//        _createIncreaseOrder(msg.sender, _purchaseToken, _purchaseTokenAmount, _collateralToken, _indexToken, _sizeDelta, _isLong, _triggerPrice, _triggerAboveThreshold, _executionFee);\\n//    }\\n//    function executeIncreaseOrder(address _address, uint256 _orderIndex, address payable _feeReceiver) override external nonReentrant {\\n//        DataTypes.IncreaseOrder memory order = increaseOrders[_address][_orderIndex];\\n//        require(order.account != address(0), Errors.ORDERBOOK_NON_EXISTENT_ORDER);\\n//        (uint256 currentPrice, ) = validatePositionOrderPrice(order.triggerAboveThreshold, order.triggerPrice, order.indexToken, order.isLong, true);\\n//        delete increaseOrders[_address][_orderIndex];\\n//        IERC20(order.purchaseToken).safeTransfer(vault, order.purchaseTokenAmount);\\n//        if (order.purchaseToken != order.collateralToken) {\\n//            address[] memory path = new address[](2);\\n//            path[0] = order.purchaseToken;\\n//            path[1] = order.collateralToken;\\n//            uint256 amountOut = _swap(path, 0, address(this));\\n//            IERC20(order.collateralToken).safeTransfer(vault, amountOut);\\n//        }\\n//        IRouter(router).pluginIncreasePosition(order.account, order.collateralToken, order.indexToken, order.sizeDelta, order.isLong);\\n//        _transferOutETH(order.executionFee, _feeReceiver);\\n//        emit Events.ExecuteIncreaseOrder(order.account, _orderIndex, order.purchaseToken, order.purchaseTokenAmount, order.collateralToken, order.indexToken, order.sizeDelta, order.isLong, order.triggerPrice, order.triggerAboveThreshold, order.executionFee, currentPrice);\\n//    }\\n//    function updateIncreaseOrder(uint256 _orderIndex, uint256 _sizeDelta, uint256 _triggerPrice, bool _triggerAboveThreshold) external nonReentrant {\\n//        DataTypes.IncreaseOrder storage order = increaseOrders[msg.sender][_orderIndex];\\n//        require(order.account != address(0), Errors.ORDERBOOK_NON_EXISTENT_ORDER);\\n//        order.triggerPrice = _triggerPrice;\\n//        order.triggerAboveThreshold = _triggerAboveThreshold;\\n//        order.sizeDelta = _sizeDelta;\\n//        emit Events.UpdateIncreaseOrder(msg.sender, _orderIndex, order.collateralToken, order.indexToken, order.isLong, _sizeDelta, _triggerPrice, _triggerAboveThreshold);\\n//    }\\n//    function cancelIncreaseOrder(uint256 _orderIndex) public nonReentrant {\\n//        DataTypes.IncreaseOrder memory order = increaseOrders[msg.sender][_orderIndex];\\n//        require(order.account != address(0), Errors.ORDERBOOK_NON_EXISTENT_ORDER);\\n//        delete increaseOrders[msg.sender][_orderIndex];\\n//        if (order.purchaseToken == weth) {\\n//            _transferOutETH(order.executionFee.add(order.purchaseTokenAmount), msg.sender);\\n//        } else {\\n//            IERC20(order.purchaseToken).safeTransfer(msg.sender, order.purchaseTokenAmount);\\n//            _transferOutETH(order.executionFee, msg.sender);\\n//        }\\n//        emit Events.CancelIncreaseOrder(order.account, _orderIndex, order.purchaseToken, order.purchaseTokenAmount, order.collateralToken, order.indexToken, order.sizeDelta, order.isLong, order.triggerPrice, order.triggerAboveThreshold, order.executionFee);\\n//    }\\n//\\n//    function createDecreaseOrder(address _indexToken, uint256 _sizeDelta, address _collateralToken, uint256 _collateralDelta, bool _isLong, uint256 _triggerPrice, bool _triggerAboveThreshold) external payable nonReentrant {\\n//        _transferInETH();\\n//        require(msg.value > minExecutionFee, Errors.ORDERBOOK_INSUFFICIENT_EXECUTION_FEE);\\n//        _createDecreaseOrder(msg.sender, _collateralToken, _collateralDelta, _indexToken, _sizeDelta, _isLong, _triggerPrice, _triggerAboveThreshold);\\n//    }\\n//    function executeDecreaseOrder(address _address, uint256 _orderIndex, address payable _feeReceiver) override external nonReentrant {\\n//        DataTypes.DecreaseOrder memory order = decreaseOrders[_address][_orderIndex];\\n//        require(order.account != address(0), Errors.ORDERBOOK_NON_EXISTENT_ORDER);\\n//        (uint256 currentPrice, ) = validatePositionOrderPrice(order.triggerAboveThreshold, order.triggerPrice, order.indexToken, !order.isLong, true);\\n//        delete decreaseOrders[_address][_orderIndex];\\n//        uint256 amountOut = IRouter(router).pluginDecreasePosition(order.account, order.collateralToken, order.indexToken, order.collateralDelta, order.sizeDelta, order.isLong, address(this));\\n//        if (order.collateralToken == weth) {\\n//            _transferOutETH(amountOut, payable(order.account));\\n//        } else {\\n//            IERC20(order.collateralToken).safeTransfer(order.account, amountOut);\\n//        }\\n//        _transferOutETH(order.executionFee, _feeReceiver);\\n//        emit Events.ExecuteDecreaseOrder(order.account, _orderIndex, order.collateralToken, order.collateralDelta, order.indexToken, order.sizeDelta, order.isLong, order.triggerPrice, order.triggerAboveThreshold, order.executionFee, currentPrice);\\n//    }\\n//    function updateDecreaseOrder(uint256 _orderIndex, uint256 _collateralDelta, uint256 _sizeDelta, uint256 _triggerPrice, bool _triggerAboveThreshold) external nonReentrant {\\n//        DataTypes.DecreaseOrder storage order = decreaseOrders[msg.sender][_orderIndex];\\n//        require(order.account != address(0), Errors.ORDERBOOK_NON_EXISTENT_ORDER);\\n//        order.triggerPrice = _triggerPrice;\\n//        order.triggerAboveThreshold = _triggerAboveThreshold;\\n//        order.sizeDelta = _sizeDelta;\\n//        order.collateralDelta = _collateralDelta;\\n//        emit Events.UpdateDecreaseOrder(msg.sender, _orderIndex, order.collateralToken, _collateralDelta, order.indexToken, _sizeDelta, order.isLong, _triggerPrice, _triggerAboveThreshold);\\n//    }\\n//    function cancelDecreaseOrder(uint256 _orderIndex) public nonReentrant {\\n//        DataTypes.DecreaseOrder memory order = decreaseOrders[msg.sender][_orderIndex];\\n//        require(order.account != address(0), Errors.ORDERBOOK_NON_EXISTENT_ORDER);\\n//        delete decreaseOrders[msg.sender][_orderIndex];\\n//        _transferOutETH(order.executionFee, msg.sender);\\n//        emit Events.CancelDecreaseOrder(order.account, _orderIndex, order.collateralToken, order.collateralDelta, order.indexToken, order.sizeDelta, order.isLong, order.triggerPrice, order.triggerAboveThreshold, order.executionFee);\\n//    }\\n//\\n//    function validateSwapOrderPriceWithTriggerAboveThreshold(address[] memory _path, uint256 _triggerRatio) public view returns (bool) {\\n//        require(_path.length == 2 || _path.length == 3, Errors.ORDERBOOK_INVALID_PATH_LENGTH);\\n//        address tokenA = _path[0];\\n//        address tokenB = _path[_path.length - 1];\\n//        uint256 tokenAPrice;\\n//        uint256 tokenBPrice;\\n//        if (tokenA == usdm) {\\n//            tokenAPrice = getUsdmMinPrice(_path[1]);\\n//        } else {\\n//            tokenAPrice = IVault(vault).getMinPrice(tokenA);\\n//        }\\n//        if (tokenB == usdm) {\\n//            tokenBPrice = Constants.PRICE_PRECISION;\\n//        } else {\\n//            tokenBPrice = IVault(vault).getMaxPrice(tokenB);\\n//        }\\n//        uint256 currentRatio = tokenBPrice.mul(Constants.PRICE_PRECISION).div(tokenAPrice);\\n//        bool isValid = currentRatio > _triggerRatio;\\n//        return isValid;\\n//    }\\n//    function validatePositionOrderPrice(bool _triggerAboveThreshold, uint256 _triggerPrice, address _indexToken, bool _maximizePrice, bool _raise) public view returns (uint256, bool) {\\n//        uint256 currentPrice = _maximizePrice\\n//            ? IVault(vault).getMaxPrice(_indexToken) : IVault(vault).getMinPrice(_indexToken);\\n//        bool isPriceValid = _triggerAboveThreshold ? currentPrice > _triggerPrice : currentPrice < _triggerPrice;\\n//        if (_raise) {\\n//            require(isPriceValid, Errors.ORDERBOOK_INVALID_PRICE_FOR_EXECUTION);\\n//        }\\n//        return (currentPrice, isPriceValid);\\n//    }\\n//    function cancelMultiple(uint256[] memory _swapOrderIndexes, uint256[] memory _increaseOrderIndexes, uint256[] memory _decreaseOrderIndexes) external {\\n//        for (uint256 i = 0; i < _swapOrderIndexes.length; i++) {\\n//            cancelSwapOrder(_swapOrderIndexes[i]);\\n//        }\\n//        for (uint256 i = 0; i < _increaseOrderIndexes.length; i++) {\\n//            cancelIncreaseOrder(_increaseOrderIndexes[i]);\\n//        }\\n//        for (uint256 i = 0; i < _decreaseOrderIndexes.length; i++) {\\n//            cancelDecreaseOrder(_decreaseOrderIndexes[i]);\\n//        }\\n//    }\\n\\n//    function _transferInETH() internal {\\n//        if (msg.value != 0) {\\n//            IWETH(weth).deposit{value: msg.value}();\\n//        }\\n//    }\\n//    function _transferOutETH(uint256 _amountOut, address payable _receiver) internal {\\n//        IWETH(weth).withdraw(_amountOut);\\n//        _receiver.sendValue(_amountOut);\\n//    }\\n//    function _swap(address[] memory _path, uint256 _minOut, address _receiver) internal returns (uint256) {\\n//        if (_path.length == 2) {\\n//            return _vaultSwap(_path[0], _path[1], _minOut, _receiver);\\n//        }\\n//        if (_path.length == 3) {\\n//            uint256 midOut = _vaultSwap(_path[0], _path[1], 0, address(this));\\n//            IERC20(_path[1]).safeTransfer(vault, midOut);\\n//            return _vaultSwap(_path[1], _path[2], _minOut, _receiver);\\n//        }\\n//        revert(Errors.ORDERBOOK_INVALID_PATH_LENGTH);\\n//    }\\n//    function _vaultSwap(address _tokenIn, address _tokenOut, uint256 _minOut, address _receiver) internal returns (uint256) {\\n//        uint256 amountOut;\\n//        if (_tokenOut == usdm) {\\n//            amountOut = IVault(vault).buyUSDM(_tokenIn, _receiver);\\n//        } else if (_tokenIn == usdm) {\\n//            amountOut = IVault(vault).sellUSDM(_tokenOut, _receiver);\\n//        } else {\\n//            amountOut = IVault(vault).swap(_tokenIn, _tokenOut, _receiver);\\n//        }\\n//        require(amountOut >= _minOut, Errors.ORDERBOOK_INSUFFICIENT_AMOUNTOUT);\\n//        return amountOut;\\n//    }\\n//    function _createSwapOrder(address _account, address[] memory _path, uint256 _amountIn, uint256 _minOut, uint256 _triggerRatio, bool _triggerAboveThreshold, bool _shouldUnwrap, uint256 _executionFee) internal {\\n//        uint256 _orderIndex = swapOrdersIndex[_account];\\n//        DataTypes.SwapOrder memory order = DataTypes.SwapOrder(_account, _path, _amountIn, _minOut, _triggerRatio, _triggerAboveThreshold, _shouldUnwrap, _executionFee);\\n//        swapOrdersIndex[_account] = _orderIndex.add(1);\\n//        swapOrders[_account][_orderIndex] = order;\\n//        emit Events.CreateSwapOrder(_account, _orderIndex, _path, _amountIn, _minOut, _triggerRatio, _triggerAboveThreshold, _shouldUnwrap, _executionFee);\\n//    }\\n//    function _createDecreaseOrder(address _account, address _collateralToken, uint256 _collateralDelta, address _indexToken, uint256 _sizeDelta, bool _isLong, uint256 _triggerPrice, bool _triggerAboveThreshold) internal {\\n//        uint256 _orderIndex = decreaseOrdersIndex[_account];\\n//        DataTypes.DecreaseOrder memory order = DataTypes.DecreaseOrder(_account, _collateralToken, _collateralDelta, _indexToken, _sizeDelta, _isLong, _triggerPrice, _triggerAboveThreshold, msg.value);\\n//        decreaseOrdersIndex[_account] = _orderIndex.add(1);\\n//        decreaseOrders[_account][_orderIndex] = order;\\n//        emit Events.CreateDecreaseOrder(_account, _orderIndex, _collateralToken, _collateralDelta, _indexToken, _sizeDelta, _isLong, _triggerPrice, _triggerAboveThreshold, msg.value);\\n//    }\\n//    function _createIncreaseOrder(address _account, address _purchaseToken, uint256 _purchaseTokenAmount, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong, uint256 _triggerPrice, bool _triggerAboveThreshold, uint256 _executionFee) internal {\\n//        uint256 _orderIndex = increaseOrdersIndex[msg.sender];\\n//        DataTypes.IncreaseOrder memory order = DataTypes.IncreaseOrder(_account, _purchaseToken, _purchaseTokenAmount, _collateralToken, _indexToken, _sizeDelta, _isLong, _triggerPrice, _triggerAboveThreshold, _executionFee);\\n//        increaseOrdersIndex[_account] = _orderIndex.add(1);\\n//        increaseOrders[_account][_orderIndex] = order;\\n//        emit Events.CreateIncreaseOrder(_account, _orderIndex, _purchaseToken, _purchaseTokenAmount, _collateralToken, _indexToken, _sizeDelta, _isLong, _triggerPrice, _triggerAboveThreshold, _executionFee);\\n//    }\\n\\n//    function getSwapOrder(address _account, uint256 _orderIndex) override public view returns (address path0, address path1, address path2, uint256 amountIn, uint256 minOut, uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee) {\\n//        DataTypes.SwapOrder memory order = swapOrders[_account][_orderIndex];\\n//        return (order.path.length > 0 ? order.path[0] : address(0), order.path.length > 1 ? order.path[1] : address(0), order.path.length > 2 ? order.path[2] : address(0), order.amountIn, order.minOut, order.triggerRatio, order.triggerAboveThreshold, order.shouldUnwrap, order.executionFee);\\n//    }\\n//    function getUsdmMinPrice(address _otherToken) public view returns (uint256) {\\n//        uint256 redemptionAmount = IVault(vault).getRedemptionAmount(_otherToken, Constants.USDM_PRECISION);\\n//        uint256 otherTokenPrice = IVault(vault).getMinPrice(_otherToken);\\n//        uint256 otherTokenDecimals = IVault(vault).tokenDecimals(_otherToken);\\n//        return redemptionAmount.mul(otherTokenPrice).div(10 ** otherTokenDecimals);\\n//    }\\n//    function getDecreaseOrder(address _account, uint256 _orderIndex) override public view returns (address collateralToken, uint256 collateralDelta, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee) {\\n//        DataTypes.DecreaseOrder memory order = decreaseOrders[_account][_orderIndex];\\n//        return (order.collateralToken, order.collateralDelta, order.indexToken, order.sizeDelta, order.isLong, order.triggerPrice, order.triggerAboveThreshold, order.executionFee);\\n//    }\\n//    function getIncreaseOrder(address _account, uint256 _orderIndex) override public view returns (address purchaseToken, uint256 purchaseTokenAmount, address collateralToken, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee) {\\n//        DataTypes.IncreaseOrder memory order = increaseOrders[_account][_orderIndex];\\n//        return (order.purchaseToken, order.purchaseTokenAmount, order.collateralToken, order.indexToken, order.sizeDelta, order.isLong, order.triggerPrice, order.triggerAboveThreshold, order.executionFee);\\n//    }\\n}\\n\",\"keccak256\":\"0x15d4151ac5c0b89371e575d099e91b6cfc38ce41c8543587a66b57ec6d5eb21e\",\"license\":\"MIT\"},\"contracts/core/storage/OrderBookAggregators.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"../../tokens/interfaces/IWETH.sol\\\";\\nimport \\\"../../libraries/math/SafeMath.sol\\\";\\nimport \\\"../../libraries/token/IERC20.sol\\\";\\nimport \\\"../../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../../libraries/utils/Address.sol\\\";\\nimport \\\"../../libraries/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../../libraries/DataTypes.sol\\\";\\nimport \\\"../../libraries/Errors.sol\\\";\\nimport \\\"../../libraries/Constants.sol\\\";\\nimport \\\"../../libraries/Events.sol\\\";\\nimport \\\"../interfaces/IRouter.sol\\\";\\nimport \\\"../interfaces/IVault.sol\\\";\\nimport \\\"../interfaces/IOrderBook.sol\\\";\\nabstract contract OrderBookAggregators is ReentrancyGuard, IOrderBook {\\n}\\n\",\"keccak256\":\"0xf29db84811e8203858d8ad132894061d6863605b6c9df02c371d0f2c9d4ffdc7\",\"license\":\"MIT\"},\"contracts/core/storage/OrderBookStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"./OrderBookAggregators.sol\\\";\\nabstract contract OrderBookStorage is OrderBookAggregators{\\n    /* constructor */\\n    bool public isInitialized = false;\\n    address public router;\\n    address public vault;\\n    address public weth;\\n    address public usdm;\\n    /* settings */\\n    uint256 public minExecutionFee;\\n    uint256 public minPurchaseTokenAmountUsd;\\n    address public gov;\\n    /* misc */\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n    modifier onlyGov() {\\n        require(msg.sender == gov, Errors.ORDERBOOK_FORBIDDEN);\\n        _;\\n    }\\n\\n//    mapping (address => mapping(uint256 => DataTypes.IncreaseOrder)) public increaseOrders;\\n//    mapping (address => uint256) public increaseOrdersIndex;\\n//    mapping (address => mapping(uint256 => DataTypes.DecreaseOrder)) public decreaseOrders;\\n//    mapping (address => uint256) public decreaseOrdersIndex;\\n//    mapping (address => mapping(uint256 => DataTypes.SwapOrder)) public swapOrders;\\n//    mapping (address => uint256) public swapOrdersIndex;\\n}\\n\",\"keccak256\":\"0xfa380f2480b6501e001abbe03531fc143dfe7fb22b02fbb64a74ed3dc96e9615\",\"license\":\"MIT\"},\"contracts/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nlibrary Constants {\\n    string public constant USDM_TOKEN_NAME = \\\"USD Mold\\\";\\n    string public constant USDM_TOKEN_SYMBOL = \\\"USDM\\\";\\n    /* VaultPriceFeed.sol */\\n    uint256 public constant PRICE_PRECISION = 10 ** 30;\\n    uint256 public constant ONE_USD = PRICE_PRECISION;\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n    uint256 public constant MAX_SPREAD_BASIS_POINTS = 50;\\n    uint256 public constant MAX_ADJUSTMENT_INTERVAL = 2 hours;\\n    uint256 public constant MAX_ADJUSTMENT_BASIS_POINTS = 20;\\n    address constant internal FLAG_ARBITRUM_SEQ_OFFLINE = address(bytes20(bytes32(uint256(keccak256(\\\"chainlink.flags.arbitrum-seq-offline\\\")) - 1)));\\n    /* VaultUtils.sol */\\n    uint256 public constant FUNDING_RATE_PRECISION = 1000000;\\n\\n    /* Vault.sol*/\\n    uint256 public constant MIN_LEVERAGE = 10000; // 1x\\n    uint256 public constant USDM_DECIMALS = 18;\\n    uint256 public constant MAX_FEE_BASIS_POINTS = 500; // 5%\\n    uint256 public constant MAX_LIQUIDATION_FEE_USD = 100 * PRICE_PRECISION; // 100 USD\\n    uint256 public constant MIN_FUNDING_RATE_INTERVAL = 1 hours;\\n    uint256 public constant MAX_FUNDING_RATE_FACTOR = 10000; // 1%\\n\\n    /* OrderBook.sol */\\n    uint256 public constant USDM_PRECISION = 1e18;\\n\\n    /* MLP.sol */\\n    uint256 public constant MLP_PRECISION = 10 ** 18;\\n    uint256 public constant MAX_COOLDOWN_DURATION = 48 hours;\\n}\\n\",\"keccak256\":\"0x64af3a89313997c5108fc0101629346523304518211929d3ad6834618786cb2c\",\"license\":\"MIT\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nlibrary DataTypes {\\n    struct IncreaseOrder {\\n        address account;\\n        address purchaseToken;\\n        uint256 purchaseTokenAmount;\\n        address collateralToken;\\n        address indexToken;\\n        uint256 sizeDelta;\\n        bool isLong;\\n        uint256 triggerPrice;\\n        bool triggerAboveThreshold;\\n        uint256 executionFee;\\n    }\\n    struct DecreaseOrder {\\n        address account;\\n        address collateralToken;\\n        uint256 collateralDelta;\\n        address indexToken;\\n        uint256 sizeDelta;\\n        bool isLong;\\n        uint256 triggerPrice;\\n        bool triggerAboveThreshold;\\n        uint256 executionFee;\\n    }\\n    struct SwapOrder {\\n        address account;\\n        address[] path;\\n        uint256 amountIn;\\n        uint256 minOut;\\n        uint256 triggerRatio;\\n        bool triggerAboveThreshold;\\n        bool shouldUnwrap;\\n        uint256 executionFee;\\n    }\\n\\n    /* Vault.sol */\\n    struct Position {\\n        uint256 size;\\n        uint256 collateral;\\n        uint256 averagePrice; // col average price\\n        uint256 entryFundingRate;\\n        uint256 reserveAmount;\\n        int256 realisedPnl;\\n        uint256 lastIncreasedTime;\\n    }\\n}\\n\",\"keccak256\":\"0xe59ad3dec8eb41f70e00ef98efdeef5015f17a7575a00670baeb93f6c98e5fe3\",\"license\":\"MIT\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nlibrary Errors {\\n    /* Timelock Error Message*/\\n    string public constant Timelock_Invalid_Target = \\\"Timelock: invalid _target\\\";\\n    string public constant Timelock_Invalid_Buffer = \\\"Timelock: invalid _buffer\\\";\\n    string public constant Timelock_Buffer_Cannot_Be_Decreased = \\\"Timelock: buffer cannot be decreased\\\";\\n    string public constant Timelock_invalid_maxLeverage = \\\"Timelock: invalid _maxLeverage\\\";\\n    string public constant Timelock_invalid_fundingRateFactor = \\\"Timelock: invalid _fundingRateFactor\\\";\\n    string public constant Timelock_invalid_stableFundingRateFactor = \\\"Timelock: invalid _stableFundingRateFactor\\\";\\n    string public constant Timelock_invalid_minProfitBps = \\\"Timelock: invalid _minProfitBps\\\";\\n    string public constant Timelock_token_not_yet_whitelisted = \\\"Timelock: token not yet whitelisted\\\";\\n    string public constant TIMELOCK_INVALID_MAXGASPRICE = \\\"Invalid _maxGasPrice\\\";\\n    string public constant TIMELOCK_INVALID_LENGTHS = \\\"Timelock: invalid lengths\\\";\\n    string public constant TIMELOCK_MAXTOKENSUPPLY_EXCEEDED = \\\"Timelock: maxTokenSupply exceeded\\\";\\n    string public constant TIMELOCK_ACTION_ALREADY_SIGNALLED = \\\"Timelock: action already signalled\\\";\\n    string public constant TIMELOCK_ACTION_NOT_SIGNALLED = \\\"Timelock: action not signalled\\\";\\n    string public constant TIMELOCK_ACTION_TIME_NOT_YET_PASSED = \\\"Timelock: action time not yet passed\\\";\\n    string public constant TIMELOCK_INVALID_ACTION = \\\"Timelock: invalid _action\\\";\\n    string public constant TIMELOCK_INVALID_BUFFER = \\\"Timelock: invalid _buffer\\\";\\n\\n    /* PriceFeed Error Message*/\\n    string public constant PriceFeed_forbidden = \\\"PriceFeed: forbidden\\\";\\n\\n    /* USDM.sol*/\\n    string public constant USDM_FORBIDDEN = \\\"USDM: forbidden\\\";\\n\\n    /* BasePositionManagers.sol */\\n    string public constant BASEPOSITIONMANAGER_MARK_PRICE_LOWER_THAN_LIMIT      = \\\"BasePositionManager: mark price lower than limit\\\";\\n    string public constant BASEPOSITIONMANAGER_MARK_PRICE_HIGHER_THAN_LIMIT     = \\\"BasePositionManager: mark price higher than limit\\\";\\n    string public constant BASEPOSITIONMANAGER_INVALID_PATH_LENGTH              = \\\"BasePositionManager: invalid _path.length\\\";\\n    string public constant BASEPOSITIONMANAGER_INSUFFICIENT_AMOUNTOUT           = \\\"BasePositionManager: insufficient amountOut\\\";\\n    string public constant BASEPOSITIONMANAGER_MAX_GLOBAL_LONGS_EXCEEDED        = \\\"BasePositionManager: max global longs exceeded\\\";\\n    string public constant BASEPOSITIONMANAGER_MAX_GLOBAL_SHORTS_EXCEEDED       = \\\"BasePositionManager: max global shorts exceeded\\\";\\n    string public constant BASEPOSITIONMANAGER_INVALID_SENDER                   = \\\"BasePositionManager: invalid sender\\\";\\n\\n    /* PositionManager.sol */\\n    string public constant POSITIONMANAGER_INVALID_PATH_LENGTH                  = \\\"PositionManager: invalid _path.length\\\";\\n    string public constant POSITIONMANAGER_INVALID_PATH                         = \\\"PositionManager: invalid _path\\\";\\n    string public constant POSITIONMANAGER_LONG_DEPOSIT                         = \\\"PositionManager: long deposit\\\";\\n    string public constant POSITIONMANAGER_LONG_LEVERAGE_DECREASE               = \\\"PositionManager: long leverage decrease\\\";\\n    string public constant POSITIONMANAGER_FORBIDDEN                            = \\\"PositionManager: forbidden\\\";\\n\\n    /* Router.sol*/\\n    string public constant ROUTER_FORBIDDEN                                     = \\\"Router: forbidden\\\";\\n\\n    /* MlpManager.sol */\\n    string public constant MLPMANAGER_ACTION_NOT_ENABLED                        = \\\"MlpManager: action not enabled\\\";\\n    string public constant MLPMANAGER_INVALID_WEIGHT                            = \\\"MlpManager: invalid weight\\\";\\n    string public constant MLPMANAGER_INVALID_COOLDOWNDURATION                  = \\\"MlpManager: invalid _cooldownDuration\\\";\\n    string public constant MLPMANAGER_INVALID_AMOUNT                            = \\\"MlpManager: invalid _amount\\\";\\n    string public constant MLPMANAGER_INSUFFICIENT_USDM_OUTPUT                  = \\\"MlpManager: insufficient USDM output\\\";\\n    string public constant MLPMANAGER_INSUFFICIENT_MLP_OUTPUT                   = \\\"MlpManager: insufficient MLP output\\\";\\n    string public constant MLPMANAGER_INVALID_MLPAMOUNT                         = \\\"MlpManager: invalid _mlpAmount\\\";\\n    string public constant MLPMANAGER_COOLDOWN_DURATION_NOT_YET_PASSED          = \\\"MlpManager: cooldown duration not yet passed\\\";\\n    string public constant MLPMANAGER_INSUFFICIENT_OUTPUT                       = \\\"MlpManager: insufficient output\\\";\\n    string public constant MLPMANAGER_FORBIDDEN                                 = \\\"MlpManager: forbidden\\\";\\n\\n    /* ShortsTrack.sol*/\\n    string public constant SHORTSTRACKER_FORBIDDEN                              = \\\"ShortsTracker: forbidden\\\";\\n    string public constant SHORTSTRACKER_INVALID_HANDLER                        = \\\"ShortsTracker: invalid _handler\\\";\\n    string public constant SHORTSTRACKER_ALREADY_MIGRATED                       = \\\"ShortsTracker: already migrated\\\";\\n    string public constant SHORTSTRACKER_OVERFLOW                               = \\\"ShortsTracker: overflow\\\";\\n\\n    /* VaultUtils.sol*/\\n    string public constant VAULT_LOSSES_EXCEED_COLLATERAL                       = \\\"Vault: losses exceed collateral\\\";\\n    string public constant VAULT_FEES_EXCEED_COLLATERAL                         = \\\"Vault: fees exceed collateral\\\";\\n    string public constant VAULT_LIQUIDATION_FEES_EXCEED_COLLATERAL             = \\\"Vault: liquidation fees exceed collateral\\\";\\n    string public constant VAULT_MAXLEVERAGE_EXCEEDED                           = \\\"Vault: maxLeverage exceeded\\\";\\n\\n    /* VaultPriceFeed.sol*/\\n    string public constant VAULTPRICEFEED_FORBIDDEN                             = \\\"VaultPriceFeed: forbidden\\\";\\n    string public constant VAULTPRICEFEED_ADJUSTMENT_FREQUENCY_EXCEEDED         = \\\"VaultPriceFeed: adjustment frequency exceeded\\\";\\n    string public constant VAULTPRICEFEED_INVALID_ADJUSTMENTBPS                 = \\\"Vaultpricefeed: invalid _adjustmentBps\\\";\\n    string public constant VAULTPRICEFEED_INVALID_SPREADBASISPOINTS             = \\\"VaultPriceFeed: invalid _spreadBasisPoints\\\";\\n    string public constant VAULTPRICEFEED_INVALID_PRICESAMPLESPACE              = \\\"VaultPriceFeed: invalid _priceSampleSpace\\\";\\n    string internal constant VAULTPRICEFEED_INVALID_PRICE_FEED                  = \\\"VaultPriceFeed: invalid price feed\\\";\\n    string internal constant VAULTPRICEFEED_INVALID_PRICE                       = \\\"VaultPriceFeed: invalid price\\\";\\n    string internal constant CHAINLINK_FEEDS_ARE_NOT_BEING_UPDATED              = \\\"Chainlink feeds are not being updated\\\";\\n    string internal constant VAULTPRICEFEED_COULD_NOT_FETCH_PRICE               = \\\"VaultPriceFeed: could not fetch price\\\";\\n\\n    /* VaultInternal.sol*/\\n    string internal constant VAULT_POOLAMOUNT_EXCEEDED                          = \\\"Vault: poolAmount exceeded\\\";\\n    string internal constant VAULT_INSUFFICIENT_RESERVE                         = \\\"Vault: insufficient reserve\\\";\\n    string internal constant VAULT_MAX_SHORTS_EXCEEDED                          = \\\"Vault: max shorts exceeded\\\";\\n    string internal constant VAULT_POOLAMOUNT_BUFFER                            = \\\"Vault: poolAmount < buffer\\\";\\n    string internal constant VAULT_INVALID_ERRORCONTROLLER                      = \\\"Vault: invalid errorController\\\";\\n\\n    /* Router.sol */\\n    string internal constant ROUTER_INVALID_SENDER                              = \\\"Router: invalid sender\\\";\\n    string internal constant ROUTER_INVALID_PATH                                = \\\"Router: invalid _path\\\";\\n    string internal constant ROUTER_MARK_PRICE_HIGHER_THAN_LIMIT                = \\\"Router: mark price higher than limit\\\";\\n    string internal constant ROUTER_MARK_PRICE_LOWER_THAN_LIMIT                 = \\\"Router: mark price lower than limit\\\";\\n    string internal constant ROUTER_INVALID_PATH_LENGTH                         = \\\"Router: invalid _path.length\\\";\\n    string internal constant ROUTER_INSUFFICIENT_AMOUNTOUT                      = \\\"Router: insufficient amountOut\\\";\\n    string internal constant ROUTER_INVALID_PLUGIN                              = \\\"Router: invalid plugin\\\";\\n    string internal constant ROUTER_PLUGIN_NOT_APPROVED                         = \\\"Router: plugin not approved\\\";\\n\\n    /* OrderBook.sol*/\\n    string internal constant ORDERBOOK_FORBIDDEN                                = \\\"OrderBook: forbidden\\\";\\n    string internal constant ORDERBOOK_ALREADY_INITIALIZED                      = \\\"OrderBook: already initialized\\\";\\n    string internal constant ORDERBOOK_INVALID_SENDER                           = \\\"OrderBook: invalid sender\\\";\\n    string internal constant ORDERBOOK_INVALID_PATH_LENGTH                      = \\\"OrderBook: invalid _path.length\\\";\\n    string internal constant ORDERBOOK_INVALID_PATH                             = \\\"OrderBook: invalid _path\\\";\\n    string internal constant ORDERBOOK_INVALID_AMOUNTIN                         = \\\"OrderBook: invalid _amountIn\\\";\\n    string internal constant ORDERBOOK_INSUFFICIENT_EXECUTION_FEE               = \\\"OrderBook: insufficient execution fee\\\";\\n    string internal constant ORDERBOOK_ONLY_WETH_COULD_BE_WRAPPED               = \\\"OrderBook: only weth could be wrapped\\\";\\n    string internal constant ORDERBOOK_INCORRECT_VALUE_TRANSFERRED              = \\\"OrderBook: incorrect value transferred\\\";\\n    string internal constant ORDERBOOK_INCORRECT_EXECUTION_FEE_TRANSFERRED      = \\\"OrderBook: incorrect execution fee transferred\\\";\\n    string internal constant ORDERBOOK_NON_EXISTENT_ORDER                       = \\\"OrderBook: non-existent order\\\";\\n    string internal constant ORDERBOOK_INVALID_PRICE_FOR_EXECUTION              = \\\"OrderBook: invalid price for execution\\\";\\n    string internal constant ORDERBOOK_INSUFFICIENT_COLLATERAL                  = \\\"OrderBook: insufficient collateral\\\";\\n    string internal constant ORDERBOOK_INSUFFICIENT_AMOUNTOUT                   = \\\"OrderBook: insufficient amountOut\\\";\\n\\n    /* RewardRouterV2.sol */\\n    string internal constant REWARDROUTER_INVALID_AMOUNT                        = \\\"RewardRouter: invalid _amount\\\";\\n    string internal constant REWARDROUTER_INVALID_MSG_VALUE                     = \\\"RewardRouter: invalid msg.value\\\";\\n    string internal constant REWARDROUTER_ALREADY_INITIALIZED                   = \\\"RewardRouter: already initialized\\\";\\n    string internal constant REWARDROUTER_INVALID_MLPAMOUNT                     = \\\"RewardRouter: invalid _mlpAmount\\\";\\n    string internal constant REWARDROUTER_SENDER_HAS_VESTED_TOKENS              = \\\"RewardRouter: sender has vested tokens\\\";\\n    string internal constant REWARDROUTER_TRANSFER_NOT_SIGNALLED                = \\\"RewardRouter: transfer not signalled\\\";\\n    string internal constant REWARDROUTER_STAKEDMOLDTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0                      = \\\"RewardRouter: stakedMoldTracker.averageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_STAKEDMOLDTRACKER_CUMULATIVEREWARDS_GREATER_0                         = \\\"RewardRouter: stakedMoldTracker.cumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_BONUSMOLDTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0                       = \\\"RewardRouter: bonusMoldTracker.averageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_BONUSMOLDTRACKER_CUMULATIVEREWARDS_GREATER_0                          = \\\"RewardRouter: bonusMoldTracker.cumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_FEEMOLDTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0                         = \\\"RewardRouter: feeMoldTracker.averageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_FEEMOLDTRACKER_CUMULATIVEREWARDS_GREATER_0                            = \\\"RewardRouter: feeMoldTracker.cumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_MOLDVESTER_TRANSFERREDAVERAGESTAKEDAMOUNTS_GREATER_0                  = \\\"RewardRouter: MoldVester.transferredAverageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_MOLDVESTER_TRANSFERREDCUMULATIVEREWARDS_GREATER_0                     = \\\"RewardRouter: MoldVester.transferredCumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_STAKEDMLPTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0                       = \\\"RewardRouter: stakedMlpTracker.averageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_STAKEDMLPTRACKER_CUMULATIVEREWARDS_GREATER_0                          = \\\"RewardRouter: stakedMlpTracker.cumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_FEEMLPTRACKER_AVERAGESTAKEDAMOUNTS_GREATER_0                          = \\\"RewardRouter: feeMlpTracker.averageStakedAmounts > 0\\\";\\n    string internal constant REWARDROUTER_FEEMLPTRACKER_CUMULATIVEREWARDS_GREATER_0                             = \\\"RewardRouter: feeMlpTracker.cumulativeRewards > 0\\\";\\n    string internal constant REWARDROUTER_MOLDVESTER_BALANCE_GREATER_0          = \\\"RewardRouter: MoldVester.balance > 0\\\";\\n    string internal constant REWARDROUTER_MLPVESTER_BALANCE_GREATER_0           = \\\"RewardRouter: MlpVester.balance > 0\\\";\\n\\n}\\n\",\"keccak256\":\"0x2d6c5a1032ea8a6b12bcb7fde4f03a3519d67086d21a2a9bf4ea541db73bdbc5\",\"license\":\"MIT\"},\"contracts/libraries/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nlibrary Events {\\n    /* BasePositionManager Events */\\n    event SetDepositFee(uint256 depositFee);\\n    event SetIncreasePositionBufferBps(uint256 increasePositionBufferBps);\\n    event SetReferralStorage(address referralStorage);\\n    event SetAdmin(address admin);\\n    event WithdrawFees(address token, address receiver, uint256 amount);\\n    event SetMaxGlobalSizes(address[] tokens, uint256[] longSizes, uint256[] shortSizes);\\n    event IncreasePositionReferral(address account, uint256 sizeDelta, uint256 marginFeeBasisPoints, bytes32 referralCode, address referrer);\\n    event DecreasePositionReferral(address account, uint256 sizeDelta, uint256 marginFeeBasisPoints, bytes32 referralCode, address referrer);\\n\\n    /*Position Manager Events*/\\n    event SetOrderKeeper(address indexed account, bool isActive);\\n    event SetLiquidator(address indexed account, bool isActive);\\n    event SetPartner(address account, bool isActive);\\n    event SetOpened(bool opened);\\n    event SetShouldValidateIncreaseOrder(bool shouldValidateIncreaseOrder);\\n\\n\\n    /* Orderbook.sol events */\\n    event CreateIncreaseOrder(address indexed account, uint256 orderIndex, address purchaseToken, uint256 purchaseTokenAmount, address collateralToken, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee);\\n    event CancelIncreaseOrder(address indexed account, uint256 orderIndex, address purchaseToken, uint256 purchaseTokenAmount, address collateralToken, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee);\\n    event ExecuteIncreaseOrder(address indexed account, uint256 orderIndex, address purchaseToken, uint256 purchaseTokenAmount, address collateralToken, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee, uint256 executionPrice);\\n    event UpdateIncreaseOrder(address indexed account, uint256 orderIndex, address collateralToken, address indexToken, bool isLong, uint256 sizeDelta, uint256 triggerPrice, bool triggerAboveThreshold);\\n    event CreateDecreaseOrder(address indexed account, uint256 orderIndex, address collateralToken, uint256 collateralDelta, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee);\\n    event CancelDecreaseOrder(address indexed account, uint256 orderIndex, address collateralToken, uint256 collateralDelta, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee);\\n    event ExecuteDecreaseOrder(address indexed account, uint256 orderIndex, address collateralToken, uint256 collateralDelta, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, uint256 executionFee, uint256 executionPrice);\\n    event UpdateDecreaseOrder(address indexed account, uint256 orderIndex, address collateralToken, uint256 collateralDelta, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold);\\n    event CreateSwapOrder(address indexed account, uint256 orderIndex, address[] path, uint256 amountIn, uint256 minOut, uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event CancelSwapOrder(address indexed account, uint256 orderIndex, address[] path, uint256 amountIn, uint256 minOut, uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event UpdateSwapOrder(address indexed account, uint256 ordexIndex, address[] path, uint256 amountIn, uint256 minOut, uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event ExecuteSwapOrder(address indexed account, uint256 orderIndex, address[] path, uint256 amountIn, uint256 minOut, uint256 amountOut, uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event Initialize(address router, address vault, address weth, address usdm, uint256 minExecutionFee, uint256 minPurchaseTokenAmountUsd);\\n    event UpdateMinExecutionFee(uint256 minExecutionFee);\\n    event UpdateMinPurchaseTokenAmountUsd(uint256 minPurchaseTokenAmountUsd);\\n    event UpdateGov(address gov);\\n\\n    /* Router.sol events*/\\n    event Swap(address account, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);\\n\\n    /* ShortsTracker.sol events*/\\n    event GlobalShortDataUpdated(address indexed token, uint256 globalShortSize, uint256 globalShortAveragePrice);\\n\\n    /* Vault.sol events */\\n    event BuyUSDM(address account, address token, uint256 tokenAmount, uint256 usdmAmount, uint256 feeBasisPoints);\\n    event SellUSDM(address account, address token, uint256 usdmAmount, uint256 tokenAmount, uint256 feeBasisPoints);\\n    event Swap(address account, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut, uint256 amountOutAfterFees, uint256 feeBasisPoints);\\n    event IncreasePosition(bytes32 key, address account, address collateralToken, address indexToken, uint256 collateralDelta, uint256 sizeDelta, bool isLong, uint256 price, uint256 fee);\\n    event DecreasePosition(bytes32 key, address account, address collateralToken, address indexToken, uint256 collateralDelta, uint256 sizeDelta, bool isLong, uint256 price, uint256 fee);\\n    event LiquidatePosition(bytes32 key, address account, address collateralToken, address indexToken, bool isLong, uint256 size, uint256 collateral, uint256 reserveAmount, int256 realisedPnl, uint256 markPrice);\\n    event UpdatePosition(bytes32 key, uint256 size, uint256 collateral, uint256 averagePrice, uint256 entryFundingRate, uint256 reserveAmount, int256 realisedPnl, uint256 markPrice);\\n    event ClosePosition(bytes32 key, uint256 size, uint256 collateral, uint256 averagePrice, uint256 entryFundingRate, uint256 reserveAmount, int256 realisedPnl);\\n    event UpdateFundingRate(address token, uint256 fundingRate);\\n    event UpdatePnl(bytes32 key, bool hasProfit, uint256 delta);\\n    event CollectSwapFees(address token, uint256 feeUsd, uint256 feeTokens);\\n    event CollectMarginFees(address token, uint256 feeUsd, uint256 feeTokens);\\n    event DirectPoolDeposit(address token, uint256 amount);\\n    event IncreasePoolAmount(address token, uint256 amount);\\n    event DecreasePoolAmount(address token, uint256 amount);\\n    event IncreaseUsdmAmount(address token, uint256 amount);\\n    event DecreaseUsdmAmount(address token, uint256 amount);\\n    event IncreaseReservedAmount(address token, uint256 amount);\\n    event DecreaseReservedAmount(address token, uint256 amount);\\n    event IncreaseGuaranteedUsd(address token, uint256 amount);\\n    event DecreaseGuaranteedUsd(address token, uint256 amount);\\n\\n    /* Timelock.sol events */\\n    event SignalPendingAction(bytes32 action);\\n    event SignalApprove(address token, address spender, uint256 amount, bytes32 action);\\n    event SignalWithdrawToken(address target, address token, address receiver, uint256 amount, bytes32 action);\\n    event SignalMint(address token, address receiver, uint256 amount, bytes32 action);\\n    event SignalSetGov(address target, address gov, bytes32 action);\\n    event SignalSetHandler(address target, address handler, bool isActive, bytes32 action);\\n    event SignalSetPriceFeed(address vault, address priceFeed, bytes32 action);\\n    event SignalRedeemUsdm(address vault, address token, uint256 amount);\\n    event SignalVaultSetTokenConfig(address vault, address token, uint256 tokenDecimals, uint256 tokenWeight, uint256 minProfitBps, uint256 maxUsdmAmount, bool isStable, bool isShortable);\\n    event ClearAction(bytes32 action);\\n\\n    /* MlpManager.sol */\\n    event AddLiquidity(address account, address token, uint256 amount, uint256 aumInUsdm, uint256 mlpSupply, uint256 usdmAmount, uint256 mintAmount);\\n    event RemoveLiquidity(address account, address token, uint256 mlpAmount, uint256 aumInUsdm, uint256 mlpSupply, uint256 usdmAmount, uint256 amountOut);\\n\\n    /* RewardRouterV2 */\\n    event StakeMold(address account, address token, uint256 amount);\\n    event UnstakeMold(address account, address token, uint256 amount);\\n    event StakeMlp(address account, uint256 amount);\\n    event UnstakeMlp(address account, uint256 amount);\\n}\\n\",\"keccak256\":\"0x555bd8706eac18f05cbc296299b1379465408d2040130886612e55bbddbb7179\",\"license\":\"MIT\"},\"contracts/libraries/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x41b0da7db3e1f79b338824fed2bc4732430b78002a9d51c2cfa86ad5a12c2763\",\"license\":\"MIT\"},\"contracts/libraries/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa3ce253082421a9e79d2b884ae6f60507b0cc73ea356674072091454c44cc556\",\"license\":\"MIT\"},\"contracts/libraries/token/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../math/SafeMath.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf80766b21ea67a73c81e0dea4543375243938c8b223e29c5d783be61ab3f424c\",\"license\":\"MIT\"},\"contracts/libraries/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1845481964ebacf35afe1a006fa574793b52e698eba0a8db6e3d30202bc45429\",\"license\":\"MIT\"},\"contracts/libraries/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xae7a1e407ed171ecd3a0d3976875d6c58eefdccf831ebce6314ec94892dffc03\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IWETH.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\",\"keccak256\":\"0x9322725581103de3f494f25318f2ebaf50100d57c2631a26d4c253833bc6bc23\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526001805460ff1916905534801561001a57600080fd5b506001600055600780546001600160a01b0319163317905561080c806100416000396000f3fe60806040526004361061009b5760003560e01c80630d5cc9381461016f57806312d43a511461019b578063392e53cd146101cc5780633fc8cef3146101f557806363ae21031461020a5780638de10c2e14610231578063cfad57a214610246578063d7c41c7914610279578063ee138d0f146102d2578063f887ea40146102e7578063fbfa77cf146102fc578063fc2cee62146103115761016a565b3661016a5760035460408051808201909152601981527827b93232b92137b7b59d1034b73b30b634b21039b2b73232b960391b6020820152906001600160a01b031633146101675760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561012c578181015183820152602001610114565b50505050905090810190601f1680156101595780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50005b600080fd5b34801561017b57600080fd5b506101996004803603602081101561019257600080fd5b503561033b565b005b3480156101a757600080fd5b506101b06103fc565b604080516001600160a01b039092168252519081900360200190f35b3480156101d857600080fd5b506101e161040b565b604080519115158252519081900360200190f35b34801561020157600080fd5b506101b0610414565b34801561021657600080fd5b5061021f610423565b60408051918252519081900360200190f35b34801561023d57600080fd5b5061021f610429565b34801561025257600080fd5b506101996004803603602081101561026957600080fd5b50356001600160a01b031661042f565b34801561028557600080fd5b50610199600480360360c081101561029c57600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359091169060808101359060a00135610509565b3480156102de57600080fd5b506101b06106e3565b3480156102f357600080fd5b506101b06106f2565b34801561030857600080fd5b506101b0610706565b34801561031d57600080fd5b506101996004803603602081101561033457600080fd5b5035610715565b60075460408051808201909152601481527327b93232b92137b7b59d103337b93134b23232b760611b6020820152906001600160a01b031633146103c05760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561012c578181015183820152602001610114565b5060068190556040805182815290517fe46d9daf6d25f7615efa1d0183b90ac6759d85014b598e409aadf0fd918d59a69181900360200190a150565b6007546001600160a01b031681565b60015460ff1681565b6003546001600160a01b031681565b60055481565b60065481565b60075460408051808201909152601481527327b93232b92137b7b59d103337b93134b23232b760611b6020820152906001600160a01b031633146104b45760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561012c578181015183820152602001610114565b50600780546001600160a01b0383166001600160a01b0319909116811790915560408051918252517fe24c39186e9137521953beaa8446e71f55b8f12296984f9d4273ceb1af728d909181900360200190a150565b60075460408051808201909152601481527327b93232b92137b7b59d103337b93134b23232b760611b6020820152906001600160a01b0316331461058e5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561012c578181015183820152602001610114565b5060015460408051808201909152601e81527f4f72646572426f6f6b3a20616c726561647920696e697469616c697a6564000060208201529060ff16156106165760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561012c578181015183820152602001610114565b506001805460ff19168117610100600160a81b0319166101006001600160a01b0389811691820292909217909255600280546001600160a01b031990811689841690811790925560038054821689851690811790915560048054909216938816938417909155600586905560068590556040805194855260208501929092528382015260608301919091526080820184905260a08201839052517fcfb7ef8749fafc8da2af1ba3d025479ffc4e58f7dc420113e112512a3bda59639160c0908290030190a1505050505050565b6004546001600160a01b031681565b60015461010090046001600160a01b031681565b6002546001600160a01b031681565b60075460408051808201909152601481527327b93232b92137b7b59d103337b93134b23232b760611b6020820152906001600160a01b0316331461079a5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561012c578181015183820152602001610114565b5060058190556040805182815290517fbde5eafdc37b81830d70124cddccaaa6d034e71dda3c8fc18a959ca76a7cbcfc9181900360200190a15056fea2646970667358221220d6296c14af54ca40f9bbb1d9e1857ca848aaafd4bf5d721e64d00933de2668a264736f6c634300060c0033",
  "deployedBytecode": "0x60806040526004361061009b5760003560e01c80630d5cc9381461016f57806312d43a511461019b578063392e53cd146101cc5780633fc8cef3146101f557806363ae21031461020a5780638de10c2e14610231578063cfad57a214610246578063d7c41c7914610279578063ee138d0f146102d2578063f887ea40146102e7578063fbfa77cf146102fc578063fc2cee62146103115761016a565b3661016a5760035460408051808201909152601981527827b93232b92137b7b59d1034b73b30b634b21039b2b73232b960391b6020820152906001600160a01b031633146101675760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561012c578181015183820152602001610114565b50505050905090810190601f1680156101595780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50005b600080fd5b34801561017b57600080fd5b506101996004803603602081101561019257600080fd5b503561033b565b005b3480156101a757600080fd5b506101b06103fc565b604080516001600160a01b039092168252519081900360200190f35b3480156101d857600080fd5b506101e161040b565b604080519115158252519081900360200190f35b34801561020157600080fd5b506101b0610414565b34801561021657600080fd5b5061021f610423565b60408051918252519081900360200190f35b34801561023d57600080fd5b5061021f610429565b34801561025257600080fd5b506101996004803603602081101561026957600080fd5b50356001600160a01b031661042f565b34801561028557600080fd5b50610199600480360360c081101561029c57600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359091169060808101359060a00135610509565b3480156102de57600080fd5b506101b06106e3565b3480156102f357600080fd5b506101b06106f2565b34801561030857600080fd5b506101b0610706565b34801561031d57600080fd5b506101996004803603602081101561033457600080fd5b5035610715565b60075460408051808201909152601481527327b93232b92137b7b59d103337b93134b23232b760611b6020820152906001600160a01b031633146103c05760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561012c578181015183820152602001610114565b5060068190556040805182815290517fe46d9daf6d25f7615efa1d0183b90ac6759d85014b598e409aadf0fd918d59a69181900360200190a150565b6007546001600160a01b031681565b60015460ff1681565b6003546001600160a01b031681565b60055481565b60065481565b60075460408051808201909152601481527327b93232b92137b7b59d103337b93134b23232b760611b6020820152906001600160a01b031633146104b45760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561012c578181015183820152602001610114565b50600780546001600160a01b0383166001600160a01b0319909116811790915560408051918252517fe24c39186e9137521953beaa8446e71f55b8f12296984f9d4273ceb1af728d909181900360200190a150565b60075460408051808201909152601481527327b93232b92137b7b59d103337b93134b23232b760611b6020820152906001600160a01b0316331461058e5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561012c578181015183820152602001610114565b5060015460408051808201909152601e81527f4f72646572426f6f6b3a20616c726561647920696e697469616c697a6564000060208201529060ff16156106165760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561012c578181015183820152602001610114565b506001805460ff19168117610100600160a81b0319166101006001600160a01b0389811691820292909217909255600280546001600160a01b031990811689841690811790925560038054821689851690811790915560048054909216938816938417909155600586905560068590556040805194855260208501929092528382015260608301919091526080820184905260a08201839052517fcfb7ef8749fafc8da2af1ba3d025479ffc4e58f7dc420113e112512a3bda59639160c0908290030190a1505050505050565b6004546001600160a01b031681565b60015461010090046001600160a01b031681565b6002546001600160a01b031681565b60075460408051808201909152601481527327b93232b92137b7b59d103337b93134b23232b760611b6020820152906001600160a01b0316331461079a5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561012c578181015183820152602001610114565b5060058190556040805182815290517fbde5eafdc37b81830d70124cddccaaa6d034e71dda3c8fc18a959ca76a7cbcfc9181900360200190a15056fea2646970667358221220d6296c14af54ca40f9bbb1d9e1857ca848aaafd4bf5d721e64d00933de2668a264736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15423,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 12429,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "isInitialized",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 12431,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "router",
        "offset": 1,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 12433,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "vault",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 12435,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "weth",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 12437,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "usdm",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 12439,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "minExecutionFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 12441,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "minPurchaseTokenAmountUsd",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 12443,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "gov",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}